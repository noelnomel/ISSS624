---
title: "Hands-on Exercise 2"
date: "21 November 2023"
date-modified: "last-modified"
format: html
execute: 
  echo: true # all code chunks will appear
  eval: true # all code chunks will run live
  warning: false # do not display warning message
editor: visual
---

# Overview

This is the second hands-on exercise for ISSS624 Applied Geospatial Analytics.

# 1. Spatial Weights and Applications

## 1.1. Data and Study Area

Two data sets will be used in this exercise:

1.  Hunan county boundary layer: geospatial data set in ESRI shapefile format.

2.  Hunan_2012.csv: Hunan's local development indicators in 2012.

The following R packages will be imported and used in this exercise:

1.  sf package to import geospatial data

2.  readr package to import csv files

3.  dplyr package to perform relational join function

4.  spdep package to compute spatial weights and spatially lagged variables

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## 1.2. Importing Data

### 1.2.1. Importing Geospatial Data

The following code imports the shapefile into R using the `st_read()` function from the `sf` package:

```{r}
hunan <- st_read(dsn = "data/geospatial",
                 layer = "Hunan")
```

### 1.2.2. Importing Aspatial Data

The following code imports the csv file into R using `read_csv()` function from the `readr` package:

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### 1.2.3. Performing Relational Join

The following code joins the attribute table of Hunan's SpatialPolygonsDataFrame with the attribute fields of the hunan2012 data frame using the `left_join()` function from the `dplyr` package:

```{r}
hunan <- left_join(hunan, hunan2012) %>%
  select(1:4,7,15)
```

## 1.3. Visualising Regional Development Indicator

We will now prepare a base map and a choropleth map to show the distribution of GDPPC 2012 by using the `qtm()` function from the `tmap` package:

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size = 0.4)

gdppc <- qtm(hunan,"GDPPC")
```

```{r}
tmap_arrange(basemap, gdppc, asp = 1, ncol = 2)
```

## 1.4. Computing Contiguity Spatial Weights

The `poly2nb()` function from the `spdep` package will be used to compute contiguity weight matrices for the study area. This function builds a list of neighbours based on regions with contiguous boundaries.

The default `queen` argument is `TRUE`, which will return a list of first order neighbours using the queen criteria.

### 1.4.1. Computing Contiguity-based Neighbours (`Queen`)

This code is used to compute the `queen` contiguity weight matrix:

```{r}
wm_q <- poly2nb(hunan, queen = TRUE)
summary(wm_q)
```

The summary report shows that there are 88 regions in Hunan; the most connected region has 11 neighbours while there are only two regions with one neighbour.

For each polygon in the polygon object, `wm_q` lists all neighbouring polygons. We can view the neighbours of a specific polygon object using the following code:

```{r}
wm_q[[1]]
```

The output shows that polygon ID 1 has five neighbours, and the numbers shown represent the polygon IDs stored in the data frame.

We can retrieve the county name of polygon ID 1:

```{r}
hunan$County[1]
```

Which shows that polygon ID 1 is Anxiang County.

To reveal the county names of all neighbouring counties:

```{r}
hunan$NAME_3[c(wm_q[[1]])]
```

We can retrieve the GDPPC of the counties by using the following code:

```{r}
hunan$GDPPC[wm_q[[1]]]
```

The printed output shows that the GDPPC of the five nearest neighbours of County ID 1 based on Queen's method are 20981, 34592, 24473, 21311, and 22879 respectively.

The complete weight matrix can be displayed using the str() function:

```{r}
str(wm_q)
```

### 1.4.2. Creating Contiguity-based Neighbours (Rook)

This code is used to compute the `rook`contiguity weight matrix:

```{r}
wm_r <- poly2nb(hunan, queen = FALSE)
summary(wm_r)
```

The summary report shows that there are 88 regions in Hunan; the most connected region has 10 neighbours while there are only two regions with one neighbour.

### 1.4.3. Visualising Contiguity Weights

Contiguity weights can be visualised using a connectivity graph, which takes a point and draws lines to each neighbouring point. As an intermediary step, points have to be derived from the polygons in the current data set.

The coordinates of each point have to be stored in a separate data frame using a mapping function to map a function to each element of a vector and return a vector of the same length. The input vector will be the geometry column of us.bound, the st_centroid() function will be used with the map_dbl() variation from the purrr package.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

> The longitude value is accessed through double brackets \[\[\]\] and 1 as longitude is the first value in each centroid.

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

> The latitude value is accessed through double brackets \[\[\]\] and 2 as latitude is the second value in each centroid.

```{r}
coords <- cbind(longitude, latitude)
```

To check that longitude and latitude are formatted correctly:

```{r}
head(coords)
```

We will now plot the Queen contiguity-based neighbours map:

```{r}
plot(hunan$geometry, border = "lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

Next, we will plot the Rook contiguity-based neighbours map:

```{r}
plot(hunan$geometry, border = "lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

Then, we will plot both Queen and Rook contiguity-based neighbours map together:

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border = "lightgrey", main = "Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
plot(hunan$geometry, border = "lightgrey", main = "Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## 1.5. Computing Distance-based Neighbours

In this section, distance-based weight matrices will be derived using the dnearneigh() function from the spdep package.

The function identifies neighbours of region points by Euclidean distance bound by the lower d1= and the upper d2= range.

### 1.5.1. Determine the Cut-off Distance

The cut-off distance can be determined using the following code:

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest and nearest neighbour distance is 61.79km. Hence, using this as the upper threshold ensures that all units will have at least one neighbour.

### 1.5.2. Computing Fixed Distance Weight Matrix

We will now compute the distance weight matrix by using the dnearneigh() function:

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

The output shows that there are 88 regions and that on average, each point is connected to 3.68 neighbours.

Next, we will use `str()` to display the content of the `wm_d62` weight matrix:

```{r}
str(wm_d62)
```

We can also display the content of the `wm_d62` weight matrix using `table()` and `card()`:

```{r}
table(hunan$County, card(wm_d62))
```

#### 1.5.2.1. Plotting Fixed Distance Weight Matrix

We will use the following code to plot the distance weight matrix:

```{r}
plot(hunan$geometry, border = 'lightgrey')
plot(wm_d62, coords, add = TRUE)
plot(k1, coords, add = TRUE, col = 'red', length = 0.08)
```

The red line shows the links of the first nearest neighbours and the black line shows the links of neighbours within a cut-off distance of 62km.

We can plot both maps next to each other for comparison:

```{r}
par(mfrow = c(1,2))
plot(hunan$geometry, border = 'lightgrey', main = "First nearest neighbours")
plot(k1, coords, add = TRUE, col = 'red', length = 0.08)
plot(hunan$geometry, border = 'lightgrey', main = 'Distance link')
plot(wm_d62, coords, add = TRUE, pch = 19, cex = 0.6)
```

### 1.5.3. Computing Adaptive Distance Weight Matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas tend to have more neighbours while less densely settled areas tend to have less neighbours. Having many neighbours smooths the neighbour relationship across more neighbours.

The number of neighbours can be controlled using k-nearest neighbours, through either accepting asymmetric neighbours or imposing symmetry as shown in the code below:

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

We can display the content of the matrix using `str()`:

```{r}
str(knn6)
```

#### 1.5.3.1. Plotting Distance-based Neighbours

We can plot the weight matrix using the following code:

```{r}
plot(hunan$geometry, border = 'lightgrey')
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## 1.6. Weights Based On Inversed Distance Weighting

Spatial weights can be derived based on Inversed Distance Weighting (IDW).

First, the distances between areas are computed using `nbdist()` from `spdep`.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

### 1.6.1. Row-standardised Weights Matrix

For this exercise, we will assign equal weight (`style = "W"`) by assigning 1/(# neighbours) to each neighbouring county before summing the weighted income values. However, the polygons along the edges of the study are will base their lagged values on fewer polygons, which might potentially over- or under-estimate the true nature of spatial autocorrelation in the data. Other more robust options such as `style = "B"` will be more robust.

```{r}
rswm_q <- nb2listw(wm_q, style = "W", zero.policy = TRUE)
rswm_q
```

The `zero.policy = TRUE` option allows for lists of non-neighbours.

To see the weight of the first polygon's eight neighbours:

```{r}
rswm_q$weights[10]
```

It is observed that each neighbour is assigned 0.125 of the total weight.

Using the same method, we can derive a row standardised distance weight by using this code:

```{r}
rswm_ids <- nb2listw(wm_q, glist = ids, style = "B", zero.policy = TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## 1.7. Applications of Spatial Weight Matrix

We will learn four different spatial lagged variables in this section:

1.  Spatial lag with row-standardised weights

2.  Spatial lag as a sum of neighbouring values

3.  Spatial window average

4.  Spatial window sum

### 1.7.1. Spatial Lag with Row-standardised Weights

We will compute the average neighbour GDPPC value for each polygon. These values are referred to as spatially lagged values.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

We can append the spatially lag GDPPC values to the hunan sf data frame using the following code:

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3","lag GDPPC")
hunan <- left_join(hunan, lag.res)
```

```{r}
head(hunan)
```

Next, we will plot the GDPPC and spatial lag GDPPC for comparison:

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp = 1, ncol = 2)
```

### 1.7.2. Spatial Lag as Sum of Neighbouring Values

We can calculate spatial lag as a sum of neighbouring values by assigning binary weights. This requires a function to assign binary weights to be applied to the neighbours list before using `glist =` from the `nb2listw` function to assign these weights.

We start by using `lapply` to assign a value of 1 to each neighbour. `lapply` applies a function across each value in the neighbours structure.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, glist = b_weights, style = "B")
b_weights2
```

Next, we use `lag.listw()` to compute a lag variable from the weight and GDPPC:

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
lag.res
```

Next, we will append the `lag_sum GDPPC` field into `hunan` sf data frame:

```{r}
hunan <- left_join(hunan, lag.res)
```

Now we will plot the gdppc and spatial lag sum gdppc for comparison:

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp = 1, ncol = 2)
```

### 1.7.3. Spatial Window Average

The spatial window average uses row-standardised weights and includes the diagonal elements. We will add the diagonal element to the neighbours structures before assignign weights,

This is done with the `include.self()` function from `spdep`:

```{r}
wm_qs <- include.self(wm_q)
summary(wm_qs)
```

It is observed that the number of nonzero links, percentage of nonzero weights and average number of links are higher than that of wm_q.

We will now examine the neighbour list of area\[1\] using the following code:

```{r}
wm_qs[[1]]
```

Polygon ID 1 now has six neighbours instead of five.

We can use the following code to obtain the weights:

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

We will now use `nb2listw()` and `glist()` to explitcitly assign weight values and create the lag variable.

```{r}
lag_avg_gdppc <- lag.listw(wm_qs, hunan$GDPPC)
lag_avg_gdppc
```

We will convert the lag variable `listw` object into a data frame:

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

We will join the lag_window_ave GDPPC values with the hunan sf data frame:

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

We can use `kable()` to prepare a table to compare the values of lag GDPPC and spatial window average:

```{r}
hunan %>%
  select("County",
         "lag GDPPC",
         "lag_window_avg GDPPC") %>%
  kable()
```

Lastly, we can plot the `lag_gdppc` and `w_avg_gdppc` for comparison:

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp = 1, ncol = 2)
```

### 1.7.4. Spatial Window Sum

The spatial window sum is the counterpart of the window average without using row-standardised weights.

First, we have to add diagonal elements to the neighbour list:

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Next, we will assign binary weights to the neighbour structure to include the diagonal elements:

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

It is observed that Polygon ID 1 has six neighbours now instead of five.

Next, we will use `nb2listw()` and `glist()` to explicitly assign weight values:

```{r}
b_weights2 <- nb2listw(wm_qs, glist = b_weights, style = "B")
b_weights2
```

Next, we will compute the lag variable using `lag.listw()`:

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Next, we will convert the lag variable `listw` object to a data frame:

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Next, we will append the `w_sum_gdppc` values ot the `hunan` sf data frame:

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

We can use `kable()` to prepare a table to compare the values of lag GDPPC and spatial window sum:

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Lastly, we can plot the `lag_gdppc` and `w_sum_gdppc` for comparison:

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_gdppc, w_sum_gdppc, asp = 1, ncol = 2)
```
