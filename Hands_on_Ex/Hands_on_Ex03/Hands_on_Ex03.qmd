---
title: "Hands-on Exercise 3: Spatial Interaction Models"
date: "30 November 2023"
date-modified: "last-modified"
format: html
execute: 
  echo: true # all code chunks will appear
  eval: true # all code chunks will run live
  warning: false # do not display warning message
editor: visual
---

# 1. Overview

Spatial interaction represent the flow of people, material, or information between locations in geographical space. It encompasses everything from freight shipments, energy flows, and the global trade in rare antiquities, to flight schedules, rush hour woes, and pedestrian foot traffic.

Each spatial interaction, as an analogy for a set of movements, is composed of a discrete origin/destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations of origin and columns are related to locations of destination. Such a matrix is commonly known as an origin/destination matrix or a spatial interaction matrix.

In this hands-on exercise, we will build an OD matrix by using Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall.

# 2. Getting Started

We will use the following R packages in this exercise:

-   `sf` for importing, integrating, processing and transforming geospatial data

-   `tidyverse` for importing, integrating, wrangling and visualising data

-   `tmap` for creating thematic maps

```{r}
pacman::p_load(tmap, sf, DT, stplanr, 
               performance, ggpubr, tidyverse)
```

# 3. Preparing the Flow Data

## 3.1. Importing Origin Destination data

First, we will import the *Passenger Volume by Origin Destination Bus Stops* data set download from LTA DataMall:

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202310.csv")
glimpse(odbus)
```

It is observed that `ORIGIN_PT_CODE` and `DESTINATION_PT_CODE` are both recognised as integers. Since these are bus stop identifiers, they should be converted to factor type using the following code:

```{r}
odbus$ORIGIN_PT_CODE <-
  as.factor(odbus$ORIGIN_PT_CODE) 

odbus$DESTINATION_PT_CODE <-
  as.factor(odbus$DESTINATION_PT_CODE)

glimpse(odbus)
```

## 3.2. Extracting Study Data

We will extract commuting flows on weekdays between 6am and 9am.

```{r}
odbus6_9 <- odbus %>%
  filter(DAY_TYPE == 'WEEKDAY') %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))

datatable(odbus6_9)
```

Save the output in rds format for future use:

```{r}
write_rds(odbus6_9, "data/rds/odbus6_9.rds")
```

## 3.3. Importing Geospatial Data

The following geospatial data will be used in this exercise:

-   BusStop: Provides location of bus stops

-   MPSZ-2019: Provides sub-zone bondaries based on the URA Master Plan 2019

We will use the following codes to import the two data sets into R:

```{r}
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)

busstop
```

```{r}
mpsz2019 <- st_read(dsn = "data/geospatial",
                    layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)

mpsz2019
```

Save the output in rds format for future use:

```{r}
write_rds(mpsz2019, "data/rds/mpsz2019.rds")
```

# 4. Geospatial Data Wrangling

## 4.1. Combining busstop and mpsz2019

We will use the following code to populate the planning subzone code from mpsz2019 sf dataframe to busstop sf dataframe:

```{r}
bs_mpsz2019 <- st_intersection(busstop, mpsz2019) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()

datatable(bs_mpsz2019)
```

st_intersection() is used to perform point and polygon overlay, output is in point sf object. Five bus stops are dropped from the results as they are outside Singapore's boundaries.

Save the output in rds format for future use:

```{r}
write_rds(bs_mpsz2019, "data/rds/bs_mpsz2019.rds")
```

Next, we will append the planning subzone code from `bs_mpsz2019` onto the `odbus6_9` dataframe:

```{r}
od_data <- left_join(odbus6_9, bs_mpsz2019,
                     by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

Check for duplicates using the following code:

```{r}
duplicates <- od_data %>%
  group_by_all() %>%
  filter(n() > 1) %>%
  ungroup

glimpse(duplicates)
```

Duplicate records are found in the dataframe. We will use the following code to retain the unique records:

```{r}
od_data <- unique(od_data)
```

Next, we update the `od_data` dataframe with the planning subzone codes:

```{r}
od_data <- left_join(od_data, bs_mpsz2019,
                     by = c("DESTIN_BS" = "BUS_STOP_N"))
```

```{r}
duplicates <- od_data %>%
  group_by_all() %>%
  filter(n() > 1) %>%
  ungroup

glimpse(duplicates)
```

```{r}
od_data <- unique(od_data)
```

```{r}
od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(AM_PEAK = sum(TRIPS))

od_data
```

Save the output in rds format for future use:

```{r}
write_rds(od_data, "data/rds/od_data.rds")
```

# 5. Visualising Spatial Interaction

We will prepare a desire line using the `stplanr` package.

## 5.1. Removing Intra-zonal Flows

We will use the following code to remove intra-zonal flows:

```{r}
od_data1 <- od_data[od_data$ORIGIN_SZ != od_data$DESTIN_SZ,]
```

## 5.2. Creating Desire Lines

We will use `od2line()` from the `stplanr` package to create desire lines:

```{r}
flow_line <- od2line(flow = od_data1,
                     zones = mpsz2019,
                     zone_code = "SUBZONE_C")
```

## 5.3. Visualising Desire Lines

We use the following code to visualise the desire lines:

```{r}
tm_shape(mpsz2019) +
  tm_polygons() +
flow_line%>%
  tm_shape() +
  tm_lines(lwd = "AM_PEAK",
           style = "quantile",
           scale = c(0.1,1,3,5,7,10),
           n = 6,
           alpha = 0.3)
```

When the data flow is very messy and highly skewed, focusing on selected flows may give more clarity. For example, we can focus on flow greater than or equal to 5000:

```{r}
tm_shape(mpsz2019) +
  tm_polygons() +
flow_line %>%
  filter(AM_PEAK >= 5000) %>%
tm_shape() +
  tm_lines(lwd = "AM_PEAK",
           style = "quantile",
           scale = c(0.1,1,3,5,7,10),
           n = 6,
           alpha = 0.3)
```
