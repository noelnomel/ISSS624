[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "Welcome to ISSS624 Geospatial Analytics Application!\nI will share with you my learning journey in Geospatial Analytics in this webpage :)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands_on_Ex01.html",
    "href": "Hands_on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This is the overview paragraph."
  },
  {
    "objectID": "Hands_on_Ex01.html#overview",
    "href": "Hands_on_Ex01.html#overview",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This is the overview paragraph."
  },
  {
    "objectID": "Hands_on_Ex01.html#getting-started",
    "href": "Hands_on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nThis is the getting started paragraph."
  },
  {
    "objectID": "Hands-on_Ex/chap01/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Ex/chap01/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex/chap01/Hands_on_Ex01.html",
    "href": "Hands-on_Ex/chap01/Hands_on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This is the overview paragraph."
  },
  {
    "objectID": "Hands-on_Ex/chap01/Hands_on_Ex01.html#overview",
    "href": "Hands-on_Ex/chap01/Hands_on_Ex01.html#overview",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This is the overview paragraph."
  },
  {
    "objectID": "Hands-on_Ex/chap01/Hands_on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/chap01/Hands_on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nThis is the getting started paragraph."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex01/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html",
    "title": "Hands-on Exercise 1: Geospatial Data Science and Visualisation",
    "section": "",
    "text": "This is the first hands-on exercise for ISSS624 Applied Geospatial Analytics. The first step is creating this webpage, and the subsequent steps are in data wrangling and choropleth mapping."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#overview",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#overview",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This is the first hands-on exercise for ISSS624 Applied Geospatial Analytics. The first step is creating this webpage, and the subsequent steps are in data wrangling and choropleth mapping."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#getting-started",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\n\nWebpage Creation\nThis webpage is created on RStudio using the quarto package. The package is installed using the following steps:\n\nOn RStudio &gt; Tools &gt; Install Packages &gt; Type “quarto” in Packages field &gt; Install to R/R-4.3.2/library\n\n\n\nData Acquisition\nFor this Hands-on Exercise, the following data sets are assembled from the sources as indicated:\n\n\n\nS/N\nName of Data Set\nFile type\nSource\nExtracted to (file directory)\n\n\n\n\n1\nMaster Plan 2014 Subzone Boundary (Web)\nSHP\ndata.gov.sg\n/data/geospatial\n\n\n2\nPre-Schools Location\nKML\ndata.gov.sg\n/data/geospatial\n\n\n3\nCycling Path\nSHP\nLTA DataMall\n/data/geospatial\n\n\n4\nSingapore Listings\nCSV\nInside Airbnb\n/data/aspatial"
  },
  {
    "objectID": "In_class_Ex/In-class_Ex01/data/geospatial/MPSZ-2019.html",
    "href": "In_class_Ex/In-class_Ex01/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In_class_Ex/In-class_Ex01/In_class_Ex01.html#data-import",
    "href": "In_class_Ex/In-class_Ex01/In_class_Ex01.html#data-import",
    "title": "In-Class Exercise 1",
    "section": "Data Import",
    "text": "Data Import"
  },
  {
    "objectID": "In_class_Ex/In-class_Ex01/In_class_Ex01.html",
    "href": "In_class_Ex/In-class_Ex01/In_class_Ex01.html",
    "title": "In-Class Exercise 1",
    "section": "",
    "text": "The following packages will be used in this in-class exercise, and they are loaded into R using the following code:\n\ntmap: thematic mapping\nsf: geospatial data handling\ntidyverse: non-spatial data handling\nknitr: for creating html table\n\n\npacman::p_load(tmap, sf, tidyverse)"
  },
  {
    "objectID": "In_class_Ex/In-class_Ex01/In_class_Ex01.html#getting-started",
    "href": "In_class_Ex/In-class_Ex01/In_class_Ex01.html#getting-started",
    "title": "In-Class Exercise 1",
    "section": "",
    "text": "The following packages will be used in this in-class exercise, and they are loaded into R using the following code:\n\ntmap: thematic mapping\nsf: geospatial data handling\ntidyverse: non-spatial data handling\nknitr: for creating html table\n\n\npacman::p_load(tmap, sf, tidyverse)"
  },
  {
    "objectID": "In_class_Ex/In-class_Ex01/In_class_Ex01.html#preparing-data-flow",
    "href": "In_class_Ex/In-class_Ex01/In_class_Ex01.html#preparing-data-flow",
    "title": "In-Class Exercise 1",
    "section": "Preparing Data Flow",
    "text": "Preparing Data Flow\n\nImporting the OD Data\nFirstly, we will import the dataset Passenger Volume by Origin Destination Bus Stops downloaded from LTA DataMall by using read_csv() of readr package.\n\nodbus &lt;- read.csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n\nA quick check of the odbus tibble data frame shows that the values in ORIGIN_PT_CODE and DESTINATION_PT_CODE are in numeric data type.\n\nodbus$ORIGIN_PT_CODE &lt;-\n  as.factor(odbus$ORIGIN_PT_CODE) \nodbus$DESTINATION_PT_CODE &lt;-\n  as.factor(odbus$DESTINATION_PT_CODE)\n\nFinding the number of trips taken between 7 and 10 am on weekdays.\n\norigtrip_7_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE=='WEEKDAY') %&gt;%\n  filter(TIME_PER_HOUR &gt;= 7 &\n          TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n\nbusstop &lt;- st_read(dsn=\"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `BusStop' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\In_class_Ex\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nmpsz &lt;- st_read(dsn=\"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\In_class_Ex\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26..."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#geospatial-data-wrangling",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 1",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\nIn this Hands-on Exercise, the following R packages will be used:\n\nsf for importing, managing, and processing geospatial data;\ntidyverse to perform data science tasks such as importing, wrangling, and visualising data.\n\nWe will import the packages using the following code:\n\npacman::p_load(sf,tidyverse)\n\n\nImporting Geospatial Data\nWe will use the st_read() function from the sf package to import the following Geospatial data:\n\n\n\n\n\n\n\n\n\nS/N\nName of Data Set\nFormat\nLayer\n\n\n\n\n1\nMaster Plan 2014 Subzone Boundary (Web)\nSHP\nPolygon feature layer\n\n\n2\nPre-Schools Location\nSHP\nLine feature layer\n\n\n3\nCycling Path\nKML\nPoint feature layer\n\n\n\n\nImport Polygon Feature Data\nUsing the code below, we will import MP14_SUBZONE_WEB_PL shapefile into R as a polygon feature data frame. As the input geospatial data is in shapefile format, two arguments will be used:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\n\nmpsz = st_read(dsn = \"data/geospatial\",\n               layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\Hands_on_Ex\\Hands_on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nAs the dataset is in SHP format, the file extensions (.shp, .dbf, .prj, and .sbn) need not be included.\n\nRunning the code shows that there are 323 multipolygon features and 15 fields in the mpsz simple feature data frame. The mpsz data frame is using the SVY21 projected coordinates system.\n\n\nImport Line Feature Data\nSimilarly, we will use the following code with the same arguments to import CyclingPath shapefile into R as a line feature data frame.\n\ncyclingpath = st_read(dsn = \"data/geospatial\",\n               layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\Hands_on_Ex\\Hands_on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nRunning the code shows that there are 2558 linestring features and 2 fields in the cyclingpath linestring feature data frame, which is also using the SVY21 projected coordinates system.\n\n\nImport Point Feature Data\nThe following code is used to import the PreSchoolsLocation file. As the data is in KML format, the full filepath has to be provided:\n\npreschools = st_read(dsn = \"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\Hands_on_Ex\\Hands_on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nAs the full filepath is defined, we need not indicate the layer to be imported in the code.\n\nRunning the code shows that there are 2290 point features and 2 fields in the preschools point feature data frame. The preschools data frame is using the WGS84 coordinates system.\n\n\n\nChecking the Contents of a Simple Feature data frame\nThere are different ways to have a quick view of the contents of a simple feature data frame. In this section, we will explore the following methods:\n\nst_geometry()\nglimpse()\nhead()\n\n\nUsing st_geometry()\nst_geometry returns an object of class sfc, a list-column with geometries.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nRunning the code above shows minimal information about the feature, such as the geometry type, bounding box, and the coordinate system of the data. The first 5 geometries are also displayed.\n\n\nUsing glimpse()\nUsing glimpse() allows us to see all columns of the data (but displayed in rows) and the type of data stored in field. The values in each column are also displayed following each column header.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nRunning the code above shows that FMEL_UPD_D is in date data type, while X_ADDR, Y_ADDR, SHAPE_Leng, and SHAPE_Area are in double-precision values.\n\n\nUsing head()\nUsing head() shows the first n records to display for each field, while also displaying information regarding the geometric features.\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nRunning the code above displayed information on the geometric features and the first 5 records in the data set.\n\n\n\nPlotting the Geospatial Data\nWe will use the plot() function to visualise the geospatial features.\n\nplot(mpsz)\n\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum.\n\nWe can choose to plot only the geometry as shown below:\n\nplot(st_geometry(mpsz))\n\n\n\n\nWe can also choose to plot the sf object using a specific attribute:\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\nProjection Transformation\nIn order to perform geoprocessing using two different geospatial data sets, both data sets should be projected using similar coordinate systems.\nWe will conduct projection transformation to project a simple feature data frame from one coordinate system to another.\n\nAssigning EPSG Code to Simple Feature Data Frame\nOne common issue that happens when geospatial data is imported into R is that the coordinate system of the source data is wrongly assigned during import.\nFor example, examining the mpsz simple feature data frame using st_crs() shows that:\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThe mpsz data frame is projected to SVY21 but the code above reveals that EPSG is 9001 when the correct EPSG code for SVY21 is 3414.\nWe will use st_set_crs() from the sf package to assign EPSG code 3414 to the mpsz data frame.\n\nmpsz3414 &lt;- st_set_crs(mpsz,3414)\n\nNow to confirm that mpsz3414 is assigned the correct EPSG code, we will run the following code, which shows the EPSG code as 3414.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nTransform Projection of preschools from WGS84 to SVY21\nAs geographic coordinate system is not appropriate for use with analysis that requires distance and/or area measurements, it may be necessary to transform such data to projected coordinate system.\nFor example, the preschools simple feature data frame is using WGS84 geographic coordinate system.\n\nst_geometry(preschools)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nWe will have to reproject preschools from the existing system to SVY21 mathematically, which can be achieved through st_transform(). st_set_crs() only replaces the crs and does not reproject the data.\n\npreschools3414 &lt;- st_transform(preschools,crs=3414)\n\nNow to confirm that preschools3414 is using the SVY21 system, we will run the following code:\n\nst_geometry(preschools3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nIt can be observed that preschools3414 is now using SVY21. Furthermore, it can be observed that the values in Bounding box are greater than the decimal degree range of 0 to 360 commonly used by many geographic coordinate systems.\n\n\n\nImporting and Converting Aspatial Data\n\nImporting Aspatial Data\nThe listings.csv file downloaded from Inside Airbnb is a aspatial dataset as it does not contain geospatial data but it has fields that capture the x- and y-coordinates of the data points.\nWe will import the CSV file into R, save it as a tibble data frame, before converting it to a simple feature data frame.\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nWe will use the following code to examine if the data file was imported correctly:\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,483 × 75\n       id listing_url            scrape_id last_scraped source name  description\n    &lt;dbl&gt; &lt;chr&gt;                      &lt;dbl&gt; &lt;date&gt;       &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;      \n 1  71609 https://www.airbnb.co…   2.02e13 2023-09-23   previ… Vill… For 3 room…\n 2  71896 https://www.airbnb.co…   2.02e13 2023-09-23   previ… Home… &lt;b&gt;The spa…\n 3  71903 https://www.airbnb.co…   2.02e13 2023-09-23   previ… Home… Like your …\n 4 275343 https://www.airbnb.co…   2.02e13 2023-09-23   city … Rent… **IMPORTAN…\n 5 275344 https://www.airbnb.co…   2.02e13 2023-09-23   city … Rent… Lovely hom…\n 6 289234 https://www.airbnb.co…   2.02e13 2023-09-23   previ… Home… This whole…\n 7 294281 https://www.airbnb.co…   2.02e13 2023-09-23   city … Rent… I have 3 b…\n 8 324945 https://www.airbnb.co…   2.02e13 2023-09-23   city … Rent… **IMPORTAN…\n 9 330095 https://www.airbnb.co…   2.02e13 2023-09-23   city … Rent… **IMPORTAN…\n10 369141 https://www.airbnb.co…   2.02e13 2023-09-23   city … Plac… A room in …\n# ℹ 3,473 more rows\n# ℹ 68 more variables: neighborhood_overview &lt;chr&gt;, picture_url &lt;chr&gt;,\n#   host_id &lt;dbl&gt;, host_url &lt;chr&gt;, host_name &lt;chr&gt;, host_since &lt;date&gt;,\n#   host_location &lt;chr&gt;, host_about &lt;chr&gt;, host_response_time &lt;chr&gt;,\n#   host_response_rate &lt;chr&gt;, host_acceptance_rate &lt;chr&gt;,\n#   host_is_superhost &lt;lgl&gt;, host_thumbnail_url &lt;chr&gt;, host_picture_url &lt;chr&gt;,\n#   host_neighbourhood &lt;chr&gt;, host_listings_count &lt;dbl&gt;, …\n\n\nThe output shows that the listings tibble data frame consists of 3,483 records and 75 columns. The latitude and longitude fields will be used for the next step. It is observed that both fields are in decimal degree format; we could guess that the data is using WGS84 geographic coordinate system.\n\n\nConverting Aspatial Data\nWe will use the st_as_sf() function from the sf package to convert listings tibble data into a simple feature data frame.\n\nlistings_sf &lt;- st_as_sf(listings, \n                        coords = c(\"longitude\",\"latitude\"),\n                        crs=4326) %&gt;%\n  st_transform(crs=3414)\n\n\nthe coords argument takes x-coordinates followed by y-coordinates\nEPSG 4326 refers to the WSG84 geographic coordinate system\n%&gt;% is used to nest st_transform() to reproject the newly created simple feature data frame into SVY21 projected coordinate system.\n\n\nglimpse(listings_sf)\n\nRows: 3,483\nColumns: 74\n$ id                                           &lt;dbl&gt; 71609, 71896, 71903, 2753…\n$ listing_url                                  &lt;chr&gt; \"https://www.airbnb.com/r…\n$ scrape_id                                    &lt;dbl&gt; 2.023092e+13, 2.023092e+1…\n$ last_scraped                                 &lt;date&gt; 2023-09-23, 2023-09-23, …\n$ source                                       &lt;chr&gt; \"previous scrape\", \"previ…\n$ name                                         &lt;chr&gt; \"Villa in Singapore · ★4.…\n$ description                                  &lt;chr&gt; \"For 3 rooms.Book room 1&…\n$ neighborhood_overview                        &lt;chr&gt; NA, NA, \"Quiet and view o…\n$ picture_url                                  &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_id                                      &lt;dbl&gt; 367042, 367042, 367042, 1…\n$ host_url                                     &lt;chr&gt; \"https://www.airbnb.com/u…\n$ host_name                                    &lt;chr&gt; \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   &lt;date&gt; 2011-01-29, 2011-01-29, …\n$ host_location                                &lt;chr&gt; \"Singapore\", \"Singapore\",…\n$ host_about                                   &lt;chr&gt; \"Hi My name is Belinda -H…\n$ host_response_time                           &lt;chr&gt; \"within a few hours\", \"wi…\n$ host_response_rate                           &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"…\n$ host_acceptance_rate                         &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"…\n$ host_is_superhost                            &lt;lgl&gt; FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_picture_url                             &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_neighbourhood                           &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          &lt;dbl&gt; 5, 5, 5, 52, 52, 5, 7, 52…\n$ host_total_listings_count                    &lt;dbl&gt; 15, 15, 15, 65, 65, 15, 8…\n$ host_verifications                           &lt;chr&gt; \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                &lt;chr&gt; NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 &lt;chr&gt; \"East Region\", \"East Regi…\n$ property_type                                &lt;chr&gt; \"Private room in villa\", …\n$ room_type                                    &lt;chr&gt; \"Private room\", \"Private …\n$ accommodates                                 &lt;dbl&gt; 3, 1, 2, 1, 1, 4, 2, 1, 1…\n$ bathrooms                                    &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ bathrooms_text                               &lt;chr&gt; \"1 private bath\", \"Shared…\n$ bedrooms                                     &lt;dbl&gt; NA, NA, NA, NA, NA, 3, NA…\n$ beds                                         &lt;dbl&gt; 3, 1, 2, 1, 1, 5, 1, 1, 1…\n$ amenities                                    &lt;chr&gt; \"[\\\"Private backyard \\\\u2…\n$ price                                        &lt;chr&gt; \"$150.00\", \"$80.00\", \"$80…\n$ minimum_nights                               &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ maximum_nights                               &lt;dbl&gt; 365, 365, 365, 999, 999, …\n$ minimum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ maximum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ minimum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ maximum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ minimum_nights_avg_ntm                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ maximum_nights_avg_ntm                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ calendar_updated                             &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              &lt;dbl&gt; 28, 28, 28, 1, 30, 28, 30…\n$ availability_60                              &lt;dbl&gt; 58, 58, 58, 1, 60, 58, 60…\n$ availability_90                              &lt;dbl&gt; 88, 88, 88, 1, 90, 88, 90…\n$ availability_365                             &lt;dbl&gt; 89, 89, 89, 275, 274, 89,…\n$ calendar_last_scraped                        &lt;date&gt; 2023-09-23, 2023-09-23, …\n$ number_of_reviews                            &lt;dbl&gt; 20, 24, 47, 22, 17, 12, 1…\n$ number_of_reviews_ltm                        &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 3…\n$ number_of_reviews_l30d                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 1, 1…\n$ first_review                                 &lt;date&gt; 2011-12-19, 2011-07-30, …\n$ last_review                                  &lt;date&gt; 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         &lt;dbl&gt; 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       &lt;dbl&gt; 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    &lt;dbl&gt; 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        &lt;dbl&gt; 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  &lt;dbl&gt; 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       &lt;dbl&gt; 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          &lt;dbl&gt; 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      &lt;chr&gt; NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE…\n$ calculated_host_listings_count               &lt;dbl&gt; 5, 5, 5, 52, 52, 5, 7, 52…\n$ calculated_host_listings_count_entire_homes  &lt;dbl&gt; 0, 0, 0, 1, 1, 0, 1, 1, 1…\n$ calculated_host_listings_count_private_rooms &lt;dbl&gt; 5, 5, 5, 51, 51, 5, 6, 51…\n$ calculated_host_listings_count_shared_rooms  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            &lt;dbl&gt; 0.14, 0.16, 0.31, 0.17, 0…\n$ geometry                                     &lt;POINT [m]&gt; POINT (41972.5 3639…\n\n\nIt can be observed that a new column labelled geometry has been added while the longitude and latitude columns have been dropped from the listings_sf data frame.\n\n\n\nGeoprocessing with sf package\nIn addition to the functions explored above, the sf package also offers a wide range of geoprocessing functions, also called GIS analysis.\nWe will explore the use of buffering and point in polygon count in this section.\n\nBuffering\nScenario:\nThe authorities are planning to upgrade existing cycling paths and they need to acquire 5 metres of reserved land on both sides of existing cycling paths. You are tasked to determine the extent of land that needs to be acquired and its total area.\nWe will derive the solution using st_buffer() to compute the 5-metre buffer around the current cycling paths.\n\nbuffer_cycling &lt;- st_buffer(cyclingpath,dist=5, nQuadSegs = 30)\n\nWe will then calculate the area of the buffers using this code:\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nTo derive the total area of land involved in this plan, we will use the sum() function:\n\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]\n\n\n\n\nPoint-in-Polygon Count\nScenario:\nYou are tasked to find out the number of pre-schools in each Planning Subzone.\nThis can be achieved by combining the lengths() function and the st_intersects() function as shown in the code below. The st_instersects() function identifies pre-schools located in each Planning Subzone while the lengths() function counts the number of pre-schools that are found in each Planning Subzone.\n\nmpsz3414$'PreSchools_Count' &lt;- lengths(st_intersects(mpsz3414,preschools3414))\n\n\nst_intersection(): Returns a geometry representing the point-set intersection of two geometries. \nst_intersects(): Returns true if two geometries intersect (i.e. if they have any point in common).\n\nNext, we will check the summary statistics of the newly derived field using summary() as shown below:\n\nsummary(mpsz3414$\"PreSchools_Count\")\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nWe will use top_n() from the dplyr package to display the Planning Subzone with the highest number of pre-schools:\n\ntop_n(mpsz3414,1,PreSchools_Count)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSchools_Count\n1    4339824 MULTIPOLYGON (((42196.76 38...               72\n\n\n\n\nCalculate Density\nScenario:\nYou are tasked to determine the density of pre-schools by Planning Subzone.\nWe can do this by first deriving the area of each Planning Subzone using st_area() from the sf package.\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\nNext, we use the mutate() function from the dplyr package to compute the density:\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate('PreSchools_Density' = PreSchools_Count/Area * 1000000)\n\nLastly, we can check that the fields are computed correctly by displaying the top 2 Planning Subzones with the highest pre-school density.\n\ntop_n(mpsz3414,2,PreSchools_Density)\n\nSimple feature collection with 2 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 26864.99 ymin: 28623.75 xmax: 29976.93 ymax: 45653.61\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND    PLN_AREA_N PLN_AREA_C\n1       27          8         CECIL    DTSZ08      Y DOWNTOWN CORE         DT\n2      278          3 MANDAI ESTATE    MDSZ03      N        MANDAI         MD\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D  X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 65AA82AF6F4D925D 2014-12-05 29730.2 29011.33\n2   NORTH REGION       NR F6266F7368DBB9AB 2014-12-05 27082.7 45367.46\n  SHAPE_Leng SHAPE_Area                       geometry PreSchools_Count\n1   2116.095   196619.9 MULTIPOLYGON (((29808.18 28...                7\n2   1633.708   143137.9 MULTIPOLYGON (((27119.56 45...                5\n            Area PreSchools_Density\n1 196619.9 [m^2]   35.60169 [1/m^2]\n2 143137.9 [m^2]   34.93134 [1/m^2]\n\n\n\n\n\nExploratory Data Analysis (EDA)\nWe will explore the use of ggplot2 functions to create functional statistical graphs from geospatial data for EDA purposes.\nFirstly, we will plot a histogram using the hist() function to reveal the distribution of PreSchools_Density:\n\nhist(mpsz3414$PreSchools_Density)\n\n\n\n\nUsing the hist() function is straightforward but it provides limited room for customisation of the plots. Next, we will explore using ggplot2 functions to plot a customisable histogram:\n\nggplot(data = mpsz3414,\n       aes(x = as.numeric(PreSchools_Density)))+\n  geom_histogram(bins = 20, color = \"black\", fill = \"lightblue\")+\n  labs(title = \"Are pre-schools evenly distributed in Singapore?\",\n       subtitle = \"There are many planning subzones with only one pre-school; \\non the other hand, there are two planning subzones with at least 20 pre-schools\",\n       x = 'Pre-school Density (per km sq)',\n       y = 'Frequency')\n\n\n\n\nNext, we will use ggplot2 functions to plot a scatterplot to show the relationship between PreSchools_Density and PreSchools_Count:\n\nggplot(data = mpsz3414,\n       aes(y = PreSchools_Count,\n           x = as.numeric(PreSchools_Density))) +\n  geom_point(color = \"black\", fill = \"lightblue\") +\n  xlim(0,40) +\n  ylim(0,40) +\n  labs(title = \"Is there a relationship between PreSchools_Density and PreSchools_Count?\",\n       x = 'Pre-school Density (per km sq)',\n       y = 'Pre-School Count')"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#webpage-creation",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#webpage-creation",
    "title": "Hands-on Exercise 1: Geospatial Data Science and Visualisation",
    "section": "1.1. Webpage Creation",
    "text": "1.1. Webpage Creation\nThis webpage is created on RStudio using the quarto package. The package is installed using the following steps:\n\nOn RStudio &gt; Tools &gt; Install Packages &gt; Type “quarto” in Packages field &gt; Install to R/R-4.3.2/library"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#data-acquisition",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#data-acquisition",
    "title": "Hands-on Exercise 1: Geospatial Data Science and Visualisation",
    "section": "1.2. Data Acquisition",
    "text": "1.2. Data Acquisition\nFor this Hands-on Exercise, the following data sets are assembled from the sources as indicated:\n\n\n\nS/N\nName of Data Set\nFile type\nSource\nExtracted to (file directory)\n\n\n\n\n1\nMaster Plan 2014 Subzone Boundary (Web)\nSHP\ndata.gov.sg\n/data/geospatial\n\n\n2\nPre-Schools Location\nKML\ndata.gov.sg\n/data/geospatial\n\n\n3\nCycling Path\nSHP\nLTA DataMall\n/data/geospatial\n\n\n4\nSingapore Listings\nCSV\nInside Airbnb\n/data/aspatial\n\n\n5\nSingapore Residents by Planning Area/Subzone\nCSV\nsingstat.gov.sg\n/data/aspatial"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#importing-geospatial-data",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Science and Visualisation",
    "section": "2.1. Importing Geospatial Data",
    "text": "2.1. Importing Geospatial Data\nWe will use the st_read() function from the sf package to import the following Geospatial data:\n\n\n\n\n\n\n\n\n\nS/N\nName of Data Set\nFormat\nLayer\n\n\n\n\n1\nMaster Plan 2014 Subzone Boundary (Web)\nSHP\nPolygon feature layer\n\n\n2\nPre-Schools Location\nSHP\nLine feature layer\n\n\n3\nCycling Path\nKML\nPoint feature layer\n\n\n\n\n2.1.1. Import Polygon Feature Data\nUsing the code below, we will import MP14_SUBZONE_WEB_PL shapefile into R as a polygon feature data frame. As the input geospatial data is in shapefile format, two arguments will be used:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\n\nmpsz = st_read(dsn = \"data/geospatial\",\n               layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\Hands_on_Ex\\Hands_on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nAs the dataset is in SHP format, the file extensions (.shp, .dbf, .prj, and .sbn) need not be included.\n\nRunning the code shows that there are 323 multipolygon features and 15 fields in the mpsz simple feature data frame. The mpsz data frame is using the SVY21 projected coordinates system.\n\n\n2.1.2. Import Line Feature Data\nSimilarly, we will use the following code with the same arguments to import CyclingPath shapefile into R as a line feature data frame.\n\ncyclingpath = st_read(dsn = \"data/geospatial\",\n               layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\Hands_on_Ex\\Hands_on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nRunning the code shows that there are 2558 linestring features and 2 fields in the cyclingpath linestring feature data frame, which is also using the SVY21 projected coordinates system.\n\n\n2.1.3. Import Point Feature Data\nThe following code is used to import the PreSchoolsLocation file. As the data is in KML format, the full filepath has to be provided:\n\npreschools = st_read(dsn = \"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\Hands_on_Ex\\Hands_on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nAs the full filepath is defined, we need not indicate the layer to be imported in the code.\n\nRunning the code shows that there are 2290 point features and 2 fields in the preschools point feature data frame. The preschools data frame is using the WGS84 coordinates system."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#checking-the-contents-of-a-simple-feature-data-frame",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#checking-the-contents-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Science and Visualisation",
    "section": "2.2. Checking the Contents of a Simple Feature data frame",
    "text": "2.2. Checking the Contents of a Simple Feature data frame\nThere are different ways to have a quick view of the contents of a simple feature data frame. In this section, we will explore the following methods:\n\nst_geometry()\nglimpse()\nhead()\n\n\n2.2.1. Using st_geometry()\nst_geometry returns an object of class sfc, a list-column with geometries.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nRunning the code above shows minimal information about the feature, such as the geometry type, bounding box, and the coordinate system of the data. The first 5 geometries are also displayed.\n\n\n2.2.2. Using glimpse()\nUsing glimpse() allows us to see all columns of the data (but displayed in rows) and the type of data stored in field. The values in each column are also displayed following each column header.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nRunning the code above shows that FMEL_UPD_D is in date data type, while X_ADDR, Y_ADDR, SHAPE_Leng, and SHAPE_Area are in double-precision values.\n\n\n2.2.3. Using head()\nUsing head() shows the first n records to display for each field, while also displaying information regarding the geometric features.\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nRunning the code above displayed information on the geometric features and the first 5 records in the data set."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#plotting-the-geospatial-data",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Science and Visualisation",
    "section": "2.3. Plotting the Geospatial Data",
    "text": "2.3. Plotting the Geospatial Data\nWe will use the plot() function to visualise the geospatial features.\n\nplot(mpsz)\n\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum.\n\nWe can choose to plot only the geometry as shown below:\n\nplot(st_geometry(mpsz))\n\n\n\n\nWe can also choose to plot the sf object using a specific attribute:\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#projection-transformation",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#projection-transformation",
    "title": "Hands-on Exercise 1: Geospatial Data Science and Visualisation",
    "section": "2.4. Projection Transformation",
    "text": "2.4. Projection Transformation\nIn order to perform geoprocessing using two different geospatial data sets, both data sets should be projected using similar coordinate systems.\nWe will conduct projection transformation to project a simple feature data frame from one coordinate system to another.\n\n2.4.1. Assigning EPSG Code to Simple Feature Data Frame\nOne common issue that happens when geospatial data is imported into R is that the coordinate system of the source data is wrongly assigned during import.\nFor example, examining the mpsz simple feature data frame using st_crs() shows that:\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThe mpsz data frame is projected to SVY21 but the code above reveals that EPSG is 9001 when the correct EPSG code for SVY21 is 3414.\nWe will use st_set_crs() from the sf package to assign EPSG code 3414 to the mpsz data frame.\n\nmpsz3414 &lt;- st_set_crs(mpsz,3414)\n\nNow to confirm that mpsz3414 is assigned the correct EPSG code, we will run the following code, which shows the EPSG code as 3414.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n2.4.2. Transform Projection of preschools from WGS84 to SVY21\nAs geographic coordinate system is not appropriate for use with analysis that requires distance and/or area measurements, it may be necessary to transform such data to projected coordinate system.\nFor example, the preschools simple feature data frame is using WGS84 geographic coordinate system.\n\nst_geometry(preschools)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nWe will have to reproject preschools from the existing system to SVY21 mathematically, which can be achieved through st_transform(). st_set_crs() only replaces the crs and does not reproject the data.\n\npreschools3414 &lt;- st_transform(preschools,crs=3414)\n\nNow to confirm that preschools3414 is using the SVY21 system, we will run the following code:\n\nst_geometry(preschools3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nIt can be observed that preschools3414 is now using SVY21. Furthermore, it can be observed that the values in Bounding box are greater than the decimal degree range of 0 to 360 commonly used by many geographic coordinate systems."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#importing-and-converting-aspatial-data",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#importing-and-converting-aspatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Science and Visualisation",
    "section": "2.5. Importing and Converting Aspatial Data",
    "text": "2.5. Importing and Converting Aspatial Data\n\n2.5.1. Importing Aspatial Data\nThe listings.csv file downloaded from Inside Airbnb is a aspatial dataset as it does not contain geospatial data but it has fields that capture the x- and y-coordinates of the data points.\nWe will import the CSV file into R, save it as a tibble data frame, before converting it to a simple feature data frame.\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nWe will use the following code to examine if the data file was imported correctly:\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,483 × 75\n       id listing_url            scrape_id last_scraped source name  description\n    &lt;dbl&gt; &lt;chr&gt;                      &lt;dbl&gt; &lt;date&gt;       &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;      \n 1  71609 https://www.airbnb.co…   2.02e13 2023-09-23   previ… Vill… For 3 room…\n 2  71896 https://www.airbnb.co…   2.02e13 2023-09-23   previ… Home… &lt;b&gt;The spa…\n 3  71903 https://www.airbnb.co…   2.02e13 2023-09-23   previ… Home… Like your …\n 4 275343 https://www.airbnb.co…   2.02e13 2023-09-23   city … Rent… **IMPORTAN…\n 5 275344 https://www.airbnb.co…   2.02e13 2023-09-23   city … Rent… Lovely hom…\n 6 289234 https://www.airbnb.co…   2.02e13 2023-09-23   previ… Home… This whole…\n 7 294281 https://www.airbnb.co…   2.02e13 2023-09-23   city … Rent… I have 3 b…\n 8 324945 https://www.airbnb.co…   2.02e13 2023-09-23   city … Rent… **IMPORTAN…\n 9 330095 https://www.airbnb.co…   2.02e13 2023-09-23   city … Rent… **IMPORTAN…\n10 369141 https://www.airbnb.co…   2.02e13 2023-09-23   city … Plac… A room in …\n# ℹ 3,473 more rows\n# ℹ 68 more variables: neighborhood_overview &lt;chr&gt;, picture_url &lt;chr&gt;,\n#   host_id &lt;dbl&gt;, host_url &lt;chr&gt;, host_name &lt;chr&gt;, host_since &lt;date&gt;,\n#   host_location &lt;chr&gt;, host_about &lt;chr&gt;, host_response_time &lt;chr&gt;,\n#   host_response_rate &lt;chr&gt;, host_acceptance_rate &lt;chr&gt;,\n#   host_is_superhost &lt;lgl&gt;, host_thumbnail_url &lt;chr&gt;, host_picture_url &lt;chr&gt;,\n#   host_neighbourhood &lt;chr&gt;, host_listings_count &lt;dbl&gt;, …\n\n\nThe output shows that the listings tibble data frame consists of 3,483 records and 75 columns. The latitude and longitude fields will be used for the next step. It is observed that both fields are in decimal degree format; we could guess that the data is using WGS84 geographic coordinate system.\n\n\n2.5.2. Converting Aspatial Data\nWe will use the st_as_sf() function from the sf package to convert listings tibble data into a simple feature data frame.\n\nlistings_sf &lt;- st_as_sf(listings, \n                        coords = c(\"longitude\",\"latitude\"),\n                        crs=4326) %&gt;%\n  st_transform(crs=3414)\n\n\nthe coords argument takes x-coordinates followed by y-coordinates\nEPSG 4326 refers to the WSG84 geographic coordinate system\n%&gt;% is used to nest st_transform() to reproject the newly created simple feature data frame into SVY21 projected coordinate system.\n\n\nglimpse(listings_sf)\n\nRows: 3,483\nColumns: 74\n$ id                                           &lt;dbl&gt; 71609, 71896, 71903, 2753…\n$ listing_url                                  &lt;chr&gt; \"https://www.airbnb.com/r…\n$ scrape_id                                    &lt;dbl&gt; 2.023092e+13, 2.023092e+1…\n$ last_scraped                                 &lt;date&gt; 2023-09-23, 2023-09-23, …\n$ source                                       &lt;chr&gt; \"previous scrape\", \"previ…\n$ name                                         &lt;chr&gt; \"Villa in Singapore · ★4.…\n$ description                                  &lt;chr&gt; \"For 3 rooms.Book room 1&…\n$ neighborhood_overview                        &lt;chr&gt; NA, NA, \"Quiet and view o…\n$ picture_url                                  &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_id                                      &lt;dbl&gt; 367042, 367042, 367042, 1…\n$ host_url                                     &lt;chr&gt; \"https://www.airbnb.com/u…\n$ host_name                                    &lt;chr&gt; \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   &lt;date&gt; 2011-01-29, 2011-01-29, …\n$ host_location                                &lt;chr&gt; \"Singapore\", \"Singapore\",…\n$ host_about                                   &lt;chr&gt; \"Hi My name is Belinda -H…\n$ host_response_time                           &lt;chr&gt; \"within a few hours\", \"wi…\n$ host_response_rate                           &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"…\n$ host_acceptance_rate                         &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"…\n$ host_is_superhost                            &lt;lgl&gt; FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_picture_url                             &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_neighbourhood                           &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          &lt;dbl&gt; 5, 5, 5, 52, 52, 5, 7, 52…\n$ host_total_listings_count                    &lt;dbl&gt; 15, 15, 15, 65, 65, 15, 8…\n$ host_verifications                           &lt;chr&gt; \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                &lt;chr&gt; NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 &lt;chr&gt; \"East Region\", \"East Regi…\n$ property_type                                &lt;chr&gt; \"Private room in villa\", …\n$ room_type                                    &lt;chr&gt; \"Private room\", \"Private …\n$ accommodates                                 &lt;dbl&gt; 3, 1, 2, 1, 1, 4, 2, 1, 1…\n$ bathrooms                                    &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ bathrooms_text                               &lt;chr&gt; \"1 private bath\", \"Shared…\n$ bedrooms                                     &lt;dbl&gt; NA, NA, NA, NA, NA, 3, NA…\n$ beds                                         &lt;dbl&gt; 3, 1, 2, 1, 1, 5, 1, 1, 1…\n$ amenities                                    &lt;chr&gt; \"[\\\"Private backyard \\\\u2…\n$ price                                        &lt;chr&gt; \"$150.00\", \"$80.00\", \"$80…\n$ minimum_nights                               &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ maximum_nights                               &lt;dbl&gt; 365, 365, 365, 999, 999, …\n$ minimum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ maximum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ minimum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ maximum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ minimum_nights_avg_ntm                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ maximum_nights_avg_ntm                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ calendar_updated                             &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              &lt;dbl&gt; 28, 28, 28, 1, 30, 28, 30…\n$ availability_60                              &lt;dbl&gt; 58, 58, 58, 1, 60, 58, 60…\n$ availability_90                              &lt;dbl&gt; 88, 88, 88, 1, 90, 88, 90…\n$ availability_365                             &lt;dbl&gt; 89, 89, 89, 275, 274, 89,…\n$ calendar_last_scraped                        &lt;date&gt; 2023-09-23, 2023-09-23, …\n$ number_of_reviews                            &lt;dbl&gt; 20, 24, 47, 22, 17, 12, 1…\n$ number_of_reviews_ltm                        &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 3…\n$ number_of_reviews_l30d                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 1, 1…\n$ first_review                                 &lt;date&gt; 2011-12-19, 2011-07-30, …\n$ last_review                                  &lt;date&gt; 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         &lt;dbl&gt; 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       &lt;dbl&gt; 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    &lt;dbl&gt; 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        &lt;dbl&gt; 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  &lt;dbl&gt; 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       &lt;dbl&gt; 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          &lt;dbl&gt; 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      &lt;chr&gt; NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE…\n$ calculated_host_listings_count               &lt;dbl&gt; 5, 5, 5, 52, 52, 5, 7, 52…\n$ calculated_host_listings_count_entire_homes  &lt;dbl&gt; 0, 0, 0, 1, 1, 0, 1, 1, 1…\n$ calculated_host_listings_count_private_rooms &lt;dbl&gt; 5, 5, 5, 51, 51, 5, 6, 51…\n$ calculated_host_listings_count_shared_rooms  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            &lt;dbl&gt; 0.14, 0.16, 0.31, 0.17, 0…\n$ geometry                                     &lt;POINT [m]&gt; POINT (41972.5 3639…\n\n\nIt can be observed that a new column labelled geometry has been added while the longitude and latitude columns have been dropped from the listings_sf data frame."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#geoprocessing-with-sf-package",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1: Geospatial Data Science and Visualisation",
    "section": "2.6. Geoprocessing with sf package",
    "text": "2.6. Geoprocessing with sf package\nIn addition to the functions explored above, the sf package also offers a wide range of geoprocessing functions, also called GIS analysis.\nWe will explore the use of buffering and point in polygon count in this section.\n\n2.6.1. Buffering\nScenario:\nThe authorities are planning to upgrade existing cycling paths and they need to acquire 5 metres of reserved land on both sides of existing cycling paths. You are tasked to determine the extent of land that needs to be acquired and its total area.\nWe will derive the solution using st_buffer() to compute the 5-metre buffer around the current cycling paths.\n\nbuffer_cycling &lt;- st_buffer(cyclingpath,dist=5, nQuadSegs = 30)\n\nWe will then calculate the area of the buffers using this code:\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nTo derive the total area of land involved in this plan, we will use the sum() function:\n\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]\n\n\n\n\n2.6.2. Point-in-Polygon Count\nScenario:\nYou are tasked to find out the number of pre-schools in each Planning Subzone.\nThis can be achieved by combining the lengths() function and the st_intersects() function as shown in the code below. The st_instersects() function identifies pre-schools located in each Planning Subzone while the lengths() function counts the number of pre-schools that are found in each Planning Subzone.\n\nmpsz3414$'PreSchools_Count' &lt;- lengths(st_intersects(mpsz3414,preschools3414))\n\n\nst_intersection(): Returns a geometry representing the point-set intersection of two geometries. \nst_intersects(): Returns true if two geometries intersect (i.e. if they have any point in common).\n\nNext, we will check the summary statistics of the newly derived field using summary() as shown below:\n\nsummary(mpsz3414$\"PreSchools_Count\")\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nWe will use top_n() from the dplyr package to display the Planning Subzone with the highest number of pre-schools:\n\ntop_n(mpsz3414,1,PreSchools_Count)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSchools_Count\n1    4339824 MULTIPOLYGON (((42196.76 38...               72\n\n\n\n\n2.6.3. Calculate Density\nScenario:\nYou are tasked to determine the density of pre-schools by Planning Subzone.\nWe can do this by first deriving the area of each Planning Subzone using st_area() from the sf package.\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\nNext, we use the mutate() function from the dplyr package to compute the density:\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate('PreSchools_Density' = PreSchools_Count/Area * 1000000)\n\nLastly, we can check that the fields are computed correctly by displaying the top 2 Planning Subzones with the highest pre-school density.\n\ntop_n(mpsz3414,2,PreSchools_Density)\n\nSimple feature collection with 2 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 26864.99 ymin: 28623.75 xmax: 29976.93 ymax: 45653.61\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND    PLN_AREA_N PLN_AREA_C\n1       27          8         CECIL    DTSZ08      Y DOWNTOWN CORE         DT\n2      278          3 MANDAI ESTATE    MDSZ03      N        MANDAI         MD\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D  X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 65AA82AF6F4D925D 2014-12-05 29730.2 29011.33\n2   NORTH REGION       NR F6266F7368DBB9AB 2014-12-05 27082.7 45367.46\n  SHAPE_Leng SHAPE_Area                       geometry PreSchools_Count\n1   2116.095   196619.9 MULTIPOLYGON (((29808.18 28...                7\n2   1633.708   143137.9 MULTIPOLYGON (((27119.56 45...                5\n            Area PreSchools_Density\n1 196619.9 [m^2]   35.60169 [1/m^2]\n2 143137.9 [m^2]   34.93134 [1/m^2]"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#exploratory-data-analysis-eda",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1: Geospatial Data Science and Visualisation",
    "section": "2.7. Exploratory Data Analysis (EDA)",
    "text": "2.7. Exploratory Data Analysis (EDA)\nWe will explore the use of ggplot2 functions to create functional statistical graphs from geospatial data for EDA purposes.\nFirstly, we will plot a histogram using the hist() function to reveal the distribution of PreSchools_Density:\n\nhist(mpsz3414$PreSchools_Density)\n\n\n\n\nUsing the hist() function is straightforward but it provides limited room for customisation of the plots. Next, we will explore using ggplot2 functions to plot a customisable histogram:\n\nggplot(data = mpsz3414,\n       aes(x = as.numeric(PreSchools_Density)))+\n  geom_histogram(bins = 20, color = \"black\", fill = \"lightblue\")+\n  labs(title = \"Are pre-schools evenly distributed in Singapore?\",\n       subtitle = \"There are many planning subzones with only one pre-school; \\non the other hand, there are two planning subzones with at least 20 pre-schools\",\n       x = 'Pre-school Density (per km sq)',\n       y = 'Frequency')\n\n\n\n\nNext, we will use ggplot2 functions to plot a scatterplot to show the relationship between PreSchools_Density and PreSchools_Count:\n\nggplot(data = mpsz3414,\n       aes(y = PreSchools_Count,\n           x = as.numeric(PreSchools_Density))) +\n  geom_point(color = \"black\", fill = \"lightblue\") +\n  xlim(0,40) +\n  ylim(0,40) +\n  labs(title = \"Is there a relationship between PreSchools_Density and PreSchools_Count?\",\n       x = 'Pre-school Density (per km sq)',\n       y = 'Pre-School Count')"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#importing-and-preparing-attribute-data",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#importing-and-preparing-attribute-data",
    "title": "Hands-on Exercise 1: Geospatial Data Science and Visualisation",
    "section": "3.1. Importing and Preparing Attribute Data",
    "text": "3.1. Importing and Preparing Attribute Data\n\n3.1.1. Importing Attribute Data\nIn addition to the data sets imported in the previous sections, we will now import the respopagesex2011to2020.csv file into Rstudio. This can be done using the read_csv() function from the readr package.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n3.1.2. Preparing Attribute Data\nWe will now prepare a data table from popdata with values from year 2020. The data table should include PA, SZ and AG, and the following breakdown by AG will be used:\n\nYOUNG: from AG 0-4 to AG 20-24\nECON ACTIVE: from AG 25-29 to AG 60-64\nAGED: from AG 65 and above\nTOTAL: all age groups\nDEPENDENCY: ratio between YOUNG + AGED and ECON ACTIVE groups\n\n\n3.1.2.1. Data Wrangling\nThe following functions and codes will be used to transform the data:\n\npivot_wider() from the tidyr package\nmutate(), filter(), group_by(), and select() from the dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise('POP' = sum(Pop)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from = AG,\n              values_from = POP) %&gt;%\n  mutate('YOUNG' = rowSums(.[3:6])\n         + rowSums(.[12])) %&gt;%\n  mutate('ECON_ACTIVE' = rowSums(.[7:11])\n         + rowSums(.[13:15])) %&gt;%\n  mutate('AGED' = rowSums(.[16:21])) %&gt;%\n  mutate('TOTAL' = rowSums(.[3:21])) %&gt;%\n  mutate('DEPENDENCY' = (YOUNG + AGED) / ECON_ACTIVE) %&gt;%\n  select('PA','SZ','YOUNG','ECON_ACTIVE','AGED','TOTAL','DEPENDENCY' )\n\n\n\n3.1.2.2. Joining Attribute and Geospatial Data\nThe data fields in both the Attribute and Geospatial data sets must be exactly the same before a georelational join can be performed. Hence, all PA and SZ fields in popdata2020 must be first converted to uppercase to match the fields in mpsz.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ),\n            .funs = list(toupper)) %&gt;%\n  filter('ECON_ACTIVE' &gt; 0)\n\nNext, we will use left_join() from the dplyr package to join mpsz and pop2020 using SUBZONE_N and SZ as the identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nmpsz, a simple feature data frame, is used as the left data table to keep the same format of the output table.\n\nThe newly created simple feature data frame is saved to the rds folder using write_rds().\n\nwrite_rds(mpsz_pop2020,\"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#choropleth-mapping-using-tmap",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#choropleth-mapping-using-tmap",
    "title": "Hands-on Exercise 1: Geospatial Data Science and Visualisation",
    "section": "3.2 Choropleth Mapping using tmap",
    "text": "3.2 Choropleth Mapping using tmap\nThere are two ways to plot a thematic map using tmap:\n\nQuick plot using qtm()\nCustomisable plot using tmap elements\n\n\n3.2.1. Quick Plot Using qtm()\nThe qtm() function from tmap is the fastest and easiest way to plot a choropleth map with less customisation options available.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, fill = \"DEPENDENCY\")\n\n\n\n\n\nWe can use the \"plot\" option tmap_mode() to plot a static map or \"view\" option for an interactive mode.\nThe fill argument is used to map the attribute.\n\n\n\n3.2.2. Customisable Plot Using tmap Elements\nTo draw a high quality choropleth map, tmap’s drawing elements can be used:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = 'quantile',\n          palette = 'Blues',\n          title = 'Dependency Ratio') +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by Planning Subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authority\\n and population data from Department of Statistics\",\n             position = c('left','bottom'))\n\n\n\n\n\n3.2.2.1. Drawing a Base Map\nThe basic building block of tmap is tmap_shape() followed by one or more layer elements such as tm_fill() or tm_polygons().\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\ntm_shape() is used to define the input data (mpsz_pop2020)\ntm_polygons() is used to draw the planning subzone polygons\n\n\n\n3.2.2.2. Drawing a Choropleth Map Using tm_polygons()\nA target variable can be assigned to tm_polygons() to draw a choropleth map showing the geographical distribution:\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\nThe default interval binning used is “pretty”.\nThe default colour scheme used is Yl0rRd from ColorBrewer.\nThe default colour for missing values is grey.\n\n\n\n3.2.2.3. Drawing a Choropleth Map Using tm_fill() and tm_border()\ntm_polygons() does the work of both tm_fill() and tm_border() in one step. tm_fill() fills the polygons using the default colour scheme and tm_borders() adds borders to the polygons:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nThe planning subzones are now shaded by its respective dependency ratio.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\nNow, borders are added to the boundaries of each planning subzone.\n\nalpha is used to define the transparency with 0 being totally transparent and 1 being totally opaque.\ncol is used to define the border colour\nlwd is used to define the border line width, default is 1\nlty is used to define the border line type, default is 'solid'\n\n\n\n\n3.2.3. Data Classification Methods Using tmap\nMost choropleth maps employ methods of data classification, which is to take a large number of observations and group them into ranges or classes.\ntmap provides 10 classification methods: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\n\n3.2.3.1. Plotting Choropleth Maps with Built-in Classification Methods\nUsing sd classification method:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing equal classification method:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing quantile classification method:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing kmeans classification method:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing hclust classification method:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing bclust classification method:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"bclust\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\nUsing fisher classification method:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing jenks classification method:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing jenks classification method with 6 classes:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"jenks\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing jenks classification method with 10 classes:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"jenks\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing jenks classification method with 20 classes:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"jenks\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing different number of classes narrows the range of each bin and more subtle changes in colours between bins.\n\n\n3.2.3.2. Plotting Choropleth Maps with Custom Breaks\nThe category breaks for built-in methods are calculated in the background. The default can be overriden by setting the breakpoints explicitly using breaks in tm_fill(). As the breaks include the minimum and maximum values, n+1 elements must be defined in breaks in increasing order.\nUsing the code below, we can examine the descriptive statistics of the variable before deciding on the break points:\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nUsing the results, we will set the break points at 0.60, 0.70, 0.80, and 0.90. The minimum and maximum is set at 0 and 1.00 respectively.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n3.2.4. Customising Colour Scheme using RColorBrewer Palettes\ntmap supports colour ramps defined by the user or by a set of pre-defined colour ramps from the RColorBrewer package.\nThe preferred colour to be used on the choropleth map can be defined using the palette argument in tm_fill():\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nBy default, the colours are used from light to dark in ascending order of the values associated with it. The shades of the colours used can be reversed by adding a “-” prefix:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n3.2.5. Customising Map Layouts\nMap layout refers to the different elements in a map such as the objects to be mapped, title, scale bar, compass, margins and aspect ratios.\n\n3.2.5.1. Map Legend\nDifferent legend options are available in tmap to customise the placement, format, and appearance of the legend:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"jenks\",\n          palette = 'Blues',\n          legend.hist = TRUE,\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by Planning Subzone\\n(Jenks Classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\",\"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n3.2.5.2. Map Style\nDifferent layout settings can be changed using tmap_style(). Available styles are \"classic\", \"white\" (default), \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\", etc.\nUsing \"classic\" style:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") + \n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n3.2.5.3. Cartographic Furniture\nAdditional map furniture such as compass, scale bar, and grid lines may be added to the map using tm_compass(), tm_scale_bar(), and tm_grid() respectively:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"No. of Persons\") + \n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby Planning Subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Subzone Boundary from URA\\n\n             Population data from DOS\")\n\n\n\n\nThe map style follows the last change. We can use the following code to reset the map style to default:\n\ntmap_style(\"white\")\n\n\n\n\n3.2.6. Drawing Small Multiple Choropleth Maps\nFacet maps are composed of multiple maps arranged in a grid (adjacent or stacked). This allows for the visualisation of changes in spatial relationships in response to another variable such as time.\nSmall multiples, or facet maps, can be plotted in three ways:\n\nBy assigning multiple values to as least one aesthetic arguments\nBy defining a group-by variable in tm_facets()\nBy creating multiple standalone maps with tmap_arrange()\n\n\n3.2.6.1. Assigning Multiple Values to One Aesthetic Argument\nSmall multiple maps can be created by defining ncols in tm_fill():\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(c(\"YOUNG\", 'AGED'),\n          style = 'equal',\n          palette = 'Blues') +\n  tm_layout(legend.position = c('right','bottom')) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nSmall multiple maps can also be created by assigning multiple values to at least one of the aesthetic arguments:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(c(\"DEPENDENCY\", 'AGED'),\n          style = c('equal','quantile'),\n          palette = list('Blues', 'Greens')) +\n  tm_layout(legend.position = c('right','bottom')) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n3.2.6.2. Defining Group-by Variable in tm_facets()\nSmall multiple choropleth maps can be created using tm_facets():\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = 'quantile',\n          palette = 'Blues',\n          thres.poly = 0) +\n  tm_facets(by = 'REGION_N',\n            free.coords = TRUE,\n            drop.shapes = TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"),\n            title.size = 20)+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n3.2.6.2. Creating Multiple Standalone Maps with tmap_arrange()\nSmall multiple choropleth maps can be created using tm_arrange():\n\nyoungmap &lt;- tm_shape(mpsz_pop2020) +\n  tm_polygons(\"YOUNG\",\n              style = \"quantile\",\n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020) +\n  tm_polygons(\"AGED\",\n              style = 'quantile',\n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp = 1, ncol = 2)\n\n\n\n\n\n\n\n3.2.7. Using Selection Criterion to Map Spatial Object\nThe selection function can be used to map spatial objects that meet a specified criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N == 'CENTRAL REGION',]) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          legend.hist = TRUE,\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45,\n            legend.width = 5.0,\n            legend.position = c(\"right\",\"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "In_class_Ex/In-class_Ex01/In_class_Ex01.html#importing-origin-destination-data",
    "href": "In_class_Ex/In-class_Ex01/In_class_Ex01.html#importing-origin-destination-data",
    "title": "In-Class Exercise 1",
    "section": "2. Importing Origin Destination Data",
    "text": "2. Importing Origin Destination Data\nFirstly, we will import the dataset Passenger Volume by Origin Destination Bus Stops downloaded from LTA DataMall by using read_csv() of readr package.\n\nodbus &lt;- read.csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n\nA quick check of the odbus tibble data frame shows that the values in ORIGIN_PT_CODE and DESTINATION_PT_CODE are in numeric data type.\n\nglimpse(odbus)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;int&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;int&gt; 4168, 4168, 80119, 80119, 44069, 44069, 20281, 202…\n$ DESTINATION_PT_CODE &lt;int&gt; 10051, 10051, 90079, 90079, 17229, 17229, 20141, 2…\n$ TOTAL_TRIPS         &lt;int&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n\nWe will use the as.factor() function from the tidyverse package to convert these codes from numeric to factor data type:\n\nodbus$ORIGIN_PT_CODE &lt;-\n  as.factor(odbus$ORIGIN_PT_CODE) \nodbus$DESTINATION_PT_CODE &lt;-\n  as.factor(odbus$DESTINATION_PT_CODE)\n\nTo confirm that the data types are converted successfully:\n\nglimpse(odbus)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;int&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 4168, 4168, 80119, 80119, 44069, 44069, 20281, 202…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 17229, 20141, 2…\n$ TOTAL_TRIPS         &lt;int&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …"
  },
  {
    "objectID": "In_class_Ex/In-class_Ex01/In_class_Ex01.html#extracting-study-data",
    "href": "In_class_Ex/In-class_Ex01/In_class_Ex01.html#extracting-study-data",
    "title": "In-Class Exercise 1",
    "section": "3. Extracting Study Data",
    "text": "3. Extracting Study Data\nFor this exercise, we will extract commuting flows on weekdays between between 7 and 10 am:\n\norigin7_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == 'WEEKDAY') %&gt;%\n  filter(TIME_PER_HOUR &gt;= 7 &\n          TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n\nhead(origin7_9)\n\n# A tibble: 6 × 2\n  ORIGIN_PT_CODE TRIPS\n  &lt;fct&gt;          &lt;int&gt;\n1 1012            1617\n2 1013             813\n3 1019            1620\n4 1029            2383\n5 1039            2727\n6 1059            1415\n\n\nWe will save the output in rds format for future use:\n\nwrite_rds(origin7_9, \"data/rds/origin7_9.rds\")\n\nWe can then import the rds file into the R environment:\n\norigin7_9 &lt;- read_rds(\"data/rds/origin7_9.rds\")"
  },
  {
    "objectID": "In_class_Ex/In-class_Ex01/In_class_Ex01.html#working-with-geospatial-data",
    "href": "In_class_Ex/In-class_Ex01/In_class_Ex01.html#working-with-geospatial-data",
    "title": "In-Class Exercise 1",
    "section": "4. Working with Geospatial Data",
    "text": "4. Working with Geospatial Data\nWe will import two shapefile into RStudio:\n\nBusStop: This data provides the location of bus stops as of Q42022.\nMPSZ-2019: This data provides the subzone boundaries defined in the URA Master Plan 2019.\n\n\n4.1. Importing Geospatial Data\nWe will use the following code to import the BusStop data downloaded from LTA DataMall:\n\nbusstop &lt;- st_read(dsn=\"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `BusStop' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\In_class_Ex\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nWe can confirm that the import was done correctly by using this code:\n\nglimpse(busstop)\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\nNext, we will use the following code to import the MPSZ-2019 data downloaded from data.gov.sg:\n\nmpsz2019 &lt;- st_read(dsn=\"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\In_class_Ex\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nWe can confirm that the import was done correctly by using this code:\n\nglimpse(mpsz2019)\n\nRows: 332\nColumns: 7\n$ SUBZONE_N  &lt;chr&gt; \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"JURON…\n$ SUBZONE_C  &lt;chr&gt; \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPSZ05\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE RIVER\", \"WESTERN …\n$ PLN_AREA_C &lt;chr&gt; \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"WI\", \"SI\", \"SI\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"WEST…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"WR\", \"CR\", \"CR\",…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((33222.98 29..., MULTIPOLYGON (…"
  },
  {
    "objectID": "In_class_Ex/In-class_Ex01/In_class_Ex01.html#geospatial-data-wrangling",
    "href": "In_class_Ex/In-class_Ex01/In_class_Ex01.html#geospatial-data-wrangling",
    "title": "In-Class Exercise 1",
    "section": "5. Geospatial Data Wrangling",
    "text": "5. Geospatial Data Wrangling\n\n5.1. Combining busstop and mpsz2019\nWe will use the following code to populate planning subzone code from the mpsz2019 data frame into the busstop simple features data frame:\n\nbusstop_mpsz2019 &lt;- st_intersection(busstop, mpsz2019) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\nWe will save the output data into rds format for future use:\n\nwrite_rds(busstop_mpsz2019, \"data/rds/busstop_mpsz2019.rds\")\n\nNext, we will join the planning subzone code from the busstop_mpsz2019 data frame to the odbus7_9 data frame:\n\norigin_data &lt;- left_join(origin7_9, busstop_mpsz2019,\n                         by = c('ORIGIN_PT_CODE' = 'BUS_STOP_N')) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C)\n\nWe will now check for duplicates:\n\nduplicates &lt;- origin_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\n\nglimpse(duplicates)\n\nRows: 26\nColumns: 3\n$ ORIGIN_BS &lt;chr&gt; \"11009\", \"11009\", \"22501\", \"22501\", \"43709\", \"43709\", \"47201…\n$ TRIPS     &lt;int&gt; 13826, 13826, 9743, 9743, 1118, 1118, 23998, 23998, 6218, 62…\n$ ORIGIN_SZ &lt;chr&gt; \"QTSZ01\", \"QTSZ01\", \"JWSZ09\", \"JWSZ09\", \"BKSZ07\", \"BKSZ07\", …\n\n\nAnd retain each unique record:\n\norigin_data &lt;- unique(origin_data)\n\nNext, we will update the origin_data with planning subzone codes:\n\nmpsz2019_origindata &lt;- left_join(mpsz2019, origin_data,\n                                by = c(\"SUBZONE_C\" = \"ORIGIN_SZ\"))\n\n\nglimpse(mpsz2019_origindata)\n\nRows: 4,793\nColumns: 9\n$ SUBZONE_N  &lt;chr&gt; \"MARINA EAST\", \"INSTITUTION HILL\", \"INSTITUTION HILL\", \"ROB…\n$ SUBZONE_C  &lt;chr&gt; \"MESZ01\", \"RVSZ05\", \"RVSZ05\", \"SRSZ01\", \"SRSZ01\", \"SRSZ01\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA EAST\", \"RIVER VALLEY\", \"RIVER VALLEY\", \"SINGAPORE R…\n$ PLN_AREA_C &lt;chr&gt; \"ME\", \"RV\", \"RV\", \"SR\", \"SR\", \"SR\", \"SR\", \"WI\", \"MU\", \"MP\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\",…\n$ ORIGIN_BS  &lt;chr&gt; NA, \"13089\", \"13099\", \"13079\", \"13109\", \"13119\", \"13139\", N…\n$ TRIPS      &lt;int&gt; NA, 3241, 3735, 1917, 3919, 1120, 3208, NA, 1718, NA, NA, N…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((33222.98 29..., MULTIPOLYGON (…"
  },
  {
    "objectID": "In_class_Ex/In-class_Ex01/In_class_Ex01.html#choropleth-visualisation",
    "href": "In_class_Ex/In-class_Ex01/In_class_Ex01.html#choropleth-visualisation",
    "title": "In-Class Exercise 1",
    "section": "6. Choropleth Visualisation",
    "text": "6. Choropleth Visualisation\nWe will now draw a choropleth map showing the distribution of passenger trips at the planning subzone level:\n\ntm_shape(mpsz2019_origindata) +\n  tm_fill(\"TRIPS\",\n          style = \"quantile\",\n          palette = 'Greens',\n          title = \"Passenger Trips\") +\n  tm_layout(main.title = \"Distirbution of Passenger Trips by Planning Subzone Level\",\n            main.title.position = \"center\",\n            main.title.size = 1) +\n  tm_borders(alpha = 0.6) +\n  tm_scale_bar() +\n  tm_credits(\"Source: Planning Subzone boundary from URA\\n\n             Passenger trip data from LTA\")"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex01/In_class_Ex01.html",
    "href": "In_class_Ex/In_class_Ex01/In_class_Ex01.html",
    "title": "In-Class Exercise 1: Geospatial Data Wrangling and Visualisation",
    "section": "",
    "text": "The following packages will be used in this in-class exercise, and they are loaded into R using the following code:\n\ntmap: thematic mapping\nsf: geospatial data handling\ntidyverse: non-spatial data handling\nknitr: for creating html table\n\n\npacman::p_load(tmap, sf, tidyverse)"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex01/In_class_Ex01.html#getting-started",
    "href": "In_class_Ex/In_class_Ex01/In_class_Ex01.html#getting-started",
    "title": "In-Class Exercise 1: Geospatial Data Wrangling and Visualisation",
    "section": "",
    "text": "The following packages will be used in this in-class exercise, and they are loaded into R using the following code:\n\ntmap: thematic mapping\nsf: geospatial data handling\ntidyverse: non-spatial data handling\nknitr: for creating html table\n\n\npacman::p_load(tmap, sf, tidyverse)"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex01/In_class_Ex01.html#importing-origin-destination-data",
    "href": "In_class_Ex/In_class_Ex01/In_class_Ex01.html#importing-origin-destination-data",
    "title": "In-Class Exercise 1: Geospatial Data Wrangling and Visualisation",
    "section": "2. Importing Origin Destination Data",
    "text": "2. Importing Origin Destination Data\nFirstly, we will import the dataset Passenger Volume by Origin Destination Bus Stops downloaded from LTA DataMall by using read_csv() of readr package.\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n\nA quick check of the odbus tibble data frame shows that the values in ORIGIN_PT_CODE and DESTINATION_PT_CODE are in numeric data type.\n\nglimpse(odbus)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"4406…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"1722…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n\nWe will use the as.factor() function from the tidyverse package to convert these codes from numeric to factor data type:\n\nodbus$ORIGIN_PT_CODE &lt;-\n  as.factor(odbus$ORIGIN_PT_CODE) \nodbus$DESTINATION_PT_CODE &lt;-\n  as.factor(odbus$DESTINATION_PT_CODE)\n\nTo confirm that the data types are converted successfully:\n\nglimpse(odbus)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 44069, 20281, 2…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 17229, 20141, 2…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex01/In_class_Ex01.html#extracting-study-data",
    "href": "In_class_Ex/In_class_Ex01/In_class_Ex01.html#extracting-study-data",
    "title": "In-Class Exercise 1: Geospatial Data Wrangling and Visualisation",
    "section": "3. Extracting Study Data",
    "text": "3. Extracting Study Data\nFor this exercise, we will extract commuting flows on weekdays between between 7 and 10 am:\n\norigin7_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == 'WEEKDAY') %&gt;%\n  filter(TIME_PER_HOUR &gt;= 7 &\n          TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n\nhead(origin7_9)\n\n# A tibble: 6 × 2\n  ORIGIN_PT_CODE TRIPS\n  &lt;fct&gt;          &lt;dbl&gt;\n1 01012           1617\n2 01013            813\n3 01019           1620\n4 01029           2383\n5 01039           2727\n6 01059           1415\n\n\nWe will save the output in rds format for future use:\n\nwrite_rds(origin7_9, \"data/rds/origin7_9.rds\")\n\nWe can then import the rds file into the R environment:\n\norigin7_9 &lt;- read_rds(\"data/rds/origin7_9.rds\")"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex01/In_class_Ex01.html#working-with-geospatial-data",
    "href": "In_class_Ex/In_class_Ex01/In_class_Ex01.html#working-with-geospatial-data",
    "title": "In-Class Exercise 1: Geospatial Data Wrangling and Visualisation",
    "section": "4. Working with Geospatial Data",
    "text": "4. Working with Geospatial Data\nWe will import two shapefile into RStudio:\n\nBusStop: This data provides the location of bus stops as of Q42022.\nMPSZ-2019: This data provides the subzone boundaries defined in the URA Master Plan 2019.\n\n\n4.1. Importing Geospatial Data\nWe will use the following code to import the BusStop data downloaded from LTA DataMall:\n\nbusstop &lt;- st_read(dsn=\"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `BusStop' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\In_class_Ex\\In_class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nWe can confirm that the import was done correctly by using this code:\n\nglimpse(busstop)\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\nNext, we will use the following code to import the MPSZ-2019 data downloaded from data.gov.sg:\n\nmpsz2019 &lt;- st_read(dsn=\"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\In_class_Ex\\In_class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nWe can confirm that the import was done correctly by using this code:\n\nglimpse(mpsz2019)\n\nRows: 332\nColumns: 7\n$ SUBZONE_N  &lt;chr&gt; \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"JURON…\n$ SUBZONE_C  &lt;chr&gt; \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPSZ05\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE RIVER\", \"WESTERN …\n$ PLN_AREA_C &lt;chr&gt; \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"WI\", \"SI\", \"SI\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"WEST…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"WR\", \"CR\", \"CR\",…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((33222.98 29..., MULTIPOLYGON (…"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex01/In_class_Ex01.html#geospatial-data-wrangling",
    "href": "In_class_Ex/In_class_Ex01/In_class_Ex01.html#geospatial-data-wrangling",
    "title": "In-Class Exercise 1: Geospatial Data Wrangling and Visualisation",
    "section": "5. Geospatial Data Wrangling",
    "text": "5. Geospatial Data Wrangling\n\n5.1. Combining busstop and mpsz2019\nWe will use the following code to populate planning subzone code from the mpsz2019 data frame into the busstop simple features data frame:\n\nbusstop_mpsz2019 &lt;- st_intersection(busstop, mpsz2019) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\nWe will save the output data into rds format for future use:\n\nwrite_rds(busstop_mpsz2019, \"data/rds/busstop_mpsz2019.rds\")\n\nNext, we will join the planning subzone code from the busstop_mpsz2019 data frame to the odbus7_9 data frame:\n\norigin_data &lt;- left_join(origin7_9, busstop_mpsz2019,\n                         by = c('ORIGIN_PT_CODE' = 'BUS_STOP_N')) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C)\nglimpse(origin_data)\n\nRows: 5,031\nColumns: 3\n$ ORIGIN_BS &lt;chr&gt; \"01012\", \"01013\", \"01019\", \"01029\", \"01039\", \"01059\", \"01109…\n$ TRIPS     &lt;dbl&gt; 1617, 813, 1620, 2383, 2727, 1415, 115, 7675, 8074, 3913, 40…\n$ ORIGIN_SZ &lt;chr&gt; \"RCSZ10\", \"RCSZ10\", \"DTSZ01\", \"DTSZ01\", \"DTSZ01\", \"DTSZ01\", …\n\n\n\ncolSums(is.na(origin_data))\n\nORIGIN_BS     TRIPS ORIGIN_SZ \n        0         0        55 \n\n\nWe will now check for duplicates:\n\nduplicates &lt;- origin_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\n\nglimpse(duplicates)\n\nRows: 26\nColumns: 3\n$ ORIGIN_BS &lt;chr&gt; \"11009\", \"11009\", \"22501\", \"22501\", \"43709\", \"43709\", \"47201…\n$ TRIPS     &lt;dbl&gt; 13826, 13826, 9743, 9743, 1118, 1118, 23998, 23998, 6218, 62…\n$ ORIGIN_SZ &lt;chr&gt; \"QTSZ01\", \"QTSZ01\", \"JWSZ09\", \"JWSZ09\", \"BKSZ07\", \"BKSZ07\", …\n\n\nAnd retain each unique record:\n\norigin_data &lt;- unique(origin_data)\nglimpse(origin_data)\n\nRows: 5,018\nColumns: 3\n$ ORIGIN_BS &lt;chr&gt; \"01012\", \"01013\", \"01019\", \"01029\", \"01039\", \"01059\", \"01109…\n$ TRIPS     &lt;dbl&gt; 1617, 813, 1620, 2383, 2727, 1415, 115, 7675, 8074, 3913, 40…\n$ ORIGIN_SZ &lt;chr&gt; \"RCSZ10\", \"RCSZ10\", \"DTSZ01\", \"DTSZ01\", \"DTSZ01\", \"DTSZ01\", …\n\n\nNext, we will update the origin_data with planning subzone codes:\n\nmpsz2019_origindata &lt;- left_join(mpsz2019, origin_data,\n                                by = c(\"SUBZONE_C\" = \"ORIGIN_SZ\"))\n\n\nglimpse(mpsz2019_origindata)\n\nRows: 4,984\nColumns: 9\n$ SUBZONE_N  &lt;chr&gt; \"MARINA EAST\", \"INSTITUTION HILL\", \"INSTITUTION HILL\", \"ROB…\n$ SUBZONE_C  &lt;chr&gt; \"MESZ01\", \"RVSZ05\", \"RVSZ05\", \"SRSZ01\", \"SRSZ01\", \"SRSZ01\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA EAST\", \"RIVER VALLEY\", \"RIVER VALLEY\", \"SINGAPORE R…\n$ PLN_AREA_C &lt;chr&gt; \"ME\", \"RV\", \"RV\", \"SR\", \"SR\", \"SR\", \"SR\", \"SR\", \"SR\", \"SR\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ ORIGIN_BS  &lt;chr&gt; NA, \"13089\", \"13099\", \"04321\", \"06129\", \"06151\", \"06159\", \"…\n$ TRIPS      &lt;dbl&gt; NA, 3241, 3735, 1492, 3031, 1159, 2595, 5188, 1917, 3919, 1…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((33222.98 29..., MULTIPOLYGON (…"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex01/In_class_Ex01.html#choropleth-visualisation",
    "href": "In_class_Ex/In_class_Ex01/In_class_Ex01.html#choropleth-visualisation",
    "title": "In-Class Exercise 1: Geospatial Data Wrangling and Visualisation",
    "section": "6. Choropleth Visualisation",
    "text": "6. Choropleth Visualisation\nWe will now draw a choropleth map showing the distribution of passenger trips at the planning subzone level:\n\ntm_shape(mpsz2019_origindata) +\n  tm_fill(\"TRIPS\",\n          style = \"quantile\",\n          palette = 'Greens',\n          title = \"Passenger Trips\") +\n  tm_layout(main.title = \"Distirbution of Passenger Trips by Planning Subzone Level\",\n            main.title.position = \"center\",\n            main.title.size = 1) +\n  tm_borders(alpha = 0.6) +\n  tm_scale_bar() +\n  tm_credits(\"Source: Planning Subzone boundary from URA\\n\n             Passenger trip data from LTA\")"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html",
    "title": "Hands-on Exercise 2: Spatial Weights and Applications",
    "section": "",
    "text": "This is the second hands-on exercise for ISSS624 Applied Geospatial Analytics."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#data-and-study-area",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#data-and-study-area",
    "title": "Hands-on Exercise 2: Spatial Weights and Applications",
    "section": "1.1. Data and Study Area",
    "text": "1.1. Data and Study Area\nTwo data sets will be used in this exercise:\n\nHunan county boundary layer: geospatial data set in ESRI shapefile format.\nHunan_2012.csv: Hunan’s local development indicators in 2012.\n\nThe following R packages will be imported and used in this exercise:\n\nsf package to import geospatial data\nreadr package to import csv files\ndplyr package to perform relational join function\nspdep package to compute spatial weights and spatially lagged variables\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#importing-data",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#importing-data",
    "title": "Hands-on Exercise 2: Spatial Weights and Applications",
    "section": "1.2. Importing Data",
    "text": "1.2. Importing Data\n\n1.2.1. Importing Geospatial Data\nThe following code imports the shapefile into R using the st_read() function from the sf package:\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\Hands_on_Ex\\Hands_on_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n1.2.2. Importing Attribute Data\nThe following code imports the csv file into R using read_csv() function from the readr package:\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n1.2.3. Performing Relational Join\nThe following code joins the attribute table of Hunan’s SpatialPolygonsDataFrame with the attribute fields of the hunan2012 data frame using the left_join() function from the dplyr package:\n\nhunan &lt;- left_join(hunan, hunan2012) %&gt;%\n  select(1:4,7,15)"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#visualising-regional-development-indicator",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#visualising-regional-development-indicator",
    "title": "Hands-on Exercise 2: Spatial Weights and Applications",
    "section": "1.3. Visualising Regional Development Indicator",
    "text": "1.3. Visualising Regional Development Indicator\nWe will now prepare a base map and a choropleth map to show the distribution of GDPPC 2012 by using the qtm() function from the tmap package:\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size = 0.4)\n\ngdppc &lt;- qtm(hunan,\"GDPPC\")\n\n\ntmap_arrange(basemap, gdppc, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#computing-contiguity-spatial-weights",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#computing-contiguity-spatial-weights",
    "title": "Hands-on Exercise 2: Spatial Weights and Applications",
    "section": "1.4. Computing Contiguity Spatial Weights",
    "text": "1.4. Computing Contiguity Spatial Weights\nThe poly2nb() function from the spdep package will be used to compute contiguity weight matrices for the study area. This function builds a list of neighbours based on regions with contiguous boundaries.\nThe default queen argument is TRUE, which will return a list of first order neighbours using the queen criteria.\n\n1.4.1. Computing Contiguity-based Neighbours (Queen)\nThis code is used to compute the queen contiguity weight matrix:\n\nwm_q &lt;- poly2nb(hunan, queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report shows that there are 88 regions in Hunan; the most connected region has 11 neighbours while there are only two regions with one neighbour.\nFor each polygon in the polygon object, wm_q lists all neighbouring polygons. We can view the neighbours of a specific polygon object using the following code:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nThe output shows that polygon ID 1 has five neighbours, and the numbers shown represent the polygon IDs stored in the data frame.\nWe can retrieve the county name of polygon ID 1:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nWhich shows that polygon ID 1 is Anxiang County.\nTo reveal the county names of all neighbouring counties:\n\nhunan$NAME_3[c(wm_q[[1]])]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of the counties by using the following code:\n\nhunan$GDPPC[wm_q[[1]]]\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output shows that the GDPPC of the five nearest neighbours of County ID 1 based on Queen’s method are 20981, 34592, 24473, 21311, and 22879 respectively.\nThe complete weight matrix can be displayed using the str() function:\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n1.4.2. Creating Contiguity-based Neighbours (Rook)\nThis code is used to compute the rookcontiguity weight matrix:\n\nwm_r &lt;- poly2nb(hunan, queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report shows that there are 88 regions in Hunan; the most connected region has 10 neighbours while there are only two regions with one neighbour.\n\n\n1.4.3. Visualising Contiguity Weights\nContiguity weights can be visualised using a connectivity graph, which takes a point and draws lines to each neighbouring point. As an intermediary step, points have to be derived from the polygons in the current data set.\nThe coordinates of each point have to be stored in a separate data frame using a mapping function to map a function to each element of a vector and return a vector of the same length. The input vector will be the geometry column of us.bound, the st_centroid() function will be used with the map_dbl() variation from the purrr package.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nThe longitude value is accessed through double brackets [[]] and 1 as longitude is the first value in each centroid.\n\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\nThe latitude value is accessed through double brackets [[]] and 2 as latitude is the second value in each centroid.\n\n\ncoords &lt;- cbind(longitude, latitude)\n\nTo check that longitude and latitude are formatted correctly:\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\nWe will now plot the Queen contiguity-based neighbours map:\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\nNext, we will plot the Rook contiguity-based neighbours map:\n\nplot(hunan$geometry, border = \"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\nThen, we will plot both Queen and Rook contiguity-based neighbours map together:\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border = \"lightgrey\", main = \"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\nplot(hunan$geometry, border = \"lightgrey\", main = \"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#computing-distance-based-neighbours",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#computing-distance-based-neighbours",
    "title": "Hands-on Exercise 2: Spatial Weights and Applications",
    "section": "1.5. Computing Distance-based Neighbours",
    "text": "1.5. Computing Distance-based Neighbours\nIn this section, distance-based weight matrices will be derived using the dnearneigh() function from the spdep package.\nThe function identifies neighbours of region points by Euclidean distance bound by the lower d1= and the upper d2= range.\n\n1.5.1. Determine the Cut-off Distance\nThe cut-off distance can be determined using the following code:\n\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest and nearest neighbour distance is 61.79km. Hence, using this as the upper threshold ensures that all units will have at least one neighbour.\n\n\n1.5.2. Computing Fixed Distance Weight Matrix\nWe will now compute the distance weight matrix by using the dnearneigh() function:\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nThe output shows that there are 88 regions and that on average, each point is connected to 3.68 neighbours.\nNext, we will use str() to display the content of the wm_d62 weight matrix:\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nWe can also display the content of the wm_d62 weight matrix using table() and card():\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\n1.5.2.1. Plotting Fixed Distance Weight Matrix\nWe will use the following code to plot the distance weight matrix:\n\nplot(hunan$geometry, border = 'lightgrey')\nplot(wm_d62, coords, add = TRUE)\nplot(k1, coords, add = TRUE, col = 'red', length = 0.08)\n\n\n\n\nThe red line shows the links of the first nearest neighbours and the black line shows the links of neighbours within a cut-off distance of 62km.\nWe can plot both maps next to each other for comparison:\n\npar(mfrow = c(1,2))\nplot(hunan$geometry, border = 'lightgrey', main = \"First nearest neighbours\")\nplot(k1, coords, add = TRUE, col = 'red', length = 0.08)\nplot(hunan$geometry, border = 'lightgrey', main = 'Distance link')\nplot(wm_d62, coords, add = TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n1.5.3. Computing Adaptive Distance Weight Matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas tend to have more neighbours while less densely settled areas tend to have less neighbours. Having many neighbours smooths the neighbour relationship across more neighbours.\nThe number of neighbours can be controlled using k-nearest neighbours, through either accepting asymmetric neighbours or imposing symmetry as shown in the code below:\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nWe can display the content of the matrix using str():\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\n1.5.3.1. Plotting Distance-based Neighbours\nWe can plot the weight matrix using the following code:\n\nplot(hunan$geometry, border = 'lightgrey')\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#weights-based-on-inversed-distance-weighting",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#weights-based-on-inversed-distance-weighting",
    "title": "Hands-on Exercise 2: Spatial Weights and Applications",
    "section": "1.6. Weights Based On Inversed Distance Weighting",
    "text": "1.6. Weights Based On Inversed Distance Weighting\nSpatial weights can be derived based on Inversed Distance Weighting (IDW).\nFirst, the distances between areas are computed using nbdist() from spdep.\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n1.6.1. Row-standardised Weights Matrix\nFor this exercise, we will assign equal weight (style = \"W\") by assigning 1/(# neighbours) to each neighbouring county before summing the weighted income values. However, the polygons along the edges of the study are will base their lagged values on fewer polygons, which might potentially over- or under-estimate the true nature of spatial autocorrelation in the data. Other more robust options such as style = \"B\" will be more robust.\n\nrswm_q &lt;- nb2listw(wm_q, style = \"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nWhen zero.policy = TRUE, weights vectors of zero length are inserted for regions without neighbours in the neighbours list. These will then generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length = length(neighbours))) %&gt;% x for arbitrary numerical vector x of length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero.\nstyle can take the following values: “W” for equal weight “B” for basic binary coding “C” for globally standardised (sums over all links to n) “U” for “C” divided by number of neighbours (sums over all links to unity) “S” for variance-standardising coding scheme (sums over all links to n)\nTo see the weight of the first polygon’s eight neighbours:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nIt is observed that each neighbour is assigned 0.125 of the total weight.\nUsing the same method, we can derive a row standardised distance weight by using this code:\n\nrswm_ids &lt;- nb2listw(wm_q, glist = ids, style = \"B\", zero.policy = TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#applications-of-spatial-weight-matrix",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#applications-of-spatial-weight-matrix",
    "title": "Hands-on Exercise 2: Spatial Weights and Applications",
    "section": "1.7. Applications of Spatial Weight Matrix",
    "text": "1.7. Applications of Spatial Weight Matrix\nWe will learn four different spatial lagged variables in this section:\n\nSpatial lag with row-standardised weights\nSpatial lag as a sum of neighbouring values\nSpatial window average\nSpatial window sum\n\n\n1.7.1. Spatial Lag with Row-standardised Weights\nWe will compute the average neighbour GDPPC value for each polygon. These values are referred to as spatially lagged values.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nWe can append the spatially lag GDPPC values to the hunan sf data frame using the following code:\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\",\"lag_GDPPC\")\nhunan &lt;- left_join(hunan, lag.res)\n\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag_GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot the GDPPC and spatial lag GDPPC for comparison:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag_GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp = 1, ncol = 2)\n\n\n\n\n\n\n1.7.2. Spatial Lag as Sum of Neighbouring Values\nWe can calculate spatial lag as a sum of neighbouring values by assigning binary weights. This requires a function to assign binary weights to be applied to the neighbours list before using glist = from the nb2listw function to assign these weights.\nWe start by using lapply to assign a value of 1 to each neighbour. lapply applies a function across each value in the neighbours structure.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, glist = b_weights, style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nNext, we use lag.listw() to compute a lag variable from the weight and GDPPC:\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\nlag.res\n\n          NAME_3 lag_sum GDPPC\n1        Anxiang        124236\n2        Hanshou        113624\n3         Jinshi         96573\n4             Li        110950\n5          Linli        109081\n6         Shimen        106244\n7        Liuyang        174988\n8      Ningxiang        235079\n9      Wangcheng        273907\n10         Anren        256221\n11       Guidong         98013\n12         Jiahe        104050\n13         Linwu        102846\n14       Rucheng         92017\n15       Yizhang        133831\n16      Yongxing        158446\n17        Zixing        141883\n18     Changning        119508\n19      Hengdong        150757\n20       Hengnan        153324\n21      Hengshan        113593\n22       Leiyang        129594\n23        Qidong        142149\n24        Chenxi        100119\n25     Zhongfang         82884\n26       Huitong         74668\n27      Jingzhou         43184\n28        Mayang         99244\n29       Tongdao         46549\n30      Xinhuang         20518\n31          Xupu        140576\n32      Yuanling        121601\n33      Zhijiang         92069\n34 Lengshuijiang         43258\n35    Shuangfeng        144567\n36        Xinhua        132119\n37       Chengbu         51694\n38        Dongan         59024\n39       Dongkou         69349\n40       Longhui         73780\n41      Shaodong         94651\n42       Suining        100680\n43        Wugang         69398\n44       Xinning         52798\n45       Xinshao        140472\n46      Shaoshan        118623\n47    Xiangxiang        180933\n48       Baojing         82798\n49     Fenghuang         83090\n50       Guzhang         97356\n51       Huayuan         59482\n52        Jishou         77334\n53      Longshan         38777\n54          Luxi        111463\n55      Yongshun         74715\n56         Anhua        174391\n57           Nan        150558\n58     Yuanjiang        122144\n59      Jianghua         68012\n60       Lanshan         84575\n61      Ningyuan        143045\n62     Shuangpai         51394\n63       Xintian         98279\n64       Huarong         47671\n65      Linxiang         26360\n66         Miluo        236917\n67     Pingjiang        220631\n68      Xiangyin        185290\n69          Cili         64640\n70       Chaling         70046\n71        Liling        126971\n72       Yanling        144693\n73           You        129404\n74       Zhuzhou        284074\n75       Sangzhi        112268\n76       Yueyang        203611\n77        Qiyang        145238\n78      Taojiang        251536\n79      Shaoyang        108078\n80      Lianyuan        238300\n81     Hongjiang        108870\n82      Hengyang        108085\n83       Guiyang        262835\n84      Changsha        248182\n85       Taoyuan        244850\n86      Xiangtan        404456\n87           Dao         67608\n88     Jiangyong         33860\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame:\n\nhunan &lt;- left_join(hunan, lag.res)\n\nNow we will plot the gdppc and spatial lag sum gdppc for comparison:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp = 1, ncol = 2)\n\n\n\n\n\n\n1.7.3. Spatial Window Average\nThe spatial window average uses row-standardised weights and includes the diagonal elements. We will add the diagonal element to the neighbours structures before assignign weights,\nThis is done with the include.self() function from spdep:\n\nwm_qs &lt;- include.self(wm_q)\nsummary(wm_qs)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 10 12 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 2 links\n1 most connected region:\n85 with 12 links\n\n\nIt is observed that the number of nonzero links, percentage of nonzero weights and average number of links are higher than that of wm_q.\nWe will now examine the neighbour list of area[1] using the following code:\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nPolygon ID 1 now has six neighbours instead of five.\nWe can use the following code to obtain the weights:\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nWe will now use nb2listw() and glist() to explitcitly assign weight values and create the lag variable.\n\nlag_avg_gdppc &lt;- lag.listw(wm_qs, hunan$GDPPC)\nlag_avg_gdppc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nWe will convert the lag variable listw object into a data frame:\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nWe will join the lag_window_ave GDPPC values with the hunan sf data frame:\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nWe can use kable() to prepare a table to compare the values of lag GDPPC and spatial window average:\n\nhunan %&gt;%\n  select(\"County\",\n         \"lag_GDPPC\",\n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, we can plot the lag_gdppc and w_avg_gdppc for comparison:\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp = 1, ncol = 2)\n\n\n\n\n\n\n1.7.4. Spatial Window Sum\nThe spatial window sum is the counterpart of the window average without using row-standardised weights.\nFirst, we have to add diagonal elements to the neighbour list:\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure to include the diagonal elements:\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nIt is observed that Polygon ID 1 has six neighbours now instead of five.\nNext, we will use nb2listw() and glist() to explicitly assign weight values:\n\nb_weights2 &lt;- nb2listw(wm_qs, glist = b_weights, style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nNext, we will compute the lag variable using lag.listw():\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object to a data frame:\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNext, we will append the w_sum_gdppc values ot the hunan sf data frame:\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nWe can use kable() to prepare a table to compare the values of lag GDPPC and spatial window sum:\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, we can plot the lag_gdppc and w_sum_gdppc for comparison:\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_gdppc, w_sum_gdppc, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#overview-1",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#overview-1",
    "title": "Hands-on Exercise 2: Spatial Weights and Applications",
    "section": "2.1. Overview",
    "text": "2.1. Overview\nIn spatial policy, one of the main development objectives of local government and planners is to ensure equal distribution of development in the province. We will apply appropriate spatial statistical methods to discover if development is evenly distributed geographically. This will be a case study of the spatial pattern of GDP Per Capita in Hunan Province, China.\nThe same data sets and R packages imported from section 1 will be used."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#visualising-regional-development-indicator-1",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#visualising-regional-development-indicator-1",
    "title": "Hands-on Exercise 2: Spatial Weights and Applications",
    "section": "2.2. Visualising Regional Development Indicator",
    "text": "2.2. Visualising Regional Development Indicator\nWe will create a basemap and choropleth map to show the distribution of GDPPC 2012 by using qtm() from the tmap package:\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\", n = 5, style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal Interval Classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\", n = 5, style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal Quantile Classification\")\n\ntmap_arrange(equal, quantile, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#global-spatial-autocorrelation",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#global-spatial-autocorrelation",
    "title": "Hands-on Exercise 2: Spatial Weights and Applications",
    "section": "2.3. Global Spatial Autocorrelation",
    "text": "2.3. Global Spatial Autocorrelation\nIn this section, we will compute gloabl spatial autocorrelation statistics and perform spatial complete randomness test for global spatial autocorrelation. We will use the contiguity spatial weights and row-standardised weights matrix computed in the previous section to perform the required statistical tests.\n\n2.3.1. Global Spatial Autocorrelation: Moran’s I\nWe will perform Moran’s I statistics test using moran.test() from spdep.\n\nmoran.test(hunan$GDPPC, listw = rswm_q, zero.policy = TRUE,\n           na.action = na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nThe p-value from the test = 1.095e-06, which signifies that the null hypothesis is rejected at 5% alpha. This means that the spatial distribution of high values and/or low values in the data set is more spatially clustered than would be expected if underlying spatial processes were random.\n\n2.3.1.1. Computing Monte Carlo Moran’s I\nWe will use the following code to perform permutation test for Moran’s I statistic using moran.mc() from spdep. 1000 simulations will be performed.\n\nset.seed(1234)\nbperm_I &lt;- moran.mc(hunan$GDPPC, listw = rswm_q, nsim = 999, \n                  zero.policy = TRUE, na.action = na.omit)\nbperm_I\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nUsing 1000 simulations, the Moran I statistic remains stable at around 0.30075. The p-value from the 1000 simulations = 0.001, which signifies that the null hypothesis is rejected at 5% alpha. This means that the spatial distribution of high values and/or low values in the data set is more spatially clustered than would be expected if underlying spatial processes were random.\n\n\n2.3.1.2. Visualising Monte Carlo Moran’s I\nThe following code can be used to visualise the Moran’s I test statistics in greater detail through a histogram:\n\nmean(bperm_I$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm_I$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm_I$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm_I$res, freq = TRUE, breaks = 20, xlab = \"Simulated Moran's I\")\nabline(v = 0, col = 'red')\n\n\n\n\nIt can be observed that the distribution of bperm_I$res resembles the shape of a normal distribution.\n\n\n\n2.3.2. Global Spatial Autocorrelation: Geary’s\nWe will perform Geary’s c statistics test using geary.test() from spdep.\n\ngeary.test(hunan$GDPPC, listw = rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nThe p-value from the test = 0.0001526, which signifies that the null hypothesis is rejected at 5% alpha. This means that the expectation of spatial distribution is greater than the statistic.\n\n2.3.2.1. Computing Monte Geary’s C\nWe will use the following code to perform permutation test for Geary’s c statistic using geary.mc() from spdep. 1000 simulations will be performed.\n\nset.seed(1234)\nbperm_c &lt;- geary.mc(hunan$GDPPC, listw = rswm_q, nsim = 999, \n                  zero.policy = TRUE)\nbperm_c\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nUsing 1000 simulations, the Geary’s c statistic remains stable at around 0.69072. The p-value from the 1000 simulations = 0.001, which signifies that the null hypothesis is rejected at 5% alpha. This means that the expectation of spatial distribution is greater than the statistic.\n\n\n2.3.2.2. Visualising Monte Carlo Geary’s C\nThe following code can be used to visualise the Geary’s c test statistics in greater detail through a histogram:\n\nmean(bperm_c$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm_c$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm_c$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm_c$res, freq = TRUE, breaks = 20, xlab = \"Simulated Moran's I\")\nabline(v = 1, col = 'red')\n\n\n\n\nIt can be observed that the distribution of bperm_c$res resembles the shape of a normal distribution."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#spatial-correlogram",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#spatial-correlogram",
    "title": "Hands-on Exercise 2: Spatial Weights and Applications",
    "section": "2.4. Spatial Correlogram",
    "text": "2.4. Spatial Correlogram\nSpatial correlograms help to examine patterns of spatial autocorrelation in the data or model residuals. They show the extent of correlation between pairs of spatial observations when distance (lag) is increased between them. Correlograms are useful as an exploratory and descriptive tool.\n\n2.4.1. Compute Moran’s I Correlogram\nWe will use sp.correlogram() from spdep to compute a 6-lag spatial correlogram of GDPPC.\n\nMI_corr &lt;-sp.correlogram(wm_q, hunan$GDPPC, order = 6,\n                         method = \"I\", style = \"W\")\nplot(MI_corr)\n\n\n\n\nNot all autocorrelation values are statistically significant, and this is not visible from the plot above. We will examine the full analysis report for a closer look:\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nIt can be observed from the plot that there is a downward trend in the autocorrelation as lag increases. From the output of the analysis report, it is observed that the autocorrelation when lag = 5 is not significant at alpha 5% as the p-value = 0.226015.\n\n\n2.4.2. Compute Geary’s C Correlogram\nWe will use sp.correlogram() from spdep to compute a 6-lag spatial correlogram of GDPPC.\n\nGC_corr &lt;-sp.correlogram(wm_q, hunan$GDPPC, order = 6,\n                         method = \"C\", style = \"W\")\nplot(GC_corr)\n\n\n\n\nNot all autocorrelation values are statistically significant, and this is not visible from the plot above. We will examine the full analysis report for a closer look:\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nIt can be observed from the plot that there is a upward trend in the autocorrelation as lag increases. From the output of the analysis report, it is observed that the autocorrelation when lag = 3, 4, and 6 is not significant at alpha 5% as the respective p-values are greater than 0.05."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#cluster-and-outlier-analysis",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#cluster-and-outlier-analysis",
    "title": "Hands-on Exercise 2: Spatial Weights and Applications",
    "section": "2.5. Cluster and Outlier Analysis",
    "text": "2.5. Cluster and Outlier Analysis\nLocal Indicators of Spatial Association (LISA) evaluates the existence of clusters in the spatial arrangement of a given variable. We will apply the appropriate LISA methods to detect cluster and/or outlier from GDP Per Capita 2012 of Hunan Province.\n\n2.5.1. Computing Local Moran’s I\nWe will use the localmoran() function from spdep to compute local Moran’s I. This function computes Ii values given a set of zi values and listw object project neighbour weight information of the polygons associated with the zi values.\nThe following code computes local Moran’s I at the county level:\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nThe localmoran() function returns a matrix of values with the following columns:\n\nIi: the local Moran’s I statistics\nE.Ii: the expected local Moran statistics under randomisation hypothesis\nVar.Ii: the variance of local Moran statistics under randomisation hypothesis\nZ.Li: the standard deviate of local Moran statistic\nPr(): the p-value of local Moran statistic\n\nWe will use the following code to list the content of the local Moran matrix:\n\nprintCoefmat(data.frame(\n  localMI[fips,],\n  row.names = hunan$County[fips]),\n  check.names = FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n2.5.1.1. Mapping Local Moran’s I\nThe local Moran’s I data frame is first appended to the hunan SpatialPolygonDataFrame:\n\nhunan.localMI &lt;- cbind(hunan, localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\nWe will use the following code to plot a choropleth map of Moran I’s values:\n\ntm_shape(hunan.localMI) + \n  tm_fill(col = \"Ii\",\n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"Local Moran Statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nWe will use the following code to plot a choropleth map of Moran I’s p-values:\n\ntm_shape(hunan.localMI) + \n  tm_fill(col = \"Pr.Ii\",\n          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette = \"-Blues\",\n          title = \"Local Moran p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nBoth maps can be plotted together for easier comparison and interpretation:\n\nlocalMI_map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\",\n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"Local Moran Statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue_map &lt;- tm_shape(hunan.localMI) + \n  tm_fill(col = \"Pr.Ii\",\n          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette = \"-Blues\",\n          title = \"Local Moran p-values\") +\n  tm_borders(alpha = 0.5)\ntmap_arrange(localMI_map, pvalue_map, asp =1, ncol = 2)"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#creating-a-lisa-cluster-map",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 2: Spatial Weights and Applications",
    "section": "2.6. Creating a LISA Cluster Map",
    "text": "2.6. Creating a LISA Cluster Map\nThe LISA cluster map shows the significant locations colour coded by the type of spatial autocorrelation. First, we have to plot the Moran scatterplot.\n\n2.6.1. Plotting Moran Scatterplot\nThe Moran scatterplot illustrates the relationship between the values of a chosen attribute at each location and the average value of the same attribute at neighbouring locations. This is done using the following code:\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q, \n                  labels = as.character(hunan$County),\n                  xlab = \"GDPPC 2012\",\n                  ylab = \"Spatially Lag GDPPC 2012\")\n\n\n\n\nThe plot is split into four quadrants. The top corner belongs to areas with high GDPPC and are surrounded by other areas with average levels of GDPPC.\n\n\n2.6.2. Plotting Moran Scatterplot with Standardised Variables\nWe will use the scale() function to center and scale the variable. Centering is done by subtracting the mean from the corresponding columns while scaling is done by dividing the centered variable by their standard deviations:\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;%\n  as.vector\n\n\nUsing as.vector at the end ensures that the data output is in vector format.\n\nWe will plot the Moran scatterplot again using the standardised variables:\n\nnci2 &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                   labels = as.character(hunan$County),\n                   xlab = \"z-GDPPC 2012\",\n                   ylab = \"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n2.6.3. Preparing LISA Map Classes\nWe will use the following code to prepare a LISA cluster map:\n\nquadrant &lt;- vector(mode = \"numeric\", length = nrow(localMI))\n\nWe will now derive the spatially lagged variable and center it around its mean.\n\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)\n\nThe local Moran’s is centered around its mean:\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])\n\nWe will set a significance level for the local Moran:\n\nsignif &lt;- 0.05\n\nWe will define the low-low (1), low-high (2), high-low (3), and high-high (4) categories:\n\nquadrant[DV &lt; 0 & LM_I &gt; 0] &lt;- 1\nquadrant[DV &gt; 0 & LM_I &lt; 0] &lt;- 2\nquadrant[DV &lt; 0 & LM_I &lt; 0] &lt;- 3\nquadrant[DV &gt; 0 & LM_I &gt; 0] &lt;- 4\nquadrant[localMI[,5] &gt; signif] &lt;- 0\n\n\n\n2.6.4. Plotting LISA Map\nWe will build the LISA map using the following code:\n\nhunan.localMI$quadrant  &lt;- quadrant \ncolours &lt;- c('#ffffff', '#2c7bb6', '#abd9e9', '#fdae61', '#d7191c')\nclusters &lt;- c('insignificant', 'low-low', 'low-high', 'high-low', 'high-high')\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\",\n          style = 'cat',\n          palette = colours[c(sort(unique(quadrant)))+1],\n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nWe can plot both the local Moran’s I values map together with the p-values map:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolours &lt;- c('#ffffff', '#2c7bb6', '#abd9e9', '#fdae61', '#d7191c')\nclusters &lt;- c('insignificant', 'low-low', 'low-high', 'high-low', 'high-high')\n\nLISA_map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\",\n          style = 'cat',\n          palette = colours[c(sort(unique(quadrant)))+1],\n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, LISA_map, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 2: Spatial Weights and Applications",
    "section": "2.7. Hot Spot and Cold Spot Area Analysis",
    "text": "2.7. Hot Spot and Cold Spot Area Analysis\nBesides detecting cluster and outliers, localised spatial statistics can be used to detect hot spot and/or cold spot areas. The term ‘hot spot’ has been used generally to describe a region or value that is higher than its surroundings.\n\n2.7.1. Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics. It looks at neighbours within a defined proximity to identify where the high or low values cluster spatially. Statistically significant hot spots are recognised as areas of high values where other areas within a neighbourhood range also share high values.\n\n\n2.7.2. Deriving Distance-based Weight Matrix\nFirst, we need to define a new set of neighbours as the Getis-Ord defines neighbours based on distance.\nWe can derive the centroid or cut-off distance.\n\n2.7.2.1. Deriving Centroid\nTo get the longitude and latitude values, we map st_centroid() over the geometry column of us.bound and access each value through [[]] and 1 and 2 respectively.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\n2.7.2.2. Determine Cut-off Distance\nWe will determine the upper limit for the distance band, which is 61.79km.\n\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\n2.7.2.3. Computing Fixed Distance Weight Matrix\nWe will compute the distance weight matrix using dnearneigh():\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, we will use nb2listw() to convert the nb object into spatial weights object:\n\nwm62_lw &lt;- nb2listw(wm_d62, style = \"B\")\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n\n2.7.3 Computing Adaptive Distance Weight Matrix\nOne of the characteristics of fixed distance weight matrix is that more densely populated areas tend to have more neighbours while less densely populated areas tend to have less neighbours.\nWe can use k-nearest neighbours to control the number of neighbours by accepting assymetric neighbours or by imposing symmetry:\n\nknn &lt;- knn2nb(knearneigh(coords, k = 8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, we will use nb2listw() to convert the nb object into spatial weights object:\n\nknn_lw &lt;- nb2listw(knn, style = \"B\")"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#computing-gi-statistics",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#computing-gi-statistics",
    "title": "Hands-on Exercise 2: Spatial Weights and Applications",
    "section": "2.8. Computing Gi Statistics",
    "text": "2.8. Computing Gi Statistics\n\n2.8.1. Computing Gi Statistics using Fixed Distance\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values. We can see that gstari is FALSE and “call” is set to the function call and “class” is “localG”\nThe Gi statistics is represented as a Z-score. Bigger values represent a bigger intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to the corresponding hunan sf data frame:\n\nhunan.gi.f &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n2.8.1.1. Mapping Gi Values with Fixed Distance Weights\nWe will use the following code to map the Gi values with fixed distance weights:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGi_f_map &lt;- tm_shape(hunan.gi.f) +\n  tm_fill(col = \"gstat_fixed\",\n          style = \"pretty\",\n          palette = \"-RdBu\",\n          title = 'Local Gi (Fixed)') +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gi_f_map, asp = 1, ncol = 2)\n\n\n\n\n\n\n\n2.8.2. Gi Statistics Using Adaptive Distance Weights\nWe will use the following code to map the Gi values using adaptive distance weights:\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi.a &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n2.8.2.1. Mapping Gi Values with Adaptive Distance Weights\nWe will use the following code to map the Gi values with adaptive distance weights:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGi_a_map &lt;- tm_shape(hunan.gi.a) +\n  tm_fill(col = \"gstat_adaptive\",\n          style = \"pretty\",\n          palette = \"-RdBu\",\n          title = \"Local Gi (Adaptive)\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gi_a_map, asp = 1, ncol = 2)"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "",
    "text": "This in-class exercise introduces sfdep, an alternative R package to spdep used in Hands-on Exercise 2. It will cover methods to derive spatial weights, global and and local measures of spatial association, and emerging hotspot analysis."
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#visualising-local-morans-i",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#visualising-local-morans-i",
    "title": "In-Class Exercise 2",
    "section": "Visualising Local Moran’s I",
    "text": "Visualising Local Moran’s I\n\npacman::p_load(sf, tmap, sfdep, tidyverse, knitr, plotly)\n\n\nGDPPC &lt;- read.csv(\"data/aspatial/Hunan_GDPPC.csv\")\n\n\nGDPPC_st &lt;- spacetime(GDPPC, hunan,\n                      .loc_col = \"County\",\n                      .time_col = \"Year\")\n\n\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry, scale = 1, alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\n# gi_stars &lt;- GDPPC_nb %&gt;%\n  #group_by(Year) %&gt;%\n  #mutate(gi_star = local_gstar_perm(GDPPC, nb, wt)) %&gt;%\n  #tidyr::unnest(gi_star)\n\n\nggplot(data = )"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#visualising-gdppc-by-county",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#visualising-gdppc-by-county",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "2.2. Visualising GDPPC by County",
    "text": "2.2. Visualising GDPPC by County\n\ntmap_mode(\"plot\")\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\", style = \"quantile\", palette = \"Blues\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distirbution of GDP Per Capita by County, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 0.8,\n            legend.width = 0.45,\n            legend.height = 0.45,\n            frame = TRUE) + \n  tm_scale_bar() +\n  tm_grid(alpha = 0.15)"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#using-queens-method",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#using-queens-method",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "4.1. Using Queen’s Method",
    "text": "4.1. Using Queen’s Method\nFirst, we will use the following code to derive a contiguity neighbour list:\n\nnb_queen &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         .before = 1)\n\nsummary(nb_queen$nb)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nIt is observed from the summary that there are 88 regions in Hunan province. The most well-connected region has 11 neighbours. There are two areas with only one neighbour.\n\nkable(head(nb_queen, \n           n = 10))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnb\nNAME_2\nID_3\nNAME_3\nENGTYPE_3\nCounty\nGDPPC\ngeometry\n\n\n\n\n2, 3, 4, 57, 85\nChangde\n21098\nAnxiang\nCounty\nAnxiang\n23667\nPOLYGON ((112.0625 29.75523…\n\n\n1, 57, 58, 78, 85\nChangde\n21100\nHanshou\nCounty\nHanshou\n20981\nPOLYGON ((112.2288 29.11684…\n\n\n1, 4, 5, 85\nChangde\n21101\nJinshi\nCounty City\nJinshi\n34592\nPOLYGON ((111.8927 29.6013,…\n\n\n1, 3, 5, 6\nChangde\n21102\nLi\nCounty\nLi\n24473\nPOLYGON ((111.3731 29.94649…\n\n\n3, 4, 6, 85\nChangde\n21103\nLinli\nCounty\nLinli\n25554\nPOLYGON ((111.6324 29.76288…\n\n\n4, 5, 69, 75, 85\nChangde\n21104\nShimen\nCounty\nShimen\n27137\nPOLYGON ((110.8825 30.11675…\n\n\n67, 71, 74, 84\nChangsha\n21109\nLiuyang\nCounty City\nLiuyang\n63118\nPOLYGON ((113.9905 28.5682,…\n\n\n9, 46, 47, 56, 78, 80, 86\nChangsha\n21110\nNingxiang\nCounty\nNingxiang\n62202\nPOLYGON ((112.7181 28.38299…\n\n\n8, 66, 68, 78, 84, 86\nChangsha\n21111\nWangcheng\nCounty\nWangcheng\n70666\nPOLYGON ((112.7914 28.52688…\n\n\n16, 17, 19, 20, 22, 70, 72, 73\nChenzhou\n21112\nAnren\nCounty\nAnren\n12761\nPOLYGON ((113.1757 26.82734…\n\n\n\n\n\nWe can use st_ng_lag_cumul() to identify higher order neighbours:\n\nnb2_queen &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         nb2 = st_nb_lag_cumul(nb,2),\n         .before = 1)\n\nnb2_queen\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                                        nb2\n1                                     2, 3, 4, 5, 6, 32, 56, 57, 58, 64, 69, 75, 76, 78, 85\n2                           1, 3, 4, 5, 6, 8, 9, 32, 56, 57, 58, 64, 68, 69, 75, 76, 78, 85\n3                                                 1, 2, 4, 5, 6, 32, 56, 57, 69, 75, 78, 85\n4                                                             1, 2, 3, 5, 6, 57, 69, 75, 85\n5                                                 1, 2, 3, 4, 6, 32, 56, 57, 69, 75, 78, 85\n6                                         1, 2, 3, 4, 5, 32, 53, 55, 56, 57, 69, 75, 78, 85\n7                                                     9, 19, 66, 67, 71, 73, 74, 76, 84, 86\n8  2, 9, 19, 21, 31, 32, 34, 35, 36, 41, 45, 46, 47, 56, 58, 66, 68, 74, 78, 80, 84, 85, 86\n9               2, 7, 8, 19, 21, 35, 46, 47, 56, 58, 66, 67, 68, 74, 76, 78, 80, 84, 85, 86\n10               11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 70, 71, 72, 73, 74, 82, 83, 86\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\nWhen order is 2, the result contains the first and second order neighbours.\nWe can derive the contiguity weights in one step using the following code:\n\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb, style = \"W\"),\n         .before = 1)\nwm_q\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\nThree arguments can be passed into st_weights:\n\nnb: A neighbor list object as created by st_neighbors().\nstyle: Default “W” for row standardized weights. This value can also be “B”, “C”, “U”, “minmax”, and “S”. See spdep::nb2listw() for details.\nallow_zero: If TRUE, assigns zero as lagged value to zone without neighbors."
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#using-rooks-method",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#using-rooks-method",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "4.2. Using Rook’s Method",
    "text": "4.2. Using Rook’s Method\nFirst, we will use the following code to derive a contiguity neighbour list:\n\nnb_rook &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry,\n                            queen = FALSE),\n         .before = 1)\n\nsummary(nb_rook$nb)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nWe can derive the contiguity weights in one step using the following code:\n\nwm_r &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry,\n                            queen = FALSE),\n         wt = st_weights(nb, style = \"W\"),\n         .before = 1)\nwm_r\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                           nb\n1                3, 4, 57, 85\n2              57, 58, 78, 85\n3                 1, 4, 5, 85\n4                  1, 3, 5, 6\n5                 3, 4, 6, 85\n6            4, 5, 69, 75, 85\n7              67, 71, 74, 84\n8   9, 46, 47, 56, 78, 80, 86\n9       8, 66, 68, 78, 84, 86\n10 16, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                       0.25, 0.25, 0.25, 0.25\n2                                                       0.25, 0.25, 0.25, 0.25\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#deriving-fixed-distance-weight",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#deriving-fixed-distance-weight",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "5.1. Deriving Fixed Distance Weight",
    "text": "5.1. Deriving Fixed Distance Weight\nFirst, we need to determine the upper limit for the distance band by using the following steps:\n\ngeo &lt;- sf::st_geometry(hunan_GDPPC)\nnb &lt;- st_knn(geo, longlat = TRUE)\ndists &lt;- unlist(st_nb_dists(geo,nb))\n\nsummary(dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.56   29.11   36.89   37.34   43.21   65.80 \n\n\nThe summary report shows that the maximum distance to the nearest neighbour is 65.80 km. Hence a threshold of 66km will ensure that each neighbour has at least one neighbour.\nNext, we will derive the fixed distance weight using the following code:\n\nwm_fd &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_dist_band(geometry,\n                           upper = 66),\n         wt = st_weights(nb),\n         .before = 1)\n\n\nst_dists_band() is used to identify neigbours based on a distance band (66km in our case). The output is a list of neighbours saved as nb.\nst_weights() is used to calculate polygon spatial weights of the nb list. Note that:\n\nThe default style argument is set to “W” for row-standardised weights\nTthe default allow_zero argument is set to TRUE to assign zero as lagged value to zones without neighbours.\n\n\n\nkable(head(wm_fd, \n           n = 10))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnb\nwt\nNAME_2\nID_3\nNAME_3\nENGTYPE_3\nCounty\nGDPPC\ngeometry\n\n\n\n\n2, 3, 4, 5, 57, 64\n0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\nChangde\n21098\nAnxiang\nCounty\nAnxiang\n23667\nPOLYGON ((112.0625 29.75523…\n\n\n1, 57, 58, 78, 85\n0.2, 0.2, 0.2, 0.2, 0.2\nChangde\n21100\nHanshou\nCounty\nHanshou\n20981\nPOLYGON ((112.2288 29.11684…\n\n\n1, 4, 5, 57\n0.25, 0.25, 0.25, 0.25\nChangde\n21101\nJinshi\nCounty City\nJinshi\n34592\nPOLYGON ((111.8927 29.6013,…\n\n\n1, 3, 5, 6\n0.25, 0.25, 0.25, 0.25\nChangde\n21102\nLi\nCounty\nLi\n24473\nPOLYGON ((111.3731 29.94649…\n\n\n1, 3, 4, 6, 69\n0.2, 0.2, 0.2, 0.2, 0.2\nChangde\n21103\nLinli\nCounty\nLinli\n25554\nPOLYGON ((111.6324 29.76288…\n\n\n4, 5, 69\n0.3333333, 0.3333333, 0.3333333\nChangde\n21104\nShimen\nCounty\nShimen\n27137\nPOLYGON ((110.8825 30.11675…\n\n\n67, 71, 84\n0.3333333, 0.3333333, 0.3333333\nChangsha\n21109\nLiuyang\nCounty City\nLiuyang\n63118\nPOLYGON ((113.9905 28.5682,…\n\n\n9, 46, 47, 78, 80\n0.2, 0.2, 0.2, 0.2, 0.2\nChangsha\n21110\nNingxiang\nCounty\nNingxiang\n62202\nPOLYGON ((112.7181 28.38299…\n\n\n8, 46, 66, 68, 84, 86\n0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\nChangsha\n21111\nWangcheng\nCounty\nWangcheng\n70666\nPOLYGON ((112.7914 28.52688…\n\n\n16, 20, 22, 70, 72, 73\n0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\nChenzhou\n21112\nAnren\nCounty\nAnren\n12761\nPOLYGON ((113.1757 26.82734…"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#deriving-adaptive-distance-weights",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#deriving-adaptive-distance-weights",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "5.2. Deriving Adaptive Distance Weights",
    "text": "5.2. Deriving Adaptive Distance Weights\nWe will derive the adaptive distance weight using the following code:\n\nwm_ad &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_knn(geometry,\n                     k = 8),\n         wt = st_weights(nb),\n         .before = 1)\n\nkable(head(wm_ad, \n           n = 10))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnb\nwt\nNAME_2\nID_3\nNAME_3\nENGTYPE_3\nCounty\nGDPPC\ngeometry\n\n\n\n\n2, 3, 4, 5, 57, 58, 64, 76\n0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\nChangde\n21098\nAnxiang\nCounty\nAnxiang\n23667\nPOLYGON ((112.0625 29.75523…\n\n\n1, 3, 8, 57, 58, 68, 78, 85\n0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\nChangde\n21100\nHanshou\nCounty\nHanshou\n20981\nPOLYGON ((112.2288 29.11684…\n\n\n1, 2, 4, 5, 6, 57, 64, 85\n0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\nChangde\n21101\nJinshi\nCounty City\nJinshi\n34592\nPOLYGON ((111.8927 29.6013,…\n\n\n1, 2, 3, 5, 6, 57, 64, 69\n0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\nChangde\n21102\nLi\nCounty\nLi\n24473\nPOLYGON ((111.3731 29.94649…\n\n\n1, 2, 3, 4, 6, 57, 69, 85\n0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\nChangde\n21103\nLinli\nCounty\nLinli\n25554\nPOLYGON ((111.6324 29.76288…\n\n\n1, 2, 3, 4, 5, 69, 75, 85\n0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\nChangde\n21104\nShimen\nCounty\nShimen\n27137\nPOLYGON ((110.8825 30.11675…\n\n\n9, 66, 67, 68, 71, 74, 84, 86\n0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\nChangsha\n21109\nLiuyang\nCounty City\nLiuyang\n63118\nPOLYGON ((113.9905 28.5682,…\n\n\n2, 9, 35, 46, 47, 78, 80, 86\n0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\nChangsha\n21110\nNingxiang\nCounty\nNingxiang\n62202\nPOLYGON ((112.7181 28.38299…\n\n\n8, 46, 47, 66, 68, 78, 84, 86\n0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\nChangsha\n21111\nWangcheng\nCounty\nWangcheng\n70666\nPOLYGON ((112.7914 28.52688…\n\n\n16, 17, 19, 20, 22, 70, 72, 73\n0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\nChenzhou\n21112\nAnren\nCounty\nAnren\n12761\nPOLYGON ((113.1757 26.82734…\n\n\n\n\n\n\n\nst_knn() is used to identify neighbours based on k number of nearest neighbours (8 in our case). The output is a list of neighbours saved as nb."
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#deriving-inverse-distance-weights",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#deriving-inverse-distance-weights",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "5.3. Deriving Inverse Distance Weights",
    "text": "5.3. Deriving Inverse Distance Weights\nWe will derive the inverse distance weight using the following code:\n\nwm_idw &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1)\n\nkable(head(wm_idw, \n           n = 10))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnb\nwt\nNAME_2\nID_3\nNAME_3\nENGTYPE_3\nCounty\nGDPPC\ngeometry\n\n\n\n\n2, 3, 4, 57, 85\n0.01526149, 0.03515537, 0.02176677, 0.02836978, 0.01029857\nChangde\n21098\nAnxiang\nCounty\nAnxiang\n23667\nPOLYGON ((112.0625 29.75523…\n\n\n1, 57, 58, 78, 85\n0.01526149, 0.01601100, 0.01911052, 0.02327058, 0.01591694\nChangde\n21100\nHanshou\nCounty\nHanshou\n20981\nPOLYGON ((112.2288 29.11684…\n\n\n1, 4, 5, 85\n0.03515537, 0.04581089, 0.04116397, 0.01208437\nChangde\n21101\nJinshi\nCounty City\nJinshi\n34592\nPOLYGON ((111.8927 29.6013,…\n\n\n1, 3, 5, 6\n0.02176677, 0.04581089, 0.04637578, 0.01585302\nChangde\n21102\nLi\nCounty\nLi\n24473\nPOLYGON ((111.3731 29.94649…\n\n\n3, 4, 6, 85\n0.04116397, 0.04637578, 0.01896212, 0.01351099\nChangde\n21103\nLinli\nCounty\nLinli\n25554\nPOLYGON ((111.6324 29.76288…\n\n\n4, 5, 69, 75, 85\n0.01585302, 0.01896212, 0.02710909, 0.01140718, 0.01080890\nChangde\n21104\nShimen\nCounty\nShimen\n27137\nPOLYGON ((110.8825 30.11675…\n\n\n67, 71, 74, 84\n0.01621067, 0.01536702, 0.01133628, 0.01836488\nChangsha\n21109\nLiuyang\nCounty City\nLiuyang\n63118\nPOLYGON ((113.9905 28.5682,…\n\n\n9, 46, 47, 56, 78, 80, 86\n0.01930410, 0.02675555, 0.02151751, 0.01076895, 0.02608065, 0.01519804, 0.01337412\nChangsha\n21110\nNingxiang\nCounty\nNingxiang\n62202\nPOLYGON ((112.7181 28.38299…\n\n\n8, 66, 68, 78, 84, 86\n0.01930410, 0.01651371, 0.01798519, 0.01473155, 0.03015561, 0.01612293\nChangsha\n21111\nWangcheng\nCounty\nWangcheng\n70666\nPOLYGON ((112.7914 28.52688…\n\n\n16, 17, 19, 20, 22, 70, 72, 73\n0.02737233, 0.01390810, 0.01458881, 0.02156771, 0.02419268, 0.02350470, 0.01784174, 0.01621545\nChenzhou\n21112\nAnren\nCounty\nAnren\n12761\nPOLYGON ((113.1757 26.82734…\n\n\n\n\n\n\n\nst_inverse_distance() is used to calculate the inverse distance weights of neighbours on the nb list generated from st_contiguity()."
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#global-morans-i",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#global-morans-i",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "6.1. Global Moran’s I",
    "text": "6.1. Global Moran’s I\n\n6.1.1. Computing Global Moran’s I Statistics\nWe will use the following code to compute the Moran’s I value using contiguity weight derived from the Queen’s method.\n\nmoranI &lt;- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n\n\nThe output from sfdep package is a tibble data.frame.\n\n\n6.1.2. Performing Global Moran’s I Test\nInstead of computing Moran’s I statistics, Moran’s I test is generally performed. We can perform the test using the following code:\n\nglobal_moran_test(wm_q$GDPPC, wm_q$nb, wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\nThe default for alternative argument is “two.sided”. Other arguments are “greater” or “less”\nBy default, the randomisation argument is TRUE.\n\n\n\n\n6.1.3. Performing Global Moran I’s Permutation Test\nMonte Carlo simulation should be used to perform the statistical test.\nFirst, we use set.seed() to ensure that the computation is reproducible.\n\nset.seed(1234)\n\nWe use the following code to perform the Monte Carlo simulation:\n\nglobal_moran_perm(wm_q$GDPPC, wm_q$nb, wm_q$wt,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nThe report shows that the p-value is less than alpha value of 0.05. We reject the null hypothesis that the spatial patterns are spatially independent. As Moran’s I statistics is greater than 0, we can infer that the spatial distribution shows signs of clustering.\nNote: The total simulations conducted is nsim + 1. When nsim = 99, 100 simulations will be performed."
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#computing-local-gi-statistics",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#computing-local-gi-statistics",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "7.1. Computing Local Gi* Statistics",
    "text": "7.1. Computing Local Gi* Statistics\nWe will use the following code to compute local Gi* statistics based on the inverse distance weights matrix:\n\nHCSA &lt;- wm_idw %&gt;%\n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wt, nsim = 499),\n    .before = 1) %&gt;%\n  unnest(local_Gi)\n\nHCSA\n\nSimple feature collection with 88 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 17\n   gi_star   e_gi    var_gi p_value   p_sim p_folded_sim skewness kurtosis nb   \n     &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;nb&gt; \n 1  0.0416 0.0114   6.24e-6  0.0472 9.62e-1        0.84     0.42     0.739 &lt;int&gt;\n 2 -0.333  0.0112   6.39e-6 -0.301  7.64e-1        0.932    0.466    0.852 &lt;int&gt;\n 3  0.281  0.0125   7.83e-6 -0.0911 9.27e-1        0.872    0.436    1.01  &lt;int&gt;\n 4  0.411  0.0113   7.14e-6  0.508  6.11e-1        0.568    0.284    0.868 &lt;int&gt;\n 5  0.387  0.0114   7.81e-6  0.421  6.74e-1        0.54     0.27     1.25  &lt;int&gt;\n 6 -0.368  0.0116   6.81e-6 -0.478  6.33e-1        0.764    0.382    0.914 &lt;int&gt;\n 7  3.56   0.0146   7.04e-6  2.84   4.56e-3        0.032    0.016    1.09  &lt;int&gt;\n 8  2.52   0.0135   5.08e-6  1.69   9.14e-2        0.148    0.074    0.797 &lt;int&gt;\n 9  4.56   0.0141   4.57e-6  4.12   3.71e-5        0.008    0.004    1.03  &lt;int&gt;\n10  1.16   0.0109   4.92e-6  1.35   1.76e-1        0.208    0.104    0.597 &lt;int&gt;\n# ℹ 78 more rows\n# ℹ 8 more variables: wt &lt;list&gt;, NAME_2 &lt;chr&gt;, ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;,\n#   ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;, geometry &lt;POLYGON [°]&gt;"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#visualising-gi",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#visualising-gi",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "7.2. Visualising Gi*",
    "text": "7.2. Visualising Gi*\n\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_fill(\"gi_star\") +\n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#visualising-p-value-of-hcsa",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#visualising-p-value-of-hcsa",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "7.3. Visualising p-value of HCSA",
    "text": "7.3. Visualising p-value of HCSA\n\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nComparison\n\ntmap_mode(\"plot\")\ngistat_map &lt;- tm_shape(HCSA) +\n  tm_fill(\"gi_star\") +\n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n\npvalue_hcsa &lt;- tm_shape(HCSA) +\n  tm_fill(\"p_sim\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gistat_map, pvalue_hcsa, ncol = 2)"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#visualing-hot-spot-and-cold-spot-areas",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#visualing-hot-spot-and-cold-spot-areas",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "7.4. Visualing Hot Spot and Cold Spot Areas",
    "text": "7.4. Visualing Hot Spot and Cold Spot Areas\nWe will plot the significant (p-value &lt; 0.05) hot spot and cold spot areas:\n\nHCSA_sig &lt;- HCSA %&gt;%\n  filter(p_sim &lt; 0.05)\n\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"gi_star\") +\n  tm_borders(alpha = 0.4)\n\n\n\n\nThe map above shows that there is one hot spot area and two cold spot areas. The hot spot area coincides with the High-High cluster identified using local Moran’s I method."
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#creating-a-time-series-cube",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#creating-a-time-series-cube",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "8.1. Creating a Time Series Cube",
    "text": "8.1. Creating a Time Series Cube\n\nGDPPC_st &lt;- spacetime(GDPPC, hunan,\n                      .loc_col = \"County\",\n                      .time_col = \"Year\")\nGDPPC_st\n\n# A tibble: 1,496 × 3\n    Year County    GDPPC\n * &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;\n 1  2005 Longshan   3469\n 2  2005 Changsha  24612\n 3  2005 Wangcheng 14659\n 4  2005 Ningxiang 11687\n 5  2005 Liuyang   13406\n 6  2005 Zhuzhou    8546\n 7  2005 You       10944\n 8  2005 Chaling    8040\n 9  2005 Yanling    7383\n10  2005 Liling    11688\n# ℹ 1,486 more rows\n\n\nWe can use is_spacetime_cube() to verify if GDPPC_st is a space-time cube object:\n\nis_spacetime_cube(GDPPC_st)\n\n[1] TRUE"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#deriving-spatial-weights",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#deriving-spatial-weights",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "8.2. Deriving Spatial Weights",
    "text": "8.2. Deriving Spatial Weights\nWe will identify neighbours and derive the inverse distance weights using the following code:\n\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry, \n                                  scale = 1, alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\nhead(GDPPC_nb)\n\n# A tibble: 6 × 5\n   Year County  GDPPC nb        wt       \n  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;list&gt;    &lt;list&gt;   \n1  2005 Anxiang  8184 &lt;int [6]&gt; &lt;dbl [6]&gt;\n2  2005 Hanshou  6560 &lt;int [6]&gt; &lt;dbl [6]&gt;\n3  2005 Jinshi   9956 &lt;int [5]&gt; &lt;dbl [5]&gt;\n4  2005 Li       8394 &lt;int [5]&gt; &lt;dbl [5]&gt;\n5  2005 Linli    8850 &lt;int [5]&gt; &lt;dbl [5]&gt;\n6  2005 Shimen   9244 &lt;int [6]&gt; &lt;dbl [6]&gt;\n\n\n\n\nactivate() from the dplyr package is used to activate the geometry context.\nmutate() from the dplyr package is used to create new columns nb and wt.\nset_nbs() and set_wts() is used to activate the data and copy nb and wt columns to each time-slicing\n\nDo not rearrange the observations after using set_nbs() or set_wts()."
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#computing-gi",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#computing-gi",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "8.3. Computing Gi*",
    "text": "8.3. Computing Gi*\nTo calculate the local Gi* for each location, we can group the columns by Year and apply local_gstar_perm(). After which, we can use unnest() to unnest the gi_star column of the newly created gi_stars data.frame.\n\ngi_stars &lt;- GDPPC_nb %&gt;%\n  group_by(Year) %&gt;%\n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %&gt;%\n  unnest(gi_star)"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#mann-kendall-test",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#mann-kendall-test",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "8.4. Mann-Kendall Test",
    "text": "8.4. Mann-Kendall Test\nWe can then evaluate each location for a trend using the Mann-Kendall test. The code chunk below uses Changsha county:\n\ncbg &lt;- gi_stars %&gt;%\n  ungroup() %&gt;%\n  filter(County == \"Changsha\") |&gt;\n  select(County, Year, gi_star)\n\nNext, we plot the results using ggplot2 functions:\n\nggplot(data = cbg, \n       aes(x = Year,\n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\nAn interactive plot can be recreated using ggplotly() of the plotly package.\n\np &lt;- ggplot(data = cbg, \n       aes(x = Year,\n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p)\n\n\n\n\n\n\ncbg %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  unnest_wider(mk)\n\n# A tibble: 1 × 5\n    tau      sl     S     D  varS\n  &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 0.485 0.00742    66  136.  589.\n\n\nIn the results, sl is the p-value. The results show that there is a slight upward trend but it is insignificant.\nThe test can be replicated for each County using group_by():\n\nehsa &lt;- gi_stars %&gt;%\n  group_by(County) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)\n\nWe can use the following code to show significant emerging hot or cold spots:\n\nemerging &lt;- ehsa %&gt;%\n  arrange(sl, abs(tau)) %&gt;%\n  slice(1:5)"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#performing-emerging-hotspot-analysis-ehsa",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#performing-emerging-hotspot-analysis-ehsa",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "8.5. Performing Emerging Hotspot Analysis (EHSA)",
    "text": "8.5. Performing Emerging Hotspot Analysis (EHSA)\nWe will perform EHSA by using emerging_hotspot_analysis() of the sfdep package. It takes the following arguments:\n\nx = a spacetime object\n.var = the quoted name of the variable of interest\nk = number of time lags, default is 1\nnsim = number of simulations to perform\n\n\nehsa &lt;- emerging_hotspot_analysis(\n  x = GDPPC_st, \n  .var = \"GDPPC\",\n  k = 1, \n  nsim = 99\n)"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#visualising-distribution-of-ehsa-classes",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#visualising-distribution-of-ehsa-classes",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "8.6. Visualising Distribution of EHSA Classes",
    "text": "8.6. Visualising Distribution of EHSA Classes\nUsing ggplot2 functions, we will plot the distribution of EHSA classes as a bar chart:\n\nggplot(data = ehsa, \n       aes(x = classification)) + \n  geom_bar()\n\n\n\n\nThe bar chart reveals that sporadic coldspot class the highest number of counties."
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#visualsing-ehsa",
    "href": "In_class_Ex/In_class_Ex02/In_Class_Ex02.html#visualsing-ehsa",
    "title": "In-Class Exercise 2: Spatial Weights, Spatial Association, and Emerging Hotspot Analysis",
    "section": "8.7. Visualsing EHSA",
    "text": "8.7. Visualsing EHSA\nBefore we can visualise the geographic distribution of EHSA classes, we have to join the hunan and ehsa datasets together:\n\nhunan_ehsa &lt;- hunan %&gt;%\n  left_join(ehsa, \n            by = join_by(County == location))\n\nWe use tmap functions to plot a choropleth map:\n\nehsa_sig &lt;- hunan_ehsa %&gt;%\n  filter(p_value &lt; 0.05) \n\ntmap_mode(\"plot\")\ntm_shape(hunan_ehsa) + \n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") +\n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html",
    "href": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html",
    "title": "Hands-on Exercise 3: Spatial Interaction Models",
    "section": "",
    "text": "Spatial interaction represent the flow of people, material, or information between locations in geographical space. It encompasses everything from freight shipments, energy flows, and the global trade in rare antiquities, to flight schedules, rush hour woes, and pedestrian foot traffic.\nEach spatial interaction, as an analogy for a set of movements, is composed of a discrete origin/destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations of origin and columns are related to locations of destination. Such a matrix is commonly known as an origin/destination matrix or a spatial interaction matrix.\nIn this hands-on exercise, we will build an OD matrix by using Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html#importing-origin-destination-data",
    "href": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html#importing-origin-destination-data",
    "title": "Hands-on Exercise 3: Spatial Interaction Models",
    "section": "3.1. Importing Origin Destination data",
    "text": "3.1. Importing Origin Destination data\nFirst, we will import the Passenger Volume by Origin Destination Bus Stops data set download from LTA DataMall:\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\nIt is observed that ORIGIN_PT_CODE and DESTINATION_PT_CODE are both recognised as integers. Since these are bus stop identifiers, they should be converted to factor type using the following code:\n\nodbus$ORIGIN_PT_CODE &lt;-\n  as.factor(odbus$ORIGIN_PT_CODE) \n\nodbus$DESTINATION_PT_CODE &lt;-\n  as.factor(odbus$DESTINATION_PT_CODE)\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 20281, 20281, 1…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 20141, 20141, 1…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html#extracting-study-data",
    "href": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html#extracting-study-data",
    "title": "Hands-on Exercise 3: Spatial Interaction Models",
    "section": "3.2. Extracting Study Data",
    "text": "3.2. Extracting Study Data\nWe will extract commuting flows on weekdays between 6am and 9am.\n\nodbus6_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == 'WEEKDAY') %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\ndatatable(odbus6_9)\n\n\n\n\n\n\nSave the output in rds format for future use:\n\nwrite_rds(odbus6_9, \"data/rds/odbus6_9.rds\")"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html#importing-geospatial-data",
    "href": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html#importing-geospatial-data",
    "title": "Hands-on Exercise 3: Spatial Interaction Models",
    "section": "3.3. Importing Geospatial Data",
    "text": "3.3. Importing Geospatial Data\nThe following geospatial data will be used in this exercise:\n\nBusStop: Provides location of bus stops\nMPSZ-2019: Provides sub-zone bondaries based on the URA Master Plan 2019\n\nWe will use the following codes to import the two data sets into R:\n\nbusstop &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\Hands_on_Ex\\Hands_on_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\nbusstop\n\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   BUS_STOP_N BUS_ROOF_N             LOC_DESC                  geometry\n1       22069        B06   OPP CEVA LOGISTICS POINT (13576.31 32883.65)\n2       32071        B23         AFT TRACK 13 POINT (13228.59 44206.38)\n3       44331        B01              BLK 239  POINT (21045.1 40242.08)\n4       96081        B05 GRACE INDEPENDENT CH POINT (41603.76 35413.11)\n5       11561        B05              BLK 166 POINT (24568.74 30391.85)\n6       66191        B03         AFT CORFE PL POINT (30951.58 38079.61)\n7       23389       B02A              PEC LTD   POINT (12476.9 32211.6)\n8       54411        B02              BLK 527 POINT (30329.45 39373.92)\n9       28531        B09              BLK 536 POINT (14993.31 36905.61)\n10      96139        B01              BLK 148  POINT (41642.81 36513.9)\n\n\n\nmpsz2019 &lt;- st_read(dsn = \"data/geospatial\",\n                    layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\Hands_on_Ex\\Hands_on_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\nmpsz2019\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\nSave the output in rds format for future use:\n\nwrite_rds(mpsz2019, \"data/rds/mpsz2019.rds\")"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html#combining-busstop-and-mpsz2019",
    "href": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html#combining-busstop-and-mpsz2019",
    "title": "Hands-on Exercise 3: Spatial Interaction Models",
    "section": "4.1. Combining busstop and mpsz2019",
    "text": "4.1. Combining busstop and mpsz2019\nWe will use the following code to populate the planning subzone code from mpsz2019 sf dataframe to busstop sf dataframe:\n\nbs_mpsz2019 &lt;- st_intersection(busstop, mpsz2019) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\ndatatable(bs_mpsz2019)\n\n\n\n\n\n\nst_intersection() is used to perform point and polygon overlay, output is in point sf object. Five bus stops are dropped from the results as they are outside Singapore’s boundaries.\nSave the output in rds format for future use:\n\nwrite_rds(bs_mpsz2019, \"data/rds/bs_mpsz2019.rds\")\n\nNext, we will append the planning subzone code from bs_mpsz2019 onto the odbus6_9 dataframe:\n\nod_data &lt;- left_join(odbus6_9, bs_mpsz2019,\n                     by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\nCheck for duplicates using the following code:\n\nduplicates &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup\n\nglimpse(duplicates)\n\nRows: 1,186\nColumns: 4\n$ ORIGIN_BS &lt;chr&gt; \"11009\", \"11009\", \"11009\", \"11009\", \"11009\", \"11009\", \"11009…\n$ DESTIN_BS &lt;fct&gt; 01341, 01341, 01411, 01411, 01421, 01421, 01511, 01511, 0152…\n$ TRIPS     &lt;dbl&gt; 1, 1, 4, 4, 17, 17, 19, 19, 2, 2, 1, 1, 11, 11, 24, 24, 1, 1…\n$ ORIGIN_SZ &lt;chr&gt; \"QTSZ01\", \"QTSZ01\", \"QTSZ01\", \"QTSZ01\", \"QTSZ01\", \"QTSZ01\", …\n\n\nDuplicate records are found in the dataframe. We will use the following code to retain the unique records:\n\nod_data &lt;- unique(od_data)\n\nNext, we update the od_data dataframe with the planning subzone codes:\n\nod_data &lt;- left_join(od_data, bs_mpsz2019,\n                     by = c(\"DESTIN_BS\" = \"BUS_STOP_N\"))\n\n\nduplicates &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup\n\nglimpse(duplicates)\n\nRows: 1,350\nColumns: 5\n$ ORIGIN_BS &lt;chr&gt; \"01013\", \"01013\", \"01112\", \"01112\", \"01112\", \"01112\", \"01121…\n$ DESTIN_BS &lt;chr&gt; \"51071\", \"51071\", \"51071\", \"51071\", \"53041\", \"53041\", \"51071…\n$ TRIPS     &lt;dbl&gt; 2, 2, 66, 66, 4, 4, 8, 8, 1, 1, 1, 1, 24, 24, 6, 6, 4, 4, 21…\n$ ORIGIN_SZ &lt;chr&gt; \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", \"RCSZ10\", …\n$ SUBZONE_C &lt;chr&gt; \"CCSZ01\", \"CCSZ01\", \"CCSZ01\", \"CCSZ01\", \"BSSZ01\", \"BSSZ01\", …\n\n\n\nod_data &lt;- unique(od_data)\n\n\nod_data &lt;- od_data %&gt;%\n  rename(DESTIN_SZ = SUBZONE_C) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;%\n  summarise(AM_PEAK = sum(TRIPS))\n\nSave the output in rds format for future use:\n\nwrite_rds(od_data, \"data/rds/od_data.rds\")"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html#removing-intra-zonal-flows",
    "href": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html#removing-intra-zonal-flows",
    "title": "Hands-on Exercise 3: Spatial Interaction Models",
    "section": "5.1. Removing Intra-zonal Flows",
    "text": "5.1. Removing Intra-zonal Flows\nWe will use the following code to remove intra-zonal flows:\n\nod_data1 &lt;- od_data[od_data$ORIGIN_SZ != od_data$DESTIN_SZ,]"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html#creating-desire-lines",
    "href": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html#creating-desire-lines",
    "title": "Hands-on Exercise 3: Spatial Interaction Models",
    "section": "5.2. Creating Desire Lines",
    "text": "5.2. Creating Desire Lines\nWe will use od2line() from the stplanr package to create desire lines:\n\nflow_line &lt;- od2line(flow = od_data1,\n                     zones = mpsz2019,\n                     zone_code = \"SUBZONE_C\")"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html#visualising-desire-lines",
    "href": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html#visualising-desire-lines",
    "title": "Hands-on Exercise 3: Spatial Interaction Models",
    "section": "5.3. Visualising Desire Lines",
    "text": "5.3. Visualising Desire Lines\nWe use the following code to visualise the desire lines:\n\ntm_shape(mpsz2019) +\n  tm_polygons() +\nflow_line%&gt;%\n  tm_shape() +\n  tm_lines(lwd = \"AM_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1,1,3,5,7,10),\n           n = 6,\n           alpha = 0.3)\n\n\n\n\nWhen the data flow is very messy and highly skewed, focusing on selected flows may give more clarity. For example, we can focus on flow greater than or equal to 5000:\n\ntm_shape(mpsz2019) +\n  tm_polygons() +\nflow_line %&gt;%\n  filter(AM_PEAK &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"AM_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1,1,3,5,7,10),\n           n = 6,\n           alpha = 0.3)"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "",
    "text": "Spatial Interaction Models (SIMs) are mathematical models developed by Alan Wilson in the late 1960s and early 1970s to estimate flows between spatial entities. There are four main types of traditional SIMs:\n\nUnconstrained\nProduction-constrained\nAttraction-constrained\nDoubly-constrained\n\nOrdinary least square (OLS), log-normal, Poisson and negative binomial regression methods have been used extensively to calibrate OD flow models by processing flow data as different types of dependent variables."
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#converting-from-sf-data.table-to-spatialpolygonsdataframe",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#converting-from-sf-data.table-to-spatialpolygonsdataframe",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "4.1. Converting from sf data.table to SpatialPolygonsDataFrame",
    "text": "4.1. Converting from sf data.table to SpatialPolygonsDataFrame\nOne way to compute distance matrix is based on sf, and another method is based on sp. Computing distance matrix using sf method takes relatively longer than using sp method. Hence, sp method is used in the codes below.\nFirst, mpsz2019 has to be converted mpsz2019 from sf tibble data frame to SpatialPolygonsDataFrame:\n\nmpsz2019_sp &lt;- as(mpsz2019, \"Spatial\")\nmpsz2019_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 332 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 6\nnames       : SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C \nmin values  : ADMIRALTY,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR \nmax values  :    YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#computing-distance-matrix-1",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#computing-distance-matrix-1",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "4.2. Computing Distance Matrix",
    "text": "4.2. Computing Distance Matrix\nNext, we will use spDists() from the sp package to compute the Euclidean distance between centroids of the planning subzones:\n\ndist &lt;- spDists(mpsz2019_sp, longlat = FALSE)\nhead(dist, n = c(10,10))\n\n           [,1]       [,2]      [,3]      [,4]       [,5]      [,6]      [,7]\n [1,]     0.000  3926.0025  3939.108 20252.964  2989.9839  1431.330 19211.836\n [2,]  3926.003     0.0000   305.737 16513.865   951.8314  5254.066 16242.523\n [3,]  3939.108   305.7370     0.000 16412.062  1045.9088  5299.849 16026.146\n [4,] 20252.964 16513.8648 16412.062     0.000 17450.3044 21665.795  7229.017\n [5,]  2989.984   951.8314  1045.909 17450.304     0.0000  4303.232 17020.916\n [6,]  1431.330  5254.0664  5299.849 21665.795  4303.2323     0.000 20617.082\n [7,] 19211.836 16242.5230 16026.146  7229.017 17020.9161 20617.082     0.000\n [8,] 14960.942 12749.4101 12477.871 11284.279 13336.0421 16281.453  5606.082\n [9,]  7515.256  7934.8082  7649.776 18427.503  7801.6163  8403.896 14810.930\n[10,]  6391.342  4975.0021  4669.295 15469.566  5226.8731  7707.091 13111.391\n           [,8]      [,9]     [,10]\n [1,] 14960.942  7515.256  6391.342\n [2,] 12749.410  7934.808  4975.002\n [3,] 12477.871  7649.776  4669.295\n [4,] 11284.279 18427.503 15469.566\n [5,] 13336.042  7801.616  5226.873\n [6,] 16281.453  8403.896  7707.091\n [7,]  5606.082 14810.930 13111.391\n [8,]     0.000  9472.024  8575.490\n [9,]  9472.024     0.000  3780.800\n[10,]  8575.490  3780.800     0.000\n\n\nThe output dist is a matrix object class of R and that the column and row headers are not labelled with the planning subzone codes."
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#labelling-column-and-row-headers-of-a-distance-matrix",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#labelling-column-and-row-headers-of-a-distance-matrix",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "4.3. Labelling Column and Row Headers of a Distance Matrix",
    "text": "4.3. Labelling Column and Row Headers of a Distance Matrix\nFirst, we will create a list sorted by the planning subzone code:\n\nsz_names &lt;- mpsz2019$SUBZONE_C\n\nNext, we reattach SUBZONE_C to row and coloumn for distance matrix matching:\n\ncolnames(dist) &lt;- paste0(sz_names)\nrownames(dist) &lt;- paste0(sz_names)"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#pivoting-distance-value-by-subzone_c",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#pivoting-distance-value-by-subzone_c",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "4.4. Pivoting Distance Value by SUBZONE_C",
    "text": "4.4. Pivoting Distance Value by SUBZONE_C\nNext, we will pivot the distance matrix into a long table by using row and column subzone codes:\n\ndist_pair &lt;- melt(dist) %&gt;%\n  rename(dist = value)\nhead(dist_pair, 10)\n\n     Var1   Var2      dist\n1  MESZ01 MESZ01     0.000\n2  RVSZ05 MESZ01  3926.003\n3  SRSZ01 MESZ01  3939.108\n4  WISZ01 MESZ01 20252.964\n5  MUSZ02 MESZ01  2989.984\n6  MPSZ05 MESZ01  1431.330\n7  WISZ03 MESZ01 19211.836\n8  WISZ02 MESZ01 14960.942\n9  SISZ02 MESZ01  7515.256\n10 SISZ01 MESZ01  6391.342\n\n\nWe can observe that the within-zone distance is 0."
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#updating-intra-zonal-distances",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#updating-intra-zonal-distances",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "4.5. Updating Intra-zonal Distances",
    "text": "4.5. Updating Intra-zonal Distances\nWe will append a constant value o replace the intra-zonal distance of 0.\nFirst, we will determine the minimum of the distance:\n\ndist_pair %&gt;%\n  filter(dist &gt; 0) %&gt;%\n  summary()\n\n      Var1             Var2             dist        \n MESZ01 :   331   MESZ01 :   331   Min.   :  173.8  \n RVSZ05 :   331   RVSZ05 :   331   1st Qu.: 7149.5  \n SRSZ01 :   331   SRSZ01 :   331   Median :11890.0  \n WISZ01 :   331   WISZ01 :   331   Mean   :12229.4  \n MUSZ02 :   331   MUSZ02 :   331   3rd Qu.:16401.7  \n MPSZ05 :   331   MPSZ05 :   331   Max.   :49894.4  \n (Other):107906   (Other):107906                    \n\n\nNext, we will add a constant value of 50m into intra-zonal distance:\n\ndist_pair$dist &lt;- ifelse(dist_pair$dist == 0, 50,\n                         dist_pair$dist)\n\nsummary(dist_pair)\n\n      Var1             Var2             dist      \n MESZ01 :   332   MESZ01 :   332   Min.   :   50  \n RVSZ05 :   332   RVSZ05 :   332   1st Qu.: 7097  \n SRSZ01 :   332   SRSZ01 :   332   Median :11864  \n WISZ01 :   332   WISZ01 :   332   Mean   :12193  \n MUSZ02 :   332   MUSZ02 :   332   3rd Qu.:16388  \n MPSZ05 :   332   MPSZ05 :   332   Max.   :49894  \n (Other):108232   (Other):108232                  \n\n\nNext, we will rename the origin and destination fields:\n\ndist_pair &lt;- dist_pair %&gt;%\n  rename(orig = Var1,\n         dest = Var2)\n\nSave the output in rds format for future use:\n\nwrite_rds(dist_pair, \"data/rds/dist_pair.rds\")"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#separating-intra-flow-from-passenger-volume-dataframe",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#separating-intra-flow-from-passenger-volume-dataframe",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "5.1. Separating Intra-flow from Passenger Volume Dataframe",
    "text": "5.1. Separating Intra-flow from Passenger Volume Dataframe\nWe will use the following code to add three new fields into the flow_data dataframe:\n\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 0,\n  flow_data$TRIPS)\n\nflow_data$offset &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 0.000001,\n  1)"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#combining-passenger-volume-data-with-distance-value",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#combining-passenger-volume-data-with-distance-value",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "5.2. Combining Passenger Volume Data with Distance Value",
    "text": "5.2. Combining Passenger Volume Data with Distance Value\nFirst, we need to convert the data value type of ORIGIN_SZ and DESTIN_SZ into factor:\n\nflow_data$ORIGIN_SZ &lt;- as.factor(flow_data$ORIGIN_SZ)\nflow_data$DESTIN_SZ &lt;- as.factor(flow_data$DESTIN_SZ)\n\nNext, we use left_join() from the dplyr package to join the flow_data and dist_pair dataframes:\n\nflow_data1 &lt;- flow_data %&gt;%\n  left_join(dist_pair, \n            by = c(\"ORIGIN_SZ\" = \"orig\",\n                   \"DESTIN_SZ\" = \"dest\"))"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#importing-population-data",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#importing-population-data",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "6.1. Importing Population Data",
    "text": "6.1. Importing Population Data\n\npop &lt;- read_csv(\"data/aspatial/pop.csv\")"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#geospatial-data-wrangling",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#geospatial-data-wrangling",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "6.2. Geospatial Data Wrangling",
    "text": "6.2. Geospatial Data Wrangling\n\npop &lt;- pop %&gt;%\n  left_join(mpsz2019, \n            by = c(\"PA\" = \"PLN_AREA_N\",\n                   \"SZ\" = \"SUBZONE_N\")) %&gt;%\n  select(1:6) %&gt;%\n  rename(SZ_NAME = SZ,\n         SZ = SUBZONE_C)"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#preparing-origin-attribute",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#preparing-origin-attribute",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "6.3. Preparing Origin Attribute",
    "text": "6.3. Preparing Origin Attribute\n\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            by = c(ORIGIN_SZ = \"SZ\")) %&gt;%\n  rename(ORIGIN_AGE7_12 = AGE7_12,\n         ORIGIN_AGE12_24 = AGE13_24,\n         ORIGIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#preparing-destination-attribute",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#preparing-destination-attribute",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "6.4. Preparing Destination Attribute",
    "text": "6.4. Preparing Destination Attribute\n\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            by = c(DESTIN_SZ = \"SZ\")) %&gt;%\n  rename(DESTIN_AGE7_12 = AGE7_12,\n         DESTIN_AGE12_24 = AGE13_24,\n         DESTIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\nSave the output in rds format for future use:\n\nwrite_rds(dist_pair, \"data/rds/dist_pair.rds\")"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#import-modelling-data",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#import-modelling-data",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "7.1. Import Modelling Data",
    "text": "7.1. Import Modelling Data\nFirst, we will import the modelling data into R:\n\nSIM_data &lt;- read_rds(\"data/rds/SIM_data.rds\")"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#visualising-dependent-variable",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#visualising-dependent-variable",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "7.2. Visualising Dependent Variable",
    "text": "7.2. Visualising Dependent Variable\nWe will plot the distribution of TRIPS (dependent variable) using a histogram:\n\nggplot(data = SIM_data,\n       aes(x = TRIPS)) +\n  geom_histogram()\n\n\n\n\nIt is observed that the distribution is highly skewed and does not resemble a normal distribution.\nNext, we will visualise the relationship between the TRIPS, the dependent variable, and distance, one of the key independent variables in the Spatial Interaction Model:\n\nggplot(data = SIM_data,\n       aes(x = dist,\n           y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\nIt is observed that the relationship between TRIPS and dist does not resemble a linear relationship.\nOn the other hand, we can observe a more linear relationship if we apply log transformation on both variables:\n\nggplot(data = SIM_data,\n       aes(x = log(dist),\n           y = log(TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm)"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#check-for-variables-with-zero-values",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#check-for-variables-with-zero-values",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "7.3. Check for Variables with Zero Values",
    "text": "7.3. Check for Variables with Zero Values\nSince Poisson Regression is based on log and log0 is undefined, we have to ensure that there are no 0 values in the explanatory variables:\n\nsummary(SIM_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS           FlowNoIntra      \n Length:14274       Length:14274       Min.   :     1.0   Min.   :     1.0  \n Class :character   Class :character   1st Qu.:    11.0   1st Qu.:    11.0  \n Mode  :character   Mode  :character   Median :    56.0   Median :    56.0  \n                                       Mean   :   664.3   Mean   :   664.3  \n                                       3rd Qu.:   296.0   3rd Qu.:   296.0  \n                                       Max.   :104167.0   Max.   :104167.0  \n     offset       dist         ORIGIN_AGE7_12 ORIGIN_AGE13_24 ORIGIN_AGE25_64\n Min.   :1   Min.   :  173.8   Min.   :   0   Min.   :    0   Min.   :    0  \n 1st Qu.:1   1st Qu.: 3465.4   1st Qu.: 240   1st Qu.:  460   1st Qu.: 2210  \n Median :1   Median : 6121.0   Median : 710   Median : 1400   Median : 7030  \n Mean   :1   Mean   : 6951.8   Mean   :1037   Mean   : 2278   Mean   :10536  \n 3rd Qu.:1   3rd Qu.: 9725.1   3rd Qu.:1500   3rd Qu.: 3282   3rd Qu.:15830  \n Max.   :1   Max.   :26135.8   Max.   :6340   Max.   :16380   Max.   :74610  \n DESTIN_AGE7_12 DESTIN_AGE13_24 DESTIN_AGE25_64\n Min.   :   0   Min.   :    0   Min.   :    0  \n 1st Qu.: 250   1st Qu.:  460   1st Qu.: 2210  \n Median : 720   Median : 1430   Median : 7120  \n Mean   :1040   Mean   : 2305   Mean   :10648  \n 3rd Qu.:1500   3rd Qu.: 3290   3rd Qu.:15830  \n Max.   :6340   Max.   :16380   Max.   :74610  \n\n\nThe report shows that variables ORIGIN_AGE7_12, ORIGIN_AGE13_24, ORIGIN_AGE25_64, DESTIN_AGE7_12, DESTIN_AGE13_24, and DESTIN_AGE25_64 consists of 0 values.\nWe will use the following code to replace zero values with 0.99:\n\nSIM_data$DESTIN_AGE7_12 &lt;- ifelse(SIM_data$DESTIN_AGE7_12 == 0, 0.99,\n                                  SIM_data$DESTIN_AGE7_12)\n\nSIM_data$DESTIN_AGE13_24 &lt;- ifelse(SIM_data$DESTIN_AGE13_24 == 0, 0.99, \n                                   SIM_data$DESTIN_AGE13_24)\n\nSIM_data$DESTIN_AGE25_64 &lt;- ifelse(SIM_data$DESTIN_AGE25_64 == 0, 0.99, \n                                   SIM_data$DESTIN_AGE25_64)\n\nSIM_data$ORIGIN_AGE7_12 &lt;- ifelse(SIM_data$ORIGIN_AGE7_12 == 0, 0.99,\n                                  SIM_data$ORIGIN_AGE7_12)\n\nSIM_data$ORIGIN_AGE13_24 &lt;- ifelse(SIM_data$ORIGIN_AGE13_24 == 0, 0.99, \n                                   SIM_data$ORIGIN_AGE13_24)\n\nSIM_data$ORIGIN_AGE25_64 &lt;- ifelse(SIM_data$ORIGIN_AGE25_64 == 0, 0.99,\n                                   SIM_data$ORIGIN_AGE25_64)\n\n\nsummary(SIM_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS           FlowNoIntra      \n Length:14274       Length:14274       Min.   :     1.0   Min.   :     1.0  \n Class :character   Class :character   1st Qu.:    11.0   1st Qu.:    11.0  \n Mode  :character   Mode  :character   Median :    56.0   Median :    56.0  \n                                       Mean   :   664.3   Mean   :   664.3  \n                                       3rd Qu.:   296.0   3rd Qu.:   296.0  \n                                       Max.   :104167.0   Max.   :104167.0  \n     offset       dist         ORIGIN_AGE7_12    ORIGIN_AGE13_24   \n Min.   :1   Min.   :  173.8   Min.   :   0.99   Min.   :    0.99  \n 1st Qu.:1   1st Qu.: 3465.4   1st Qu.: 240.00   1st Qu.:  460.00  \n Median :1   Median : 6121.0   Median : 710.00   Median : 1400.00  \n Mean   :1   Mean   : 6951.8   Mean   :1036.73   Mean   : 2278.59  \n 3rd Qu.:1   3rd Qu.: 9725.1   3rd Qu.:1500.00   3rd Qu.: 3282.50  \n Max.   :1   Max.   :26135.8   Max.   :6340.00   Max.   :16380.00  \n ORIGIN_AGE25_64    DESTIN_AGE7_12    DESTIN_AGE13_24    DESTIN_AGE25_64   \n Min.   :    0.99   Min.   :   0.99   Min.   :    0.99   Min.   :    0.99  \n 1st Qu.: 2210.00   1st Qu.: 250.00   1st Qu.:  460.00   1st Qu.: 2210.00  \n Median : 7030.00   Median : 720.00   Median : 1430.00   Median : 7120.00  \n Mean   :10535.93   Mean   :1039.98   Mean   : 2305.33   Mean   :10647.95  \n 3rd Qu.:15830.00   3rd Qu.:1500.00   3rd Qu.: 3290.00   3rd Qu.:15830.00  \n Max.   :74610.00   Max.   :6340.00   Max.   :16380.00   Max.   :74610.00  \n\n\nRunning summary() again shows that all 0 values have been replaced by 0.99."
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#unconstrained-spatial-interaction-model",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#unconstrained-spatial-interaction-model",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "7.4. Unconstrained Spatial Interaction Model",
    "text": "7.4. Unconstrained Spatial Interaction Model\nIn this section, we will calibrate an unconstrained spatial interaction model using the glm() function from Base Stats. The explanatory variables are origin population by different age cohort, destination population by different age cohort and distance between origin and destination in km.\nWe will use the following code to calibrate the model:\n\nuncSIM &lt;- glm(formula = TRIPS ~\n                log(ORIGIN_AGE25_64) +\n                log(DESTIN_AGE25_64) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nuncSIM\n\n\nCall:  glm(formula = TRIPS ~ log(ORIGIN_AGE25_64) + log(DESTIN_AGE25_64) + \n    log(dist), family = poisson(link = \"log\"), data = SIM_data, \n    na.action = na.exclude)\n\nCoefficients:\n         (Intercept)  log(ORIGIN_AGE25_64)  log(DESTIN_AGE25_64)  \n            17.00287               0.21001               0.01289  \n           log(dist)  \n            -1.51785  \n\nDegrees of Freedom: 14273 Total (i.e. Null);  14270 Residual\nNull Deviance:      36120000 \nResidual Deviance: 19960000     AIC: 20040000"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#r-squared-function",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#r-squared-function",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "7.5. R-squared Function",
    "text": "7.5. R-squared Function\nWe will write a function to calculate R-sqared value to measure how much variation of the trips can be accounted by the model:\n\ncalc_Rsquared &lt;- function(observed, estimated){\n  r &lt;- cor(observed, estimated)\n  R2 &lt;- r^2\n  R2\n}\n\nNext, we will calculate the R-squared of the unconstrained SIM using the following code:\n\ncalc_Rsquared(uncSIM$data$TRIPS, uncSIM$fitted.values)\n\n[1] 0.1694734\n\n\n\nr2_mcfadden(uncSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.446\n  adj. R2: 0.446"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#origin-production-constrained-sim",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#origin-production-constrained-sim",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "7.6. ORigin (Production) Constrained SIM",
    "text": "7.6. ORigin (Production) Constrained SIM\nWe will fit an origin constrained SIM by using the following code:\n\norcSIM &lt;- glm(formula = TRIPS ~\n                ORIGIN_SZ +\n                log(DESTIN_AGE25_64) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\n\nsummary(orcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(DESTIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)          19.9309957  0.0054015  3689.887  &lt; 2e-16 ***\nORIGIN_SZAMSZ02       0.6805710  0.0052686   129.175  &lt; 2e-16 ***\nORIGIN_SZAMSZ03       0.3597850  0.0054884    65.554  &lt; 2e-16 ***\nORIGIN_SZAMSZ04      -0.1106566  0.0060027   -18.434  &lt; 2e-16 ***\nORIGIN_SZAMSZ05      -0.3140561  0.0067998   -46.186  &lt; 2e-16 ***\nORIGIN_SZAMSZ06       0.0634425  0.0060258    10.528  &lt; 2e-16 ***\nORIGIN_SZAMSZ07      -1.1301580  0.0110298  -102.464  &lt; 2e-16 ***\nORIGIN_SZAMSZ08      -0.6330394  0.0102949   -61.491  &lt; 2e-16 ***\nORIGIN_SZAMSZ09       0.1064915  0.0063450    16.784  &lt; 2e-16 ***\nORIGIN_SZAMSZ10       0.5061899  0.0053889    93.931  &lt; 2e-16 ***\nORIGIN_SZAMSZ11      -1.3167911  0.0144870   -90.895  &lt; 2e-16 ***\nORIGIN_SZAMSZ12      -1.5103004  0.0127453  -118.499  &lt; 2e-16 ***\nORIGIN_SZBDSZ01       1.3626004  0.0051433   264.929  &lt; 2e-16 ***\nORIGIN_SZBDSZ02       0.9554084  0.0059655   160.156  &lt; 2e-16 ***\nORIGIN_SZBDSZ03       1.1476190  0.0054278   211.433  &lt; 2e-16 ***\nORIGIN_SZBDSZ04       2.0110410  0.0046344   433.940  &lt; 2e-16 ***\nORIGIN_SZBDSZ05       1.0658940  0.0053976   197.477  &lt; 2e-16 ***\nORIGIN_SZBDSZ06       1.2719222  0.0054774   232.213  &lt; 2e-16 ***\nORIGIN_SZBDSZ07      -0.5053039  0.0111553   -45.297  &lt; 2e-16 ***\nORIGIN_SZBDSZ08      -0.3556193  0.0102947   -34.544  &lt; 2e-16 ***\nORIGIN_SZBKSZ01      -0.3606399  0.0075473   -47.784  &lt; 2e-16 ***\nORIGIN_SZBKSZ02       0.1357265  0.0061394    22.107  &lt; 2e-16 ***\nORIGIN_SZBKSZ03       0.4101999  0.0058983    69.545  &lt; 2e-16 ***\nORIGIN_SZBKSZ04      -0.3418645  0.0070764   -48.310  &lt; 2e-16 ***\nORIGIN_SZBKSZ05      -0.2986750  0.0074073   -40.322  &lt; 2e-16 ***\nORIGIN_SZBKSZ06      -0.2637855  0.0068739   -38.375  &lt; 2e-16 ***\nORIGIN_SZBKSZ07       0.5498323  0.0051476   106.813  &lt; 2e-16 ***\nORIGIN_SZBKSZ08      -0.0527393  0.0061457    -8.582  &lt; 2e-16 ***\nORIGIN_SZBKSZ09      -0.1564691  0.0067300   -23.249  &lt; 2e-16 ***\nORIGIN_SZBLSZ01      -1.7551329  0.0176599   -99.385  &lt; 2e-16 ***\nORIGIN_SZBLSZ02      -1.9493637  0.0213859   -91.152  &lt; 2e-16 ***\nORIGIN_SZBLSZ03      -2.9057732  0.0535995   -54.213  &lt; 2e-16 ***\nORIGIN_SZBLSZ04      -1.4672066  0.0254726   -57.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ01       0.1806064  0.0060563    29.821  &lt; 2e-16 ***\nORIGIN_SZBMSZ02      -1.4026549  0.0078244  -179.267  &lt; 2e-16 ***\nORIGIN_SZBMSZ03      -0.5976236  0.0063808   -93.660  &lt; 2e-16 ***\nORIGIN_SZBMSZ04      -0.5456513  0.0059061   -92.388  &lt; 2e-16 ***\nORIGIN_SZBMSZ05      -3.1095195  0.0188118  -165.297  &lt; 2e-16 ***\nORIGIN_SZBMSZ06      -3.0273827  0.0194319  -155.794  &lt; 2e-16 ***\nORIGIN_SZBMSZ07      -0.7378197  0.0066865  -110.345  &lt; 2e-16 ***\nORIGIN_SZBMSZ08      -0.9306150  0.0067188  -138.510  &lt; 2e-16 ***\nORIGIN_SZBMSZ09      -1.4137345  0.0101071  -139.876  &lt; 2e-16 ***\nORIGIN_SZBMSZ10      -1.7054195  0.0101582  -167.886  &lt; 2e-16 ***\nORIGIN_SZBMSZ11      -1.2418380  0.0076792  -161.714  &lt; 2e-16 ***\nORIGIN_SZBMSZ12      -1.3746537  0.0109769  -125.231  &lt; 2e-16 ***\nORIGIN_SZBMSZ13      -0.4339494  0.0069335   -62.587  &lt; 2e-16 ***\nORIGIN_SZBMSZ14      -0.9950458  0.0076302  -130.410  &lt; 2e-16 ***\nORIGIN_SZBMSZ15      -0.6544196  0.0068964   -94.892  &lt; 2e-16 ***\nORIGIN_SZBMSZ16      -1.5193747  0.0105329  -144.250  &lt; 2e-16 ***\nORIGIN_SZBMSZ17      -1.6536771  0.0180672   -91.529  &lt; 2e-16 ***\nORIGIN_SZBPSZ01       0.1484355  0.0064734    22.930  &lt; 2e-16 ***\nORIGIN_SZBPSZ02      -0.3602094  0.0073902   -48.741  &lt; 2e-16 ***\nORIGIN_SZBPSZ03      -0.1567975  0.0072226   -21.709  &lt; 2e-16 ***\nORIGIN_SZBPSZ04       0.4504873  0.0058418    77.115  &lt; 2e-16 ***\nORIGIN_SZBPSZ05       0.5028646  0.0053682    93.675  &lt; 2e-16 ***\nORIGIN_SZBPSZ06      -1.0125668  0.0105638   -95.853  &lt; 2e-16 ***\nORIGIN_SZBPSZ07      -0.3859065  0.0098561   -39.154  &lt; 2e-16 ***\nORIGIN_SZBSSZ01       0.1488497  0.0065504    22.724  &lt; 2e-16 ***\nORIGIN_SZBSSZ02       0.4269498  0.0055893    76.387  &lt; 2e-16 ***\nORIGIN_SZBSSZ03      -0.2437385  0.0062020   -39.300  &lt; 2e-16 ***\nORIGIN_SZBTSZ01       0.1987940  0.0066672    29.817  &lt; 2e-16 ***\nORIGIN_SZBTSZ02      -0.4571546  0.0090784   -50.356  &lt; 2e-16 ***\nORIGIN_SZBTSZ03      -0.2697243  0.0077941   -34.606  &lt; 2e-16 ***\nORIGIN_SZBTSZ04      -1.0997236  0.0115225   -95.441  &lt; 2e-16 ***\nORIGIN_SZBTSZ05      -1.0053122  0.0132594   -75.819  &lt; 2e-16 ***\nORIGIN_SZBTSZ06      -1.0841201  0.0102242  -106.035  &lt; 2e-16 ***\nORIGIN_SZBTSZ07      -2.3134497  0.0158499  -145.960  &lt; 2e-16 ***\nORIGIN_SZBTSZ08      -1.1581618  0.0121161   -95.589  &lt; 2e-16 ***\nORIGIN_SZCBSZ01      -1.0805930  0.0577831   -18.701  &lt; 2e-16 ***\nORIGIN_SZCCSZ01      -0.8145372  0.0152638   -53.364  &lt; 2e-16 ***\nORIGIN_SZCHSZ01       0.0377079  0.0133240     2.830 0.004654 ** \nORIGIN_SZCHSZ02      -0.6209553  0.0096388   -64.422  &lt; 2e-16 ***\nORIGIN_SZCHSZ03       1.6790244  0.0069559   241.381  &lt; 2e-16 ***\nORIGIN_SZCKSZ01       0.0839586  0.0059934    14.008  &lt; 2e-16 ***\nORIGIN_SZCKSZ02       0.4379511  0.0062289    70.309  &lt; 2e-16 ***\nORIGIN_SZCKSZ03       0.7956950  0.0051892   153.335  &lt; 2e-16 ***\nORIGIN_SZCKSZ04       1.2740323  0.0053165   239.637  &lt; 2e-16 ***\nORIGIN_SZCKSZ05       0.9326213  0.0061807   150.893  &lt; 2e-16 ***\nORIGIN_SZCKSZ06       0.3976273  0.0085639    46.431  &lt; 2e-16 ***\nORIGIN_SZCLSZ01      -0.7522917  0.0094655   -79.477  &lt; 2e-16 ***\nORIGIN_SZCLSZ02      -1.3937450  0.0153260   -90.940  &lt; 2e-16 ***\nORIGIN_SZCLSZ03      -0.7898683  0.0091016   -86.784  &lt; 2e-16 ***\nORIGIN_SZCLSZ04       0.8451512  0.0051258   164.882  &lt; 2e-16 ***\nORIGIN_SZCLSZ05      -1.6573818  0.0166091   -99.788  &lt; 2e-16 ***\nORIGIN_SZCLSZ06       0.9478181  0.0048182   196.716  &lt; 2e-16 ***\nORIGIN_SZCLSZ07      -0.2499753  0.0064632   -38.677  &lt; 2e-16 ***\nORIGIN_SZCLSZ08       0.1350119  0.0069296    19.483  &lt; 2e-16 ***\nORIGIN_SZCLSZ09      -1.3868782  0.0192743   -71.955  &lt; 2e-16 ***\nORIGIN_SZDTSZ02      -3.7535792  0.0871325   -43.079  &lt; 2e-16 ***\nORIGIN_SZDTSZ03      -3.8462041  0.0840156   -45.780  &lt; 2e-16 ***\nORIGIN_SZDTSZ13      -2.9738127  0.0349241   -85.151  &lt; 2e-16 ***\nORIGIN_SZGLSZ01      -1.5175198  0.0110135  -137.787  &lt; 2e-16 ***\nORIGIN_SZGLSZ02       0.2405712  0.0058742    40.954  &lt; 2e-16 ***\nORIGIN_SZGLSZ03       0.1940241  0.0061989    31.300  &lt; 2e-16 ***\nORIGIN_SZGLSZ04       1.0292572  0.0049028   209.931  &lt; 2e-16 ***\nORIGIN_SZGLSZ05       0.9864552  0.0050898   193.811  &lt; 2e-16 ***\nORIGIN_SZHGSZ01       0.3073609  0.0054307    56.597  &lt; 2e-16 ***\nORIGIN_SZHGSZ02       0.3827293  0.0054555    70.154  &lt; 2e-16 ***\nORIGIN_SZHGSZ03       0.2342580  0.0059240    39.544  &lt; 2e-16 ***\nORIGIN_SZHGSZ04       0.8750090  0.0049639   176.275  &lt; 2e-16 ***\nORIGIN_SZHGSZ05       1.1695280  0.0049468   236.420  &lt; 2e-16 ***\nORIGIN_SZHGSZ06      -0.0462411  0.0063805    -7.247 4.25e-13 ***\nORIGIN_SZHGSZ07       0.4488583  0.0055139    81.404  &lt; 2e-16 ***\nORIGIN_SZHGSZ08       0.2236095  0.0061279    36.490  &lt; 2e-16 ***\nORIGIN_SZHGSZ09      -1.6376674  0.0084442  -193.941  &lt; 2e-16 ***\nORIGIN_SZHGSZ10      -2.9849025  0.0501042   -59.574  &lt; 2e-16 ***\nORIGIN_SZJESZ01       0.3926525  0.0056268    69.783  &lt; 2e-16 ***\nORIGIN_SZJESZ02       0.1230160  0.0056864    21.633  &lt; 2e-16 ***\nORIGIN_SZJESZ03       0.0188276  0.0061020     3.085 0.002032 ** \nORIGIN_SZJESZ04      -1.3611618  0.0117184  -116.156  &lt; 2e-16 ***\nORIGIN_SZJESZ05      -2.0643662  0.0157083  -131.419  &lt; 2e-16 ***\nORIGIN_SZJESZ06       0.1556368  0.0055245    28.172  &lt; 2e-16 ***\nORIGIN_SZJESZ07      -1.7664532  0.0133171  -132.646  &lt; 2e-16 ***\nORIGIN_SZJESZ08      -0.9115981  0.0138203   -65.961  &lt; 2e-16 ***\nORIGIN_SZJESZ09       0.6121916  0.0060381   101.388  &lt; 2e-16 ***\nORIGIN_SZJESZ10      -1.1953045  0.0233216   -51.253  &lt; 2e-16 ***\nORIGIN_SZJESZ11      -1.4088748  0.0220921   -63.773  &lt; 2e-16 ***\nORIGIN_SZJWSZ01       0.5759093  0.0077741    74.081  &lt; 2e-16 ***\nORIGIN_SZJWSZ02       0.9769314  0.0053029   184.227  &lt; 2e-16 ***\nORIGIN_SZJWSZ03       1.3242695  0.0049068   269.882  &lt; 2e-16 ***\nORIGIN_SZJWSZ04       0.5621088  0.0057831    97.199  &lt; 2e-16 ***\nORIGIN_SZJWSZ05      -1.5744341  0.0146904  -107.174  &lt; 2e-16 ***\nORIGIN_SZJWSZ06      -0.9113320  0.0126913   -71.807  &lt; 2e-16 ***\nORIGIN_SZJWSZ07      -2.3083419  0.0357843   -64.507  &lt; 2e-16 ***\nORIGIN_SZJWSZ08       2.0114225  0.0047956   419.429  &lt; 2e-16 ***\nORIGIN_SZJWSZ09       1.9086705  0.0045255   421.759  &lt; 2e-16 ***\nORIGIN_SZKLSZ01       0.2743166  0.0056908    48.204  &lt; 2e-16 ***\nORIGIN_SZKLSZ02      -0.6443386  0.0074521   -86.463  &lt; 2e-16 ***\nORIGIN_SZKLSZ03      -0.3990113  0.0067213   -59.366  &lt; 2e-16 ***\nORIGIN_SZKLSZ04      -2.1413876  0.0138405  -154.719  &lt; 2e-16 ***\nORIGIN_SZKLSZ05      -1.0913697  0.0121512   -89.816  &lt; 2e-16 ***\nORIGIN_SZKLSZ06      -5.6240764  0.1857405   -30.279  &lt; 2e-16 ***\nORIGIN_SZKLSZ07      -1.1885897  0.0096830  -122.750  &lt; 2e-16 ***\nORIGIN_SZKLSZ08      -1.7018593  0.0114317  -148.872  &lt; 2e-16 ***\nORIGIN_SZLKSZ01      -1.6659670  0.0446420   -37.318  &lt; 2e-16 ***\nORIGIN_SZMDSZ01      -1.1210505  0.0318834   -35.161  &lt; 2e-16 ***\nORIGIN_SZMDSZ02      -0.5096299  0.0116645   -43.691  &lt; 2e-16 ***\nORIGIN_SZMDSZ03      -1.9187039  0.0198291   -96.762  &lt; 2e-16 ***\nORIGIN_SZMPSZ01      -0.5260512  0.0094201   -55.844  &lt; 2e-16 ***\nORIGIN_SZMPSZ02      -0.2905084  0.0077974   -37.257  &lt; 2e-16 ***\nORIGIN_SZMPSZ03       0.3342293  0.0063715    52.457  &lt; 2e-16 ***\nORIGIN_SZMUSZ02      -3.8337096  0.1105053   -34.693  &lt; 2e-16 ***\nORIGIN_SZNTSZ01      -2.9845040  0.0397028   -75.171  &lt; 2e-16 ***\nORIGIN_SZNTSZ02      -3.1812985  0.0249470  -127.522  &lt; 2e-16 ***\nORIGIN_SZNTSZ03      -0.9742991  0.0085424  -114.054  &lt; 2e-16 ***\nORIGIN_SZNTSZ05      -4.2086932  0.0579737   -72.597  &lt; 2e-16 ***\nORIGIN_SZNTSZ06      -4.5831822  0.0583494   -78.547  &lt; 2e-16 ***\nORIGIN_SZNVSZ01       0.3186962  0.0052944    60.195  &lt; 2e-16 ***\nORIGIN_SZNVSZ02      -0.5321136  0.0073747   -72.154  &lt; 2e-16 ***\nORIGIN_SZNVSZ03      -0.9911852  0.0090560  -109.451  &lt; 2e-16 ***\nORIGIN_SZNVSZ04      -0.8329721  0.0099590   -83.640  &lt; 2e-16 ***\nORIGIN_SZNVSZ05      -2.1460777  0.0182401  -117.657  &lt; 2e-16 ***\nORIGIN_SZPGSZ01      -0.5604078  0.0151515   -36.987  &lt; 2e-16 ***\nORIGIN_SZPGSZ02      -0.4025139  0.0085135   -47.279  &lt; 2e-16 ***\nORIGIN_SZPGSZ03       0.6975483  0.0055534   125.608  &lt; 2e-16 ***\nORIGIN_SZPGSZ04       1.2175486  0.0051080   238.363  &lt; 2e-16 ***\nORIGIN_SZPGSZ05       0.3895354  0.0069851    55.767  &lt; 2e-16 ***\nORIGIN_SZPLSZ01      -0.5572701  0.0134473   -41.441  &lt; 2e-16 ***\nORIGIN_SZPLSZ02      -0.9854214  0.0172337   -57.180  &lt; 2e-16 ***\nORIGIN_SZPLSZ03      -1.6991954  0.0472629   -35.952  &lt; 2e-16 ***\nORIGIN_SZPLSZ04      -2.2000217  0.0373580   -58.890  &lt; 2e-16 ***\nORIGIN_SZPLSZ05      -1.7086663  0.0260920   -65.486  &lt; 2e-16 ***\nORIGIN_SZPNSZ01       1.5292867  0.0055102   277.535  &lt; 2e-16 ***\nORIGIN_SZPNSZ02       0.7457519  0.0127815    58.346  &lt; 2e-16 ***\nORIGIN_SZPNSZ03      -1.3659046  0.0216180   -63.184  &lt; 2e-16 ***\nORIGIN_SZPNSZ04      -2.0025379  0.0360655   -55.525  &lt; 2e-16 ***\nORIGIN_SZPNSZ05      -0.9157959  0.0320955   -28.533  &lt; 2e-16 ***\nORIGIN_SZPRSZ01       0.0522611  0.0139142     3.756 0.000173 ***\nORIGIN_SZPRSZ02       1.3063371  0.0053809   242.774  &lt; 2e-16 ***\nORIGIN_SZPRSZ03       0.9963670  0.0054293   183.516  &lt; 2e-16 ***\nORIGIN_SZPRSZ04      -0.0300950  0.0088010    -3.419 0.000627 ***\nORIGIN_SZPRSZ05       1.6840313  0.0050839   331.245  &lt; 2e-16 ***\nORIGIN_SZPRSZ06      -0.8277202  0.0131296   -63.042  &lt; 2e-16 ***\nORIGIN_SZPRSZ07      -2.1698449  0.0177362  -122.340  &lt; 2e-16 ***\nORIGIN_SZPRSZ08       0.4559353  0.0072609    62.793  &lt; 2e-16 ***\nORIGIN_SZQTSZ01      -0.3517047  0.0078770   -44.650  &lt; 2e-16 ***\nORIGIN_SZQTSZ02      -0.8199353  0.0071544  -114.605  &lt; 2e-16 ***\nORIGIN_SZQTSZ03      -0.2457614  0.0065555   -37.490  &lt; 2e-16 ***\nORIGIN_SZQTSZ04      -1.2216614  0.0084050  -145.349  &lt; 2e-16 ***\nORIGIN_SZQTSZ05      -0.7219952  0.0072360   -99.778  &lt; 2e-16 ***\nORIGIN_SZQTSZ06      -0.6729363  0.0076658   -87.784  &lt; 2e-16 ***\nORIGIN_SZQTSZ07      -1.4497690  0.0109365  -132.563  &lt; 2e-16 ***\nORIGIN_SZQTSZ08      -0.2770151  0.0070193   -39.465  &lt; 2e-16 ***\nORIGIN_SZQTSZ09      -0.6157554  0.0078739   -78.202  &lt; 2e-16 ***\nORIGIN_SZQTSZ10      -0.3091547  0.0075471   -40.963  &lt; 2e-16 ***\nORIGIN_SZQTSZ11      -1.9698881  0.0151247  -130.243  &lt; 2e-16 ***\nORIGIN_SZQTSZ12      -2.6449643  0.0205857  -128.485  &lt; 2e-16 ***\nORIGIN_SZQTSZ13      -0.3754107  0.0088433   -42.452  &lt; 2e-16 ***\nORIGIN_SZQTSZ14      -1.6537473  0.0134378  -123.067  &lt; 2e-16 ***\nORIGIN_SZQTSZ15      -0.3435351  0.0131956   -26.034  &lt; 2e-16 ***\nORIGIN_SZRCSZ01      -1.7104390  0.0141179  -121.154  &lt; 2e-16 ***\nORIGIN_SZRCSZ06      -1.1250727  0.0094909  -118.542  &lt; 2e-16 ***\nORIGIN_SZRVSZ01      -3.0220116  0.0339694   -88.963  &lt; 2e-16 ***\nORIGIN_SZRVSZ02      -3.6040075  0.0297641  -121.086  &lt; 2e-16 ***\nORIGIN_SZRVSZ03      -3.2345594  0.0259149  -124.814  &lt; 2e-16 ***\nORIGIN_SZRVSZ04      -3.6900313  0.0575908   -64.073  &lt; 2e-16 ***\nORIGIN_SZRVSZ05      -2.9527570  0.0178582  -165.344  &lt; 2e-16 ***\nORIGIN_SZSBSZ01       0.0238445  0.0078563     3.035 0.002405 ** \nORIGIN_SZSBSZ02      -0.5780602  0.0093054   -62.121  &lt; 2e-16 ***\nORIGIN_SZSBSZ03       0.8961719  0.0054586   164.175  &lt; 2e-16 ***\nORIGIN_SZSBSZ04       0.8421798  0.0061888   136.080  &lt; 2e-16 ***\nORIGIN_SZSBSZ05      -0.1682984  0.0078342   -21.482  &lt; 2e-16 ***\nORIGIN_SZSBSZ06      -1.1482701  0.0196421   -58.460  &lt; 2e-16 ***\nORIGIN_SZSBSZ07      -0.8830317  0.0160709   -54.946  &lt; 2e-16 ***\nORIGIN_SZSBSZ08      -1.1039492  0.0174602   -63.226  &lt; 2e-16 ***\nORIGIN_SZSBSZ09      -0.5946691  0.0101961   -58.323  &lt; 2e-16 ***\nORIGIN_SZSESZ02       1.1144933  0.0050948   218.749  &lt; 2e-16 ***\nORIGIN_SZSESZ03       1.1058963  0.0049026   225.574  &lt; 2e-16 ***\nORIGIN_SZSESZ04       0.7427975  0.0056948   130.433  &lt; 2e-16 ***\nORIGIN_SZSESZ05      -0.2812684  0.0069596   -40.414  &lt; 2e-16 ***\nORIGIN_SZSESZ06       0.8168315  0.0055800   146.387  &lt; 2e-16 ***\nORIGIN_SZSESZ07      -2.2842043  0.0231232   -98.784  &lt; 2e-16 ***\nORIGIN_SZSGSZ01      -0.7313790  0.0098957   -73.909  &lt; 2e-16 ***\nORIGIN_SZSGSZ02      -1.1185406  0.0110919  -100.843  &lt; 2e-16 ***\nORIGIN_SZSGSZ03       0.1752618  0.0060508    28.965  &lt; 2e-16 ***\nORIGIN_SZSGSZ04       0.3764395  0.0056165    67.023  &lt; 2e-16 ***\nORIGIN_SZSGSZ05      -1.7203916  0.0118945  -144.637  &lt; 2e-16 ***\nORIGIN_SZSGSZ06       0.4630857  0.0052886    87.563  &lt; 2e-16 ***\nORIGIN_SZSGSZ07      -0.7051233  0.0073133   -96.417  &lt; 2e-16 ***\nORIGIN_SZSKSZ01       0.2053928  0.0100710    20.395  &lt; 2e-16 ***\nORIGIN_SZSKSZ02       1.2630428  0.0063490   198.935  &lt; 2e-16 ***\nORIGIN_SZSKSZ03      -0.3035297  0.0096788   -31.360  &lt; 2e-16 ***\nORIGIN_SZSKSZ04      -1.7952886  0.0359225   -49.977  &lt; 2e-16 ***\nORIGIN_SZSKSZ05      -0.3836861  0.0176686   -21.716  &lt; 2e-16 ***\nORIGIN_SZSLSZ01      -2.5916326  0.0348001   -74.472  &lt; 2e-16 ***\nORIGIN_SZSLSZ04      -0.2251549  0.0088517   -25.436  &lt; 2e-16 ***\nORIGIN_SZSRSZ01      -2.9590365  0.0173638  -170.414  &lt; 2e-16 ***\nORIGIN_SZTHSZ01      -1.9639893  0.0570321   -34.437  &lt; 2e-16 ***\nORIGIN_SZTHSZ03      -1.7281304  0.0272797   -63.349  &lt; 2e-16 ***\nORIGIN_SZTHSZ04      -2.7837906  0.0343179   -81.118  &lt; 2e-16 ***\nORIGIN_SZTHSZ06      -2.1800693  0.0205491  -106.091  &lt; 2e-16 ***\nORIGIN_SZTMSZ01       0.8228136  0.0066824   123.131  &lt; 2e-16 ***\nORIGIN_SZTMSZ02       2.3174781  0.0044978   515.243  &lt; 2e-16 ***\nORIGIN_SZTMSZ03       1.7061757  0.0048615   350.957  &lt; 2e-16 ***\nORIGIN_SZTMSZ04       1.2407899  0.0058389   212.504  &lt; 2e-16 ***\nORIGIN_SZTMSZ05      -0.1000526  0.0124079    -8.064 7.41e-16 ***\nORIGIN_SZTNSZ01      -2.0347519  0.0139596  -145.760  &lt; 2e-16 ***\nORIGIN_SZTNSZ02      -1.8682671  0.0107901  -173.146  &lt; 2e-16 ***\nORIGIN_SZTNSZ03      -2.1737183  0.0146759  -148.115  &lt; 2e-16 ***\nORIGIN_SZTNSZ04      -0.5006452  0.0081501   -61.428  &lt; 2e-16 ***\nORIGIN_SZTPSZ01      -0.6722487  0.0075606   -88.914  &lt; 2e-16 ***\nORIGIN_SZTPSZ02       0.4552916  0.0050191    90.711  &lt; 2e-16 ***\nORIGIN_SZTPSZ03      -0.7865781  0.0072250  -108.869  &lt; 2e-16 ***\nORIGIN_SZTPSZ04      -0.7049044  0.0066456  -106.071  &lt; 2e-16 ***\nORIGIN_SZTPSZ05      -0.5574925  0.0070366   -79.227  &lt; 2e-16 ***\nORIGIN_SZTPSZ06      -0.4247282  0.0068709   -61.815  &lt; 2e-16 ***\nORIGIN_SZTPSZ07      -0.2846984  0.0071030   -40.081  &lt; 2e-16 ***\nORIGIN_SZTPSZ08      -1.0898051  0.0110046   -99.031  &lt; 2e-16 ***\nORIGIN_SZTPSZ09      -0.8092746  0.0079160  -102.232  &lt; 2e-16 ***\nORIGIN_SZTPSZ10      -0.9332072  0.0086809  -107.502  &lt; 2e-16 ***\nORIGIN_SZTPSZ11      -0.0421981  0.0064343    -6.558 5.44e-11 ***\nORIGIN_SZTPSZ12      -0.6330081  0.0078324   -80.819  &lt; 2e-16 ***\nORIGIN_SZTSSZ01      -1.7650409  0.0517357   -34.116  &lt; 2e-16 ***\nORIGIN_SZTSSZ02       1.1707267  0.0094178   124.310  &lt; 2e-16 ***\nORIGIN_SZTSSZ03       0.6581679  0.0095894    68.635  &lt; 2e-16 ***\nORIGIN_SZTSSZ04       0.8736493  0.0104965    83.233  &lt; 2e-16 ***\nORIGIN_SZTSSZ05       0.0957248  0.0178709     5.356 8.49e-08 ***\nORIGIN_SZTSSZ06       1.7581609  0.0206810    85.013  &lt; 2e-16 ***\nORIGIN_SZWCSZ01       0.8097950  0.0105622    76.669  &lt; 2e-16 ***\nORIGIN_SZWCSZ02      -1.9966163  0.0345747   -57.748  &lt; 2e-16 ***\nORIGIN_SZWCSZ03      -5.0687420  0.1474971   -34.365  &lt; 2e-16 ***\nORIGIN_SZWDSZ01       1.4926003  0.0047216   316.124  &lt; 2e-16 ***\nORIGIN_SZWDSZ02       0.9916597  0.0055755   177.859  &lt; 2e-16 ***\nORIGIN_SZWDSZ03       1.5918065  0.0052180   305.062  &lt; 2e-16 ***\nORIGIN_SZWDSZ04       1.3717152  0.0060516   226.669  &lt; 2e-16 ***\nORIGIN_SZWDSZ05       0.6700111  0.0062287   107.569  &lt; 2e-16 ***\nORIGIN_SZWDSZ06       0.8115996  0.0060947   133.165  &lt; 2e-16 ***\nORIGIN_SZWDSZ07      -0.6488914  0.0093567   -69.351  &lt; 2e-16 ***\nORIGIN_SZWDSZ08      -0.3610234  0.0096440   -37.435  &lt; 2e-16 ***\nORIGIN_SZWDSZ09       1.4445461  0.0052279   276.317  &lt; 2e-16 ***\nORIGIN_SZYSSZ01      -0.2039272  0.0069548   -29.322  &lt; 2e-16 ***\nORIGIN_SZYSSZ02       0.8707707  0.0058957   147.697  &lt; 2e-16 ***\nORIGIN_SZYSSZ03       1.8348842  0.0050377   364.231  &lt; 2e-16 ***\nORIGIN_SZYSSZ04       1.0780641  0.0052960   203.564  &lt; 2e-16 ***\nORIGIN_SZYSSZ05       0.3222765  0.0069700    46.237  &lt; 2e-16 ***\nORIGIN_SZYSSZ06      -0.4424689  0.0124866   -35.435  &lt; 2e-16 ***\nORIGIN_SZYSSZ07      -1.0267883  0.0155821   -65.895  &lt; 2e-16 ***\nORIGIN_SZYSSZ08       0.1833117  0.0070935    25.842  &lt; 2e-16 ***\nORIGIN_SZYSSZ09       1.0766070  0.0050451   213.396  &lt; 2e-16 ***\nlog(DESTIN_AGE25_64)  0.0295428  0.0001051   280.998  &lt; 2e-16 ***\nlog(dist)            -1.7024691  0.0004625 -3681.042  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance: 12983718  on 13993  degrees of freedom\nAIC: 13068835\n\nNumber of Fisher Scoring iterations: 6\n\n\nWe can examine how the constraints hold for destinations:\n\ncalc_Rsquared(orcSIM$data$TRIPS, orcSIM$fitted.values)\n\n[1] 0.4029115"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#destination-constrained",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#destination-constrained",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "7.7. Destination Constrained",
    "text": "7.7. Destination Constrained\nIn this section, we will fit a destination constrained SIM by using the following code:\n\ndecSIM &lt;- glm(formula = TRIPS ~\n                DESTIN_SZ +\n                log(ORIGIN_AGE25_64) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\n\nsummary(decSIM)\n\n\nCall:\nglm(formula = TRIPS ~ DESTIN_SZ + log(ORIGIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)          19.4822997  0.0050784  3836.298  &lt; 2e-16 ***\nDESTIN_SZAMSZ02       0.1263056  0.0049743    25.392  &lt; 2e-16 ***\nDESTIN_SZAMSZ03       0.0421788  0.0049859     8.460  &lt; 2e-16 ***\nDESTIN_SZAMSZ04      -1.1668479  0.0074254  -157.143  &lt; 2e-16 ***\nDESTIN_SZAMSZ05      -1.2586639  0.0075854  -165.931  &lt; 2e-16 ***\nDESTIN_SZAMSZ06      -1.1414791  0.0073474  -155.359  &lt; 2e-16 ***\nDESTIN_SZAMSZ07      -1.5565804  0.0109476  -142.185  &lt; 2e-16 ***\nDESTIN_SZAMSZ08      -0.3990754  0.0074159   -53.813  &lt; 2e-16 ***\nDESTIN_SZAMSZ09      -1.0109118  0.0076802  -131.626  &lt; 2e-16 ***\nDESTIN_SZAMSZ10       0.0159285  0.0051765     3.077  0.00209 ** \nDESTIN_SZAMSZ11      -0.3653273  0.0094866   -38.510  &lt; 2e-16 ***\nDESTIN_SZAMSZ12       0.5297606  0.0053243    99.500  &lt; 2e-16 ***\nDESTIN_SZBDSZ01       1.0394822  0.0044226   235.037  &lt; 2e-16 ***\nDESTIN_SZBDSZ02       0.1956964  0.0059564    32.855  &lt; 2e-16 ***\nDESTIN_SZBDSZ03       0.3209267  0.0053718    59.742  &lt; 2e-16 ***\nDESTIN_SZBDSZ04       1.2429874  0.0043104   288.370  &lt; 2e-16 ***\nDESTIN_SZBDSZ05       0.8535842  0.0046360   184.122  &lt; 2e-16 ***\nDESTIN_SZBDSZ06       0.5181443  0.0053736    96.423  &lt; 2e-16 ***\nDESTIN_SZBDSZ07      -0.5849371  0.0110468   -52.951  &lt; 2e-16 ***\nDESTIN_SZBDSZ08      -1.2871050  0.0128623  -100.068  &lt; 2e-16 ***\nDESTIN_SZBKSZ01      -1.0633560  0.0077771  -136.730  &lt; 2e-16 ***\nDESTIN_SZBKSZ02      -0.4065316  0.0066712   -60.938  &lt; 2e-16 ***\nDESTIN_SZBKSZ03      -0.6815674  0.0066509  -102.477  &lt; 2e-16 ***\nDESTIN_SZBKSZ04      -0.4185485  0.0058306   -71.785  &lt; 2e-16 ***\nDESTIN_SZBKSZ05      -0.8887654  0.0073867  -120.319  &lt; 2e-16 ***\nDESTIN_SZBKSZ06      -0.9436078  0.0068625  -137.501  &lt; 2e-16 ***\nDESTIN_SZBKSZ07      -0.0067325  0.0048408    -1.391  0.16430    \nDESTIN_SZBKSZ08      -1.2680903  0.0079177  -160.160  &lt; 2e-16 ***\nDESTIN_SZBKSZ09      -0.0350151  0.0054287    -6.450 1.12e-10 ***\nDESTIN_SZBLSZ01      -0.3045203  0.0081978   -37.146  &lt; 2e-16 ***\nDESTIN_SZBLSZ02       0.6432424  0.0074449    86.400  &lt; 2e-16 ***\nDESTIN_SZBLSZ03       1.9595113  0.0084705   231.333  &lt; 2e-16 ***\nDESTIN_SZBLSZ04       0.0149756  0.0172081     0.870  0.38415    \nDESTIN_SZBMSZ01      -0.0378127  0.0055294    -6.838 8.00e-12 ***\nDESTIN_SZBMSZ02      -0.8458055  0.0054043  -156.505  &lt; 2e-16 ***\nDESTIN_SZBMSZ03      -1.1334399  0.0063720  -177.878  &lt; 2e-16 ***\nDESTIN_SZBMSZ04      -1.1164759  0.0057743  -193.353  &lt; 2e-16 ***\nDESTIN_SZBMSZ05      -1.1078742  0.0078703  -140.766  &lt; 2e-16 ***\nDESTIN_SZBMSZ06      -2.2787234  0.0155126  -146.895  &lt; 2e-16 ***\nDESTIN_SZBMSZ07      -0.2739089  0.0051924   -52.752  &lt; 2e-16 ***\nDESTIN_SZBMSZ08      -1.6825978  0.0071842  -234.209  &lt; 2e-16 ***\nDESTIN_SZBMSZ09      -3.0047801  0.0159980  -187.823  &lt; 2e-16 ***\nDESTIN_SZBMSZ10      -2.2232689  0.0096907  -229.423  &lt; 2e-16 ***\nDESTIN_SZBMSZ11      -1.9657136  0.0086445  -227.394  &lt; 2e-16 ***\nDESTIN_SZBMSZ12      -1.5359286  0.0089658  -171.310  &lt; 2e-16 ***\nDESTIN_SZBMSZ13      -0.5657561  0.0059960   -94.355  &lt; 2e-16 ***\nDESTIN_SZBMSZ14      -1.6904858  0.0084858  -199.214  &lt; 2e-16 ***\nDESTIN_SZBMSZ15      -1.5268383  0.0079959  -190.953  &lt; 2e-16 ***\nDESTIN_SZBMSZ16      -2.2045600  0.0130872  -168.452  &lt; 2e-16 ***\nDESTIN_SZBMSZ17      -2.2992381  0.0184895  -124.353  &lt; 2e-16 ***\nDESTIN_SZBPSZ01      -0.8549497  0.0065168  -131.191  &lt; 2e-16 ***\nDESTIN_SZBPSZ02      -1.7470549  0.0095751  -182.457  &lt; 2e-16 ***\nDESTIN_SZBPSZ03      -1.4015145  0.0090888  -154.203  &lt; 2e-16 ***\nDESTIN_SZBPSZ04      -0.5250632  0.0066496   -78.962  &lt; 2e-16 ***\nDESTIN_SZBPSZ05       0.3413171  0.0046404    73.553  &lt; 2e-16 ***\nDESTIN_SZBPSZ06      -0.8569188  0.0090795   -94.380  &lt; 2e-16 ***\nDESTIN_SZBPSZ07      -0.0751284  0.0089704    -8.375  &lt; 2e-16 ***\nDESTIN_SZBSSZ01       0.1015228  0.0055735    18.215  &lt; 2e-16 ***\nDESTIN_SZBSSZ02      -0.7066412  0.0063845  -110.682  &lt; 2e-16 ***\nDESTIN_SZBSSZ03       0.1622730  0.0046689    34.756  &lt; 2e-16 ***\nDESTIN_SZBTSZ01       0.5470615  0.0047984   114.009  &lt; 2e-16 ***\nDESTIN_SZBTSZ02      -0.1393371  0.0078266   -17.803  &lt; 2e-16 ***\nDESTIN_SZBTSZ03       0.1474771  0.0059428    24.816  &lt; 2e-16 ***\nDESTIN_SZBTSZ04      -1.2857827  0.0122000  -105.392  &lt; 2e-16 ***\nDESTIN_SZBTSZ05      -0.2629188  0.0081769   -32.154  &lt; 2e-16 ***\nDESTIN_SZBTSZ06      -0.8319920  0.0081401  -102.209  &lt; 2e-16 ***\nDESTIN_SZBTSZ07      -1.8829448  0.0121227  -155.324  &lt; 2e-16 ***\nDESTIN_SZBTSZ08      -1.5732123  0.0116752  -134.748  &lt; 2e-16 ***\nDESTIN_SZCBSZ01      -3.5334327  0.3333510   -10.600  &lt; 2e-16 ***\nDESTIN_SZCCSZ01      -0.2129306  0.0093782   -22.705  &lt; 2e-16 ***\nDESTIN_SZCHSZ01      -0.1494972  0.0113078   -13.221  &lt; 2e-16 ***\nDESTIN_SZCHSZ02       0.0041774  0.0063195     0.661  0.50860    \nDESTIN_SZCHSZ03       2.5565450  0.0046495   549.857  &lt; 2e-16 ***\nDESTIN_SZCKSZ01       0.0489719  0.0053801     9.102  &lt; 2e-16 ***\nDESTIN_SZCKSZ02      -0.3548993  0.0060671   -58.496  &lt; 2e-16 ***\nDESTIN_SZCKSZ03       0.5386351  0.0044913   119.928  &lt; 2e-16 ***\nDESTIN_SZCKSZ04      -0.4425512  0.0073837   -59.936  &lt; 2e-16 ***\nDESTIN_SZCKSZ05      -0.4092591  0.0077267   -52.967  &lt; 2e-16 ***\nDESTIN_SZCKSZ06       0.2207041  0.0074252    29.724  &lt; 2e-16 ***\nDESTIN_SZCLSZ01       0.2851460  0.0052362    54.457  &lt; 2e-16 ***\nDESTIN_SZCLSZ02      -1.9270528  0.0147688  -130.482  &lt; 2e-16 ***\nDESTIN_SZCLSZ03      -0.6266521  0.0086780   -72.212  &lt; 2e-16 ***\nDESTIN_SZCLSZ04      -0.1335581  0.0054216   -24.634  &lt; 2e-16 ***\nDESTIN_SZCLSZ05      -0.8912963  0.0096015   -92.829  &lt; 2e-16 ***\nDESTIN_SZCLSZ06       0.1781234  0.0048150    36.993  &lt; 2e-16 ***\nDESTIN_SZCLSZ07      -0.5609619  0.0062277   -90.075  &lt; 2e-16 ***\nDESTIN_SZCLSZ08      -0.3875308  0.0068390   -56.665  &lt; 2e-16 ***\nDESTIN_SZCLSZ09       0.2539453  0.0072623    34.968  &lt; 2e-16 ***\nDESTIN_SZDTSZ02      -2.5036295  0.0373421   -67.046  &lt; 2e-16 ***\nDESTIN_SZDTSZ03      -0.8956407  0.0149971   -59.721  &lt; 2e-16 ***\nDESTIN_SZDTSZ13      -1.6562176  0.0175441   -94.403  &lt; 2e-16 ***\nDESTIN_SZGLSZ01      -0.2716152  0.0056553   -48.029  &lt; 2e-16 ***\nDESTIN_SZGLSZ02      -0.1735665  0.0055548   -31.246  &lt; 2e-16 ***\nDESTIN_SZGLSZ03       0.7029507  0.0044934   156.441  &lt; 2e-16 ***\nDESTIN_SZGLSZ04       0.5788027  0.0045449   127.351  &lt; 2e-16 ***\nDESTIN_SZGLSZ05       0.6865291  0.0045131   152.118  &lt; 2e-16 ***\nDESTIN_SZHGSZ01       0.3275950  0.0043866    74.681  &lt; 2e-16 ***\nDESTIN_SZHGSZ02      -0.6326974  0.0063517   -99.610  &lt; 2e-16 ***\nDESTIN_SZHGSZ03      -1.0597982  0.0073914  -143.382  &lt; 2e-16 ***\nDESTIN_SZHGSZ04      -0.2267013  0.0052178   -43.448  &lt; 2e-16 ***\nDESTIN_SZHGSZ05      -0.3063050  0.0055452   -55.238  &lt; 2e-16 ***\nDESTIN_SZHGSZ06      -0.7483961  0.0065544  -114.182  &lt; 2e-16 ***\nDESTIN_SZHGSZ07       0.1096958  0.0051309    21.379  &lt; 2e-16 ***\nDESTIN_SZHGSZ08      -0.1374201  0.0056692   -24.240  &lt; 2e-16 ***\nDESTIN_SZHGSZ09       0.0775400  0.0060230    12.874  &lt; 2e-16 ***\nDESTIN_SZHGSZ10      -3.3017475  0.0289292  -114.132  &lt; 2e-16 ***\nDESTIN_SZJESZ01      -0.0489065  0.0057246    -8.543  &lt; 2e-16 ***\nDESTIN_SZJESZ02      -0.5101614  0.0060074   -84.921  &lt; 2e-16 ***\nDESTIN_SZJESZ03      -0.5328921  0.0064129   -83.097  &lt; 2e-16 ***\nDESTIN_SZJESZ04      -0.7348953  0.0082249   -89.351  &lt; 2e-16 ***\nDESTIN_SZJESZ05      -1.0864570  0.0111740   -97.231  &lt; 2e-16 ***\nDESTIN_SZJESZ06       0.2407920  0.0046801    51.451  &lt; 2e-16 ***\nDESTIN_SZJESZ07      -1.1523093  0.0090103  -127.888  &lt; 2e-16 ***\nDESTIN_SZJESZ08      -0.4627356  0.0094529   -48.952  &lt; 2e-16 ***\nDESTIN_SZJESZ09       0.0528616  0.0068126     7.759 8.53e-15 ***\nDESTIN_SZJESZ10       1.0240660  0.0084045   121.848  &lt; 2e-16 ***\nDESTIN_SZJESZ11       0.7875517  0.0076251   103.284  &lt; 2e-16 ***\nDESTIN_SZJWSZ01      -0.1533418  0.0076198   -20.124  &lt; 2e-16 ***\nDESTIN_SZJWSZ02      -0.0011019  0.0059389    -0.186  0.85280    \nDESTIN_SZJWSZ03       0.9063789  0.0046747   193.892  &lt; 2e-16 ***\nDESTIN_SZJWSZ04       0.7019286  0.0049743   141.112  &lt; 2e-16 ***\nDESTIN_SZJWSZ05      -0.5197057  0.0072971   -71.220  &lt; 2e-16 ***\nDESTIN_SZJWSZ06       0.3350986  0.0061171    54.780  &lt; 2e-16 ***\nDESTIN_SZJWSZ07      -0.5961960  0.0328336   -18.158  &lt; 2e-16 ***\nDESTIN_SZJWSZ08       0.8054662  0.0056006   143.819  &lt; 2e-16 ***\nDESTIN_SZJWSZ09       1.5860146  0.0040282   393.723  &lt; 2e-16 ***\nDESTIN_SZKLSZ01      -0.6500838  0.0063560  -102.279  &lt; 2e-16 ***\nDESTIN_SZKLSZ02      -0.7039434  0.0064465  -109.197  &lt; 2e-16 ***\nDESTIN_SZKLSZ03      -1.1972384  0.0075577  -158.413  &lt; 2e-16 ***\nDESTIN_SZKLSZ04      -1.7172228  0.0097573  -175.993  &lt; 2e-16 ***\nDESTIN_SZKLSZ05      -0.6042386  0.0093730   -64.466  &lt; 2e-16 ***\nDESTIN_SZKLSZ06      -3.0201496  0.0389503   -77.539  &lt; 2e-16 ***\nDESTIN_SZKLSZ07      -1.1522413  0.0076607  -150.409  &lt; 2e-16 ***\nDESTIN_SZKLSZ08      -0.6977825  0.0057610  -121.122  &lt; 2e-16 ***\nDESTIN_SZLKSZ01      -0.6895952  0.0268661   -25.668  &lt; 2e-16 ***\nDESTIN_SZMDSZ01      -0.7155951  0.0228203   -31.358  &lt; 2e-16 ***\nDESTIN_SZMDSZ02      -0.8153643  0.0123003   -66.288  &lt; 2e-16 ***\nDESTIN_SZMDSZ03      -2.7745226  0.0301326   -92.077  &lt; 2e-16 ***\nDESTIN_SZMPSZ01      -0.5492095  0.0087198   -62.984  &lt; 2e-16 ***\nDESTIN_SZMPSZ02      -0.6104744  0.0069346   -88.033  &lt; 2e-16 ***\nDESTIN_SZMPSZ03       0.2775047  0.0054964    50.489  &lt; 2e-16 ***\nDESTIN_SZMUSZ02      -2.6322870  0.0214943  -122.464  &lt; 2e-16 ***\nDESTIN_SZNTSZ01      -4.0762008  0.0531046   -76.758  &lt; 2e-16 ***\nDESTIN_SZNTSZ02      -1.9765545  0.0125659  -157.296  &lt; 2e-16 ***\nDESTIN_SZNTSZ03      -1.4563069  0.0085433  -170.462  &lt; 2e-16 ***\nDESTIN_SZNTSZ05      -2.0125598  0.0270737   -74.336  &lt; 2e-16 ***\nDESTIN_SZNTSZ06      -3.0145357  0.0504986   -59.695  &lt; 2e-16 ***\nDESTIN_SZNVSZ01      -0.4693625  0.0053866   -87.135  &lt; 2e-16 ***\nDESTIN_SZNVSZ02      -0.4525631  0.0060428   -74.894  &lt; 2e-16 ***\nDESTIN_SZNVSZ03      -0.4821492  0.0064725   -74.492  &lt; 2e-16 ***\nDESTIN_SZNVSZ04      -1.8929756  0.0128397  -147.432  &lt; 2e-16 ***\nDESTIN_SZNVSZ05      -1.4501752  0.0099737  -145.400  &lt; 2e-16 ***\nDESTIN_SZPGSZ01      -1.2305867  0.0174321   -70.593  &lt; 2e-16 ***\nDESTIN_SZPGSZ02      -0.8232919  0.0080153  -102.715  &lt; 2e-16 ***\nDESTIN_SZPGSZ03       0.2138480  0.0050850    42.054  &lt; 2e-16 ***\nDESTIN_SZPGSZ04       0.1045757  0.0053579    19.518  &lt; 2e-16 ***\nDESTIN_SZPGSZ05      -0.7542450  0.0088883   -84.858  &lt; 2e-16 ***\nDESTIN_SZPLSZ01      -0.0098642  0.0080428    -1.226  0.22003    \nDESTIN_SZPLSZ02      -1.2630412  0.0152594   -82.771  &lt; 2e-16 ***\nDESTIN_SZPLSZ03      -0.1554479  0.0108611   -14.312  &lt; 2e-16 ***\nDESTIN_SZPLSZ04      -1.5505819  0.0114768  -135.105  &lt; 2e-16 ***\nDESTIN_SZPLSZ05      -0.2417805  0.0130391   -18.543  &lt; 2e-16 ***\nDESTIN_SZPNSZ01       0.7926715  0.0073628   107.659  &lt; 2e-16 ***\nDESTIN_SZPNSZ02       2.1914920  0.0073537   298.013  &lt; 2e-16 ***\nDESTIN_SZPNSZ03       1.0246845  0.0086874   117.951  &lt; 2e-16 ***\nDESTIN_SZPNSZ04       2.5522612  0.0091789   278.057  &lt; 2e-16 ***\nDESTIN_SZPNSZ05       1.7995301  0.0138562   129.872  &lt; 2e-16 ***\nDESTIN_SZPRSZ01      -0.6576686  0.0096037   -68.481  &lt; 2e-16 ***\nDESTIN_SZPRSZ02       0.3113532  0.0059851    52.021  &lt; 2e-16 ***\nDESTIN_SZPRSZ03       0.9255296  0.0044779   206.687  &lt; 2e-16 ***\nDESTIN_SZPRSZ04      -0.0028578  0.0093218    -0.307  0.75917    \nDESTIN_SZPRSZ05       0.2457863  0.0058261    42.187  &lt; 2e-16 ***\nDESTIN_SZPRSZ06       0.3692137  0.0064542    57.205  &lt; 2e-16 ***\nDESTIN_SZPRSZ07      -1.6733306  0.0138440  -120.871  &lt; 2e-16 ***\nDESTIN_SZPRSZ08      -0.2221048  0.0074846   -29.675  &lt; 2e-16 ***\nDESTIN_SZQTSZ01      -1.0185488  0.0093179  -109.311  &lt; 2e-16 ***\nDESTIN_SZQTSZ02      -1.2802688  0.0081670  -156.761  &lt; 2e-16 ***\nDESTIN_SZQTSZ03      -1.3322708  0.0079106  -168.415  &lt; 2e-16 ***\nDESTIN_SZQTSZ04      -1.1803631  0.0077366  -152.568  &lt; 2e-16 ***\nDESTIN_SZQTSZ05      -1.2215818  0.0072829  -167.734  &lt; 2e-16 ***\nDESTIN_SZQTSZ06      -1.3213145  0.0074858  -176.509  &lt; 2e-16 ***\nDESTIN_SZQTSZ07      -1.6426306  0.0123347  -133.171  &lt; 2e-16 ***\nDESTIN_SZQTSZ08      -0.2224169  0.0058405   -38.082  &lt; 2e-16 ***\nDESTIN_SZQTSZ09      -0.8142678  0.0069796  -116.665  &lt; 2e-16 ***\nDESTIN_SZQTSZ10      -0.1090496  0.0062573   -17.428  &lt; 2e-16 ***\nDESTIN_SZQTSZ11      -0.0108951  0.0061145    -1.782  0.07477 .  \nDESTIN_SZQTSZ12      -0.8582515  0.0090243   -95.105  &lt; 2e-16 ***\nDESTIN_SZQTSZ13       0.1834409  0.0065231    28.122  &lt; 2e-16 ***\nDESTIN_SZQTSZ14       0.1994454  0.0073615    27.093  &lt; 2e-16 ***\nDESTIN_SZQTSZ15       0.6740197  0.0088699    75.990  &lt; 2e-16 ***\nDESTIN_SZRCSZ01      -0.7746427  0.0079375   -97.593  &lt; 2e-16 ***\nDESTIN_SZRCSZ06      -1.4394098  0.0209931   -68.566  &lt; 2e-16 ***\nDESTIN_SZRVSZ01      -2.6060495  0.0175759  -148.274  &lt; 2e-16 ***\nDESTIN_SZRVSZ02      -2.5823769  0.0354706   -72.803  &lt; 2e-16 ***\nDESTIN_SZRVSZ03      -2.5890601  0.0152644  -169.614  &lt; 2e-16 ***\nDESTIN_SZRVSZ04      -2.2277482  0.0165661  -134.477  &lt; 2e-16 ***\nDESTIN_SZRVSZ05      -3.8610445  0.0298251  -129.456  &lt; 2e-16 ***\nDESTIN_SZSBSZ01      -1.2035529  0.0103954  -115.777  &lt; 2e-16 ***\nDESTIN_SZSBSZ02      -1.0267199  0.0085239  -120.452  &lt; 2e-16 ***\nDESTIN_SZSBSZ03       0.5977382  0.0050336   118.750  &lt; 2e-16 ***\nDESTIN_SZSBSZ04       0.5362769  0.0060573    88.534  &lt; 2e-16 ***\nDESTIN_SZSBSZ05      -1.0440525  0.0089622  -116.495  &lt; 2e-16 ***\nDESTIN_SZSBSZ06      -1.3939595  0.0246679   -56.509  &lt; 2e-16 ***\nDESTIN_SZSBSZ07       0.1029116  0.0235414     4.372 1.23e-05 ***\nDESTIN_SZSBSZ08       1.3564902  0.0060529   224.105  &lt; 2e-16 ***\nDESTIN_SZSBSZ09       0.4573712  0.0056585    80.829  &lt; 2e-16 ***\nDESTIN_SZSESZ02      -0.1553609  0.0056716   -27.393  &lt; 2e-16 ***\nDESTIN_SZSESZ03       0.5412776  0.0043801   123.576  &lt; 2e-16 ***\nDESTIN_SZSESZ04      -0.6382091  0.0065411   -97.568  &lt; 2e-16 ***\nDESTIN_SZSESZ05      -0.3332093  0.0055002   -60.581  &lt; 2e-16 ***\nDESTIN_SZSESZ06      -0.3085951  0.0072340   -42.659  &lt; 2e-16 ***\nDESTIN_SZSESZ07      -2.6237684  0.0245753  -106.764  &lt; 2e-16 ***\nDESTIN_SZSGSZ01      -0.1062372  0.0066634   -15.943  &lt; 2e-16 ***\nDESTIN_SZSGSZ02      -0.0475568  0.0058908    -8.073 6.85e-16 ***\nDESTIN_SZSGSZ03      -0.2118402  0.0055056   -38.477  &lt; 2e-16 ***\nDESTIN_SZSGSZ04      -0.1099618  0.0054841   -20.051  &lt; 2e-16 ***\nDESTIN_SZSGSZ05      -2.1556963  0.0113821  -189.394  &lt; 2e-16 ***\nDESTIN_SZSGSZ06       0.4416352  0.0043842   100.734  &lt; 2e-16 ***\nDESTIN_SZSGSZ07      -0.3949335  0.0059250   -66.655  &lt; 2e-16 ***\nDESTIN_SZSISZ01      -1.2847094  0.0288610   -44.514  &lt; 2e-16 ***\nDESTIN_SZSKSZ01       0.3089834  0.0082924    37.261  &lt; 2e-16 ***\nDESTIN_SZSKSZ02       1.4139309  0.0059981   235.729  &lt; 2e-16 ***\nDESTIN_SZSKSZ03       0.2427688  0.0067373    36.034  &lt; 2e-16 ***\nDESTIN_SZSKSZ04      -0.2527488  0.0161286   -15.671  &lt; 2e-16 ***\nDESTIN_SZSKSZ05       0.6046051  0.0122766    49.249  &lt; 2e-16 ***\nDESTIN_SZSLSZ01      -0.3927387  0.0099790   -39.356  &lt; 2e-16 ***\nDESTIN_SZSLSZ04      -0.5942110  0.0086225   -68.914  &lt; 2e-16 ***\nDESTIN_SZSRSZ01      -2.6855766  0.0138707  -193.615  &lt; 2e-16 ***\nDESTIN_SZTHSZ01      -3.2750084  0.0402668   -81.333  &lt; 2e-16 ***\nDESTIN_SZTHSZ03      -1.7964408  0.0261810   -68.616  &lt; 2e-16 ***\nDESTIN_SZTHSZ04      -2.6323994  0.0241831  -108.853  &lt; 2e-16 ***\nDESTIN_SZTHSZ06      -1.9444390  0.0166052  -117.098  &lt; 2e-16 ***\nDESTIN_SZTMSZ01       0.3856054  0.0063086    61.123  &lt; 2e-16 ***\nDESTIN_SZTMSZ02       1.8586526  0.0039229   473.790  &lt; 2e-16 ***\nDESTIN_SZTMSZ03       1.2601385  0.0044018   286.278  &lt; 2e-16 ***\nDESTIN_SZTMSZ04       1.5884327  0.0043362   366.316  &lt; 2e-16 ***\nDESTIN_SZTMSZ05       1.0377553  0.0063271   164.018  &lt; 2e-16 ***\nDESTIN_SZTNSZ01      -0.9954275  0.0080345  -123.895  &lt; 2e-16 ***\nDESTIN_SZTNSZ02      -2.1032696  0.0109228  -192.557  &lt; 2e-16 ***\nDESTIN_SZTNSZ03      -2.0044892  0.0129215  -155.128  &lt; 2e-16 ***\nDESTIN_SZTNSZ04      -0.9750326  0.0081677  -119.377  &lt; 2e-16 ***\nDESTIN_SZTPSZ01      -0.7788383  0.0068769  -113.254  &lt; 2e-16 ***\nDESTIN_SZTPSZ02       0.2866080  0.0042843    66.898  &lt; 2e-16 ***\nDESTIN_SZTPSZ03      -0.8749841  0.0065470  -133.646  &lt; 2e-16 ***\nDESTIN_SZTPSZ04      -1.6852792  0.0081488  -206.812  &lt; 2e-16 ***\nDESTIN_SZTPSZ05      -1.3721346  0.0068230  -201.104  &lt; 2e-16 ***\nDESTIN_SZTPSZ06      -0.7832133  0.0069164  -113.239  &lt; 2e-16 ***\nDESTIN_SZTPSZ07      -2.3109126  0.0130830  -176.635  &lt; 2e-16 ***\nDESTIN_SZTPSZ08      -1.6406531  0.0104897  -156.406  &lt; 2e-16 ***\nDESTIN_SZTPSZ09      -0.5636273  0.0076848   -73.343  &lt; 2e-16 ***\nDESTIN_SZTPSZ10      -1.5640843  0.0099984  -156.433  &lt; 2e-16 ***\nDESTIN_SZTPSZ11      -0.3700482  0.0059834   -61.846  &lt; 2e-16 ***\nDESTIN_SZTPSZ12      -0.8828228  0.0072302  -122.102  &lt; 2e-16 ***\nDESTIN_SZTSSZ01       0.3529526  0.0221887    15.907  &lt; 2e-16 ***\nDESTIN_SZTSSZ02       1.0265792  0.0153515    66.871  &lt; 2e-16 ***\nDESTIN_SZTSSZ03       1.9647347  0.0092388   212.662  &lt; 2e-16 ***\nDESTIN_SZTSSZ04       1.8649836  0.0089976   207.275  &lt; 2e-16 ***\nDESTIN_SZTSSZ05       2.8437058  0.0085738   331.673  &lt; 2e-16 ***\nDESTIN_SZTSSZ06       3.4238870  0.0161304   212.263  &lt; 2e-16 ***\nDESTIN_SZWCSZ01       2.9550693  0.0051690   571.689  &lt; 2e-16 ***\nDESTIN_SZWCSZ02      -0.8214103  0.0129213   -63.570  &lt; 2e-16 ***\nDESTIN_SZWCSZ03      -1.7393427  0.0347472   -50.057  &lt; 2e-16 ***\nDESTIN_SZWDSZ01       1.3424417  0.0039957   335.972  &lt; 2e-16 ***\nDESTIN_SZWDSZ02      -0.2103694  0.0068601   -30.666  &lt; 2e-16 ***\nDESTIN_SZWDSZ03       0.8268551  0.0051363   160.983  &lt; 2e-16 ***\nDESTIN_SZWDSZ04      -0.0643997  0.0079076    -8.144 3.82e-16 ***\nDESTIN_SZWDSZ05       0.0451985  0.0075732     5.968 2.40e-09 ***\nDESTIN_SZWDSZ06       0.6981330  0.0051936   134.423  &lt; 2e-16 ***\nDESTIN_SZWDSZ07      -0.0403233  0.0067749    -5.952 2.65e-09 ***\nDESTIN_SZWDSZ08       0.2850631  0.0069225    41.179  &lt; 2e-16 ***\nDESTIN_SZWDSZ09       1.3016106  0.0050365   258.433  &lt; 2e-16 ***\nDESTIN_SZYSSZ01       0.7598564  0.0044144   172.133  &lt; 2e-16 ***\nDESTIN_SZYSSZ02       0.2648061  0.0058239    45.469  &lt; 2e-16 ***\nDESTIN_SZYSSZ03      -0.0412163  0.0068337    -6.031 1.63e-09 ***\nDESTIN_SZYSSZ04      -0.0561054  0.0060829    -9.223  &lt; 2e-16 ***\nDESTIN_SZYSSZ05      -0.9970159  0.0121827   -81.839  &lt; 2e-16 ***\nDESTIN_SZYSSZ06      -1.3808376  0.0125738  -109.819  &lt; 2e-16 ***\nDESTIN_SZYSSZ07      -0.7128364  0.0165296   -43.125  &lt; 2e-16 ***\nDESTIN_SZYSSZ08       0.9409510  0.0045886   205.064  &lt; 2e-16 ***\nDESTIN_SZYSSZ09       0.3738436  0.0047971    77.930  &lt; 2e-16 ***\nlog(ORIGIN_AGE25_64)  0.1928847  0.0001667  1157.214  &lt; 2e-16 ***\nlog(dist)            -1.7828141  0.0004794 -3718.501  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance: 12319763  on 13992  degrees of freedom\nAIC: 12404881\n\nNumber of Fisher Scoring iterations: 7\n\n\nWe can examine how the constraints hold for destinations:\n\ncalc_Rsquared(decSIM$data$TRIPS, decSIM$fitted.values)\n\n[1] 0.496166"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#doubly-constrained",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#doubly-constrained",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "7.8. Doubly Constrained",
    "text": "7.8. Doubly Constrained\nIn this section, we will fit a doubly constrained SIM by using the following code:\n\ndbcSIM &lt;- glm(formula = TRIPS ~\n                ORIGIN_SZ +\n                DESTIN_SZ +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\n\nsummary(dbcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(dist), family = poisson(link = \"log\"), \n    data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)     21.9587595  0.0066831  3285.715  &lt; 2e-16 ***\nORIGIN_SZAMSZ02  0.4778050  0.0054127    88.275  &lt; 2e-16 ***\nORIGIN_SZAMSZ03  0.2895973  0.0055517    52.163  &lt; 2e-16 ***\nORIGIN_SZAMSZ04 -0.2628080  0.0060720   -43.282  &lt; 2e-16 ***\nORIGIN_SZAMSZ05 -0.2631404  0.0069008   -38.132  &lt; 2e-16 ***\nORIGIN_SZAMSZ06  0.1722337  0.0062028    27.767  &lt; 2e-16 ***\nORIGIN_SZAMSZ07 -0.9883200  0.0111224   -88.859  &lt; 2e-16 ***\nORIGIN_SZAMSZ08 -0.4052821  0.0104095   -38.934  &lt; 2e-16 ***\nORIGIN_SZAMSZ09  0.0356290  0.0064816     5.497 3.86e-08 ***\nORIGIN_SZAMSZ10  0.4815569  0.0055521    86.735  &lt; 2e-16 ***\nORIGIN_SZAMSZ11 -1.4440079  0.0146079   -98.851  &lt; 2e-16 ***\nORIGIN_SZAMSZ12 -1.7862677  0.0128071  -139.475  &lt; 2e-16 ***\nORIGIN_SZBDSZ01  0.8653749  0.0054381   159.132  &lt; 2e-16 ***\nORIGIN_SZBDSZ02  0.0841000  0.0062834    13.385  &lt; 2e-16 ***\nORIGIN_SZBDSZ03  0.3158343  0.0057510    54.918  &lt; 2e-16 ***\nORIGIN_SZBDSZ04  1.4556701  0.0049986   291.215  &lt; 2e-16 ***\nORIGIN_SZBDSZ05  0.6363125  0.0057193   111.257  &lt; 2e-16 ***\nORIGIN_SZBDSZ06  0.6749341  0.0058650   115.078  &lt; 2e-16 ***\nORIGIN_SZBDSZ07 -1.2176407  0.0113698  -107.095  &lt; 2e-16 ***\nORIGIN_SZBDSZ08 -0.9803580  0.0105604   -92.833  &lt; 2e-16 ***\nORIGIN_SZBKSZ01 -0.2919642  0.0080763   -36.151  &lt; 2e-16 ***\nORIGIN_SZBKSZ02  0.4609570  0.0067997    67.791  &lt; 2e-16 ***\nORIGIN_SZBKSZ03  0.6273448  0.0065989    95.068  &lt; 2e-16 ***\nORIGIN_SZBKSZ04 -0.2499063  0.0076555   -32.644  &lt; 2e-16 ***\nORIGIN_SZBKSZ05 -0.2628428  0.0078905   -33.311  &lt; 2e-16 ***\nORIGIN_SZBKSZ06 -0.2174034  0.0075134   -28.936  &lt; 2e-16 ***\nORIGIN_SZBKSZ07  0.7094093  0.0058574   121.114  &lt; 2e-16 ***\nORIGIN_SZBKSZ08 -0.1614362  0.0067626   -23.872  &lt; 2e-16 ***\nORIGIN_SZBKSZ09 -0.2739085  0.0072969   -37.537  &lt; 2e-16 ***\nORIGIN_SZBLSZ01 -2.4281074  0.0181172  -134.022  &lt; 2e-16 ***\nORIGIN_SZBLSZ02 -2.7305447  0.0219341  -124.489  &lt; 2e-16 ***\nORIGIN_SZBLSZ03 -3.3071431  0.0540398   -61.198  &lt; 2e-16 ***\nORIGIN_SZBLSZ04 -2.4550671  0.0263946   -93.014  &lt; 2e-16 ***\nORIGIN_SZBMSZ01  0.1198976  0.0065964    18.176  &lt; 2e-16 ***\nORIGIN_SZBMSZ02 -1.3908667  0.0083230  -167.112  &lt; 2e-16 ***\nORIGIN_SZBMSZ03 -0.6999122  0.0069754  -100.339  &lt; 2e-16 ***\nORIGIN_SZBMSZ04 -0.2691159  0.0066184   -40.662  &lt; 2e-16 ***\nORIGIN_SZBMSZ05 -2.6163780  0.0190989  -136.991  &lt; 2e-16 ***\nORIGIN_SZBMSZ06 -2.9729956  0.0197182  -150.774  &lt; 2e-16 ***\nORIGIN_SZBMSZ07 -0.7309916  0.0072407  -100.956  &lt; 2e-16 ***\nORIGIN_SZBMSZ08 -1.0019514  0.0073169  -136.936  &lt; 2e-16 ***\nORIGIN_SZBMSZ09 -1.3667460  0.0105325  -129.764  &lt; 2e-16 ***\nORIGIN_SZBMSZ10 -1.6907268  0.0106687  -158.476  &lt; 2e-16 ***\nORIGIN_SZBMSZ11 -1.2288802  0.0082919  -148.202  &lt; 2e-16 ***\nORIGIN_SZBMSZ12 -1.6517767  0.0115101  -143.507  &lt; 2e-16 ***\nORIGIN_SZBMSZ13 -0.7251351  0.0075289   -96.314  &lt; 2e-16 ***\nORIGIN_SZBMSZ14 -1.1534912  0.0082629  -139.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ15 -0.5476774  0.0075710   -72.339  &lt; 2e-16 ***\nORIGIN_SZBMSZ16 -1.5195034  0.0111459  -136.329  &lt; 2e-16 ***\nORIGIN_SZBMSZ17 -1.6026767  0.0184419   -86.904  &lt; 2e-16 ***\nORIGIN_SZBPSZ01  0.5571291  0.0071866    77.523  &lt; 2e-16 ***\nORIGIN_SZBPSZ02  0.0523197  0.0082259     6.360 2.01e-10 ***\nORIGIN_SZBPSZ03  0.2942047  0.0080482    36.555  &lt; 2e-16 ***\nORIGIN_SZBPSZ04  0.6246296  0.0065878    94.816  &lt; 2e-16 ***\nORIGIN_SZBPSZ05  0.8663708  0.0060852   142.372  &lt; 2e-16 ***\nORIGIN_SZBPSZ06 -0.9896182  0.0109551   -90.334  &lt; 2e-16 ***\nORIGIN_SZBPSZ07 -0.5219250  0.0101830   -51.255  &lt; 2e-16 ***\nORIGIN_SZBSSZ01  0.3299588  0.0066440    49.663  &lt; 2e-16 ***\nORIGIN_SZBSSZ02  0.2851357  0.0057077    49.956  &lt; 2e-16 ***\nORIGIN_SZBSSZ03 -0.2084740  0.0063364   -32.901  &lt; 2e-16 ***\nORIGIN_SZBTSZ01  0.1425664  0.0071103    20.051  &lt; 2e-16 ***\nORIGIN_SZBTSZ02 -0.5591999  0.0093616   -59.733  &lt; 2e-16 ***\nORIGIN_SZBTSZ03 -0.3648190  0.0081677   -44.666  &lt; 2e-16 ***\nORIGIN_SZBTSZ04 -1.4555078  0.0120138  -121.152  &lt; 2e-16 ***\nORIGIN_SZBTSZ05 -0.8635510  0.0133848   -64.517  &lt; 2e-16 ***\nORIGIN_SZBTSZ06 -1.1383111  0.0106421  -106.963  &lt; 2e-16 ***\nORIGIN_SZBTSZ07 -2.3477669  0.0160858  -145.953  &lt; 2e-16 ***\nORIGIN_SZBTSZ08 -1.2918779  0.0124862  -103.464  &lt; 2e-16 ***\nORIGIN_SZCBSZ01 -3.3713588  0.0578683   -58.259  &lt; 2e-16 ***\nORIGIN_SZCCSZ01 -0.6029242  0.0153385   -39.308  &lt; 2e-16 ***\nORIGIN_SZCHSZ01 -0.7641380  0.0135100   -56.561  &lt; 2e-16 ***\nORIGIN_SZCHSZ02 -0.8400736  0.0101951   -82.400  &lt; 2e-16 ***\nORIGIN_SZCHSZ03  1.2753127  0.0072576   175.720  &lt; 2e-16 ***\nORIGIN_SZCKSZ01  0.2470943  0.0067135    36.806  &lt; 2e-16 ***\nORIGIN_SZCKSZ02  0.5793581  0.0070498    82.181  &lt; 2e-16 ***\nORIGIN_SZCKSZ03  1.0795767  0.0060642   178.025  &lt; 2e-16 ***\nORIGIN_SZCKSZ04  1.4947920  0.0063122   236.808  &lt; 2e-16 ***\nORIGIN_SZCKSZ05  0.7457580  0.0074071   100.681  &lt; 2e-16 ***\nORIGIN_SZCKSZ06  0.5760952  0.0094861    60.730  &lt; 2e-16 ***\nORIGIN_SZCLSZ01 -0.9061335  0.0098617   -91.884  &lt; 2e-16 ***\nORIGIN_SZCLSZ02 -1.7609479  0.0156124  -112.791  &lt; 2e-16 ***\nORIGIN_SZCLSZ03 -1.0081325  0.0095171  -105.929  &lt; 2e-16 ***\nORIGIN_SZCLSZ04  0.6181200  0.0057953   106.659  &lt; 2e-16 ***\nORIGIN_SZCLSZ05 -2.0462335  0.0168934  -121.127  &lt; 2e-16 ***\nORIGIN_SZCLSZ06  0.7902389  0.0055680   141.924  &lt; 2e-16 ***\nORIGIN_SZCLSZ07 -0.5472929  0.0071001   -77.082  &lt; 2e-16 ***\nORIGIN_SZCLSZ08 -0.2197650  0.0077460   -28.372  &lt; 2e-16 ***\nORIGIN_SZCLSZ09 -1.8175782  0.0195989   -92.739  &lt; 2e-16 ***\nORIGIN_SZDTSZ02 -3.7618796  0.0872098   -43.136  &lt; 2e-16 ***\nORIGIN_SZDTSZ03 -3.4514766  0.0840812   -41.049  &lt; 2e-16 ***\nORIGIN_SZDTSZ13 -3.0627578  0.0352485   -86.891  &lt; 2e-16 ***\nORIGIN_SZGLSZ01 -1.8055929  0.0111938  -161.303  &lt; 2e-16 ***\nORIGIN_SZGLSZ02 -0.1588829  0.0061413   -25.871  &lt; 2e-16 ***\nORIGIN_SZGLSZ03 -0.2508524  0.0064276   -39.027  &lt; 2e-16 ***\nORIGIN_SZGLSZ04  0.8819358  0.0051993   169.627  &lt; 2e-16 ***\nORIGIN_SZGLSZ05  0.6062778  0.0053735   112.828  &lt; 2e-16 ***\nORIGIN_SZHGSZ01  0.3841503  0.0056776    67.660  &lt; 2e-16 ***\nORIGIN_SZHGSZ02  0.3962330  0.0057579    68.815  &lt; 2e-16 ***\nORIGIN_SZHGSZ03  0.2159531  0.0061671    35.017  &lt; 2e-16 ***\nORIGIN_SZHGSZ04  0.7831941  0.0052216   149.992  &lt; 2e-16 ***\nORIGIN_SZHGSZ05  1.1741558  0.0051799   226.677  &lt; 2e-16 ***\nORIGIN_SZHGSZ06 -0.1891403  0.0065556   -28.852  &lt; 2e-16 ***\nORIGIN_SZHGSZ07  0.3105421  0.0057186    54.304  &lt; 2e-16 ***\nORIGIN_SZHGSZ08 -0.0766364  0.0063474   -12.074  &lt; 2e-16 ***\nORIGIN_SZHGSZ09 -1.2211107  0.0101434  -120.384  &lt; 2e-16 ***\nORIGIN_SZHGSZ10 -3.4844709  0.0504793   -69.028  &lt; 2e-16 ***\nORIGIN_SZJESZ01  0.4916496  0.0063444    77.493  &lt; 2e-16 ***\nORIGIN_SZJESZ02  0.1343893  0.0063762    21.077  &lt; 2e-16 ***\nORIGIN_SZJESZ03 -0.2761723  0.0068085   -40.563  &lt; 2e-16 ***\nORIGIN_SZJESZ04 -1.5932744  0.0121402  -131.240  &lt; 2e-16 ***\nORIGIN_SZJESZ05 -2.3041311  0.0160245  -143.788  &lt; 2e-16 ***\nORIGIN_SZJESZ06  0.2811076  0.0062495    44.981  &lt; 2e-16 ***\nORIGIN_SZJESZ07 -1.9413956  0.0136276  -142.461  &lt; 2e-16 ***\nORIGIN_SZJESZ08 -1.3315645  0.0143168   -93.007  &lt; 2e-16 ***\nORIGIN_SZJESZ09  0.4418314  0.0069208    63.841  &lt; 2e-16 ***\nORIGIN_SZJESZ10 -1.5551555  0.0236523   -65.751  &lt; 2e-16 ***\nORIGIN_SZJESZ11 -1.8888230  0.0224630   -84.086  &lt; 2e-16 ***\nORIGIN_SZJWSZ01  0.2564586  0.0084699    30.279  &lt; 2e-16 ***\nORIGIN_SZJWSZ02  0.6899398  0.0061751   111.729  &lt; 2e-16 ***\nORIGIN_SZJWSZ03  1.4761229  0.0057392   257.198  &lt; 2e-16 ***\nORIGIN_SZJWSZ04  0.5701272  0.0065749    86.713  &lt; 2e-16 ***\nORIGIN_SZJWSZ05 -2.1253657  0.0150769  -140.968  &lt; 2e-16 ***\nORIGIN_SZJWSZ06 -1.5307265  0.0131906  -116.047  &lt; 2e-16 ***\nORIGIN_SZJWSZ07 -2.8801618  0.0360772   -79.833  &lt; 2e-16 ***\nORIGIN_SZJWSZ08  1.4428820  0.0059638   241.938  &lt; 2e-16 ***\nORIGIN_SZJWSZ09  1.8968475  0.0055649   340.860  &lt; 2e-16 ***\nORIGIN_SZKLSZ01  0.1116580  0.0059844    18.658  &lt; 2e-16 ***\nORIGIN_SZKLSZ02 -0.9618787  0.0077344  -124.364  &lt; 2e-16 ***\nORIGIN_SZKLSZ03 -0.7070626  0.0070275  -100.613  &lt; 2e-16 ***\nORIGIN_SZKLSZ04 -2.2742765  0.0139991  -162.459  &lt; 2e-16 ***\nORIGIN_SZKLSZ05 -1.1907262  0.0123719   -96.244  &lt; 2e-16 ***\nORIGIN_SZKLSZ06 -5.9774897  0.1857994   -32.172  &lt; 2e-16 ***\nORIGIN_SZKLSZ07 -1.4258369  0.0103083  -138.320  &lt; 2e-16 ***\nORIGIN_SZKLSZ08 -1.7625888  0.0116107  -151.808  &lt; 2e-16 ***\nORIGIN_SZLKSZ01 -2.0541388  0.0448216   -45.829  &lt; 2e-16 ***\nORIGIN_SZMDSZ01 -0.8571117  0.0321054   -26.697  &lt; 2e-16 ***\nORIGIN_SZMDSZ02 -0.6034597  0.0120724   -49.987  &lt; 2e-16 ***\nORIGIN_SZMDSZ03 -2.1681163  0.0201078  -107.825  &lt; 2e-16 ***\nORIGIN_SZMPSZ01 -0.9331562  0.0096218   -96.984  &lt; 2e-16 ***\nORIGIN_SZMPSZ02 -1.0268229  0.0081379  -126.178  &lt; 2e-16 ***\nORIGIN_SZMPSZ03  0.0054001  0.0066875     0.807 0.419385    \nORIGIN_SZMUSZ02 -3.6269863  0.1105492   -32.809  &lt; 2e-16 ***\nORIGIN_SZNTSZ01 -3.0593717  0.0399843   -76.514  &lt; 2e-16 ***\nORIGIN_SZNTSZ02 -3.3331415  0.0251754  -132.397  &lt; 2e-16 ***\nORIGIN_SZNTSZ03 -0.8351522  0.0090372   -92.413  &lt; 2e-16 ***\nORIGIN_SZNTSZ05 -4.2082472  0.0583343   -72.140  &lt; 2e-16 ***\nORIGIN_SZNTSZ06 -3.8549296  0.0593793   -64.920  &lt; 2e-16 ***\nORIGIN_SZNVSZ01  0.2789069  0.0056024    49.784  &lt; 2e-16 ***\nORIGIN_SZNVSZ02 -0.6036857  0.0077126   -78.273  &lt; 2e-16 ***\nORIGIN_SZNVSZ03 -1.0072683  0.0092678  -108.685  &lt; 2e-16 ***\nORIGIN_SZNVSZ04 -0.8723996  0.0101399   -86.037  &lt; 2e-16 ***\nORIGIN_SZNVSZ05 -2.1552928  0.0183064  -117.734  &lt; 2e-16 ***\nORIGIN_SZPGSZ01  0.0520607  0.0157846     3.298 0.000973 ***\nORIGIN_SZPGSZ02 -0.3481687  0.0089328   -38.976  &lt; 2e-16 ***\nORIGIN_SZPGSZ03  0.9095292  0.0058835   154.590  &lt; 2e-16 ***\nORIGIN_SZPGSZ04  1.3653717  0.0054727   249.489  &lt; 2e-16 ***\nORIGIN_SZPGSZ05  0.3762720  0.0073841    50.957  &lt; 2e-16 ***\nORIGIN_SZPLSZ01 -0.9142754  0.0136552   -66.954  &lt; 2e-16 ***\nORIGIN_SZPLSZ02 -1.0987582  0.0175891   -62.468  &lt; 2e-16 ***\nORIGIN_SZPLSZ03 -2.3427113  0.0474176   -49.406  &lt; 2e-16 ***\nORIGIN_SZPLSZ04 -2.9140779  0.0374458   -77.821  &lt; 2e-16 ***\nORIGIN_SZPLSZ05 -2.2381965  0.0261572   -85.567  &lt; 2e-16 ***\nORIGIN_SZPNSZ01  0.9659006  0.0075177   128.484  &lt; 2e-16 ***\nORIGIN_SZPNSZ02 -0.0158348  0.0143869    -1.101 0.271053    \nORIGIN_SZPNSZ03 -2.1837321  0.0224396   -97.316  &lt; 2e-16 ***\nORIGIN_SZPNSZ04 -3.2481509  0.0370762   -87.608  &lt; 2e-16 ***\nORIGIN_SZPNSZ05 -2.0450679  0.0328165   -62.318  &lt; 2e-16 ***\nORIGIN_SZPRSZ01 -0.6701245  0.0141567   -47.336  &lt; 2e-16 ***\nORIGIN_SZPRSZ02  0.7931907  0.0058079   136.570  &lt; 2e-16 ***\nORIGIN_SZPRSZ03  0.4249094  0.0058610    72.498  &lt; 2e-16 ***\nORIGIN_SZPRSZ04 -0.8529967  0.0090997   -93.739  &lt; 2e-16 ***\nORIGIN_SZPRSZ05  0.7865479  0.0055282   142.278  &lt; 2e-16 ***\nORIGIN_SZPRSZ06 -1.3303664  0.0134512   -98.903  &lt; 2e-16 ***\nORIGIN_SZPRSZ07 -3.0458370  0.0181514  -167.802  &lt; 2e-16 ***\nORIGIN_SZPRSZ08 -0.5342399  0.0075966   -70.327  &lt; 2e-16 ***\nORIGIN_SZQTSZ01 -0.2548930  0.0086485   -29.473  &lt; 2e-16 ***\nORIGIN_SZQTSZ02 -0.8662439  0.0076549  -113.162  &lt; 2e-16 ***\nORIGIN_SZQTSZ03 -0.0890168  0.0072455   -12.286  &lt; 2e-16 ***\nORIGIN_SZQTSZ04 -1.4634370  0.0089384  -163.724  &lt; 2e-16 ***\nORIGIN_SZQTSZ05 -0.6535669  0.0077612   -84.210  &lt; 2e-16 ***\nORIGIN_SZQTSZ06 -0.8275765  0.0081835  -101.128  &lt; 2e-16 ***\nORIGIN_SZQTSZ07 -1.5369800  0.0112808  -136.248  &lt; 2e-16 ***\nORIGIN_SZQTSZ08 -0.4437979  0.0075302   -58.936  &lt; 2e-16 ***\nORIGIN_SZQTSZ09 -0.8184934  0.0083589   -97.918  &lt; 2e-16 ***\nORIGIN_SZQTSZ10 -0.6906597  0.0080980   -85.288  &lt; 2e-16 ***\nORIGIN_SZQTSZ11 -2.3251162  0.0154191  -150.795  &lt; 2e-16 ***\nORIGIN_SZQTSZ12 -3.0442790  0.0208985  -145.670  &lt; 2e-16 ***\nORIGIN_SZQTSZ13 -0.7241013  0.0093441   -77.493  &lt; 2e-16 ***\nORIGIN_SZQTSZ14 -1.8225351  0.0138207  -131.870  &lt; 2e-16 ***\nORIGIN_SZQTSZ15 -0.8720806  0.0138589   -62.926  &lt; 2e-16 ***\nORIGIN_SZRCSZ01 -1.8063415  0.0144295  -125.184  &lt; 2e-16 ***\nORIGIN_SZRCSZ06 -0.5370905  0.0101573   -52.877  &lt; 2e-16 ***\nORIGIN_SZRVSZ01 -2.7426167  0.0341386   -80.338  &lt; 2e-16 ***\nORIGIN_SZRVSZ02 -3.0827269  0.0302299  -101.976  &lt; 2e-16 ***\nORIGIN_SZRVSZ03 -2.9133853  0.0262543  -110.968  &lt; 2e-16 ***\nORIGIN_SZRVSZ04 -3.4220022  0.0582209   -58.776  &lt; 2e-16 ***\nORIGIN_SZRVSZ05 -2.6206257  0.0197470  -132.710  &lt; 2e-16 ***\nORIGIN_SZSBSZ01  0.1010337  0.0085117    11.870  &lt; 2e-16 ***\nORIGIN_SZSBSZ02 -0.8810456  0.0098244   -89.680  &lt; 2e-16 ***\nORIGIN_SZSBSZ03  0.8303668  0.0063009   131.785  &lt; 2e-16 ***\nORIGIN_SZSBSZ04  0.3489128  0.0071456    48.829  &lt; 2e-16 ***\nORIGIN_SZSBSZ05 -0.3182914  0.0085560   -37.201  &lt; 2e-16 ***\nORIGIN_SZSBSZ06 -0.9074308  0.0200035   -45.364  &lt; 2e-16 ***\nORIGIN_SZSBSZ07 -0.2217124  0.0167188   -13.261  &lt; 2e-16 ***\nORIGIN_SZSBSZ08 -1.3007367  0.0178771   -72.760  &lt; 2e-16 ***\nORIGIN_SZSBSZ09 -0.9813703  0.0107885   -90.965  &lt; 2e-16 ***\nORIGIN_SZSESZ02  1.1283424  0.0054209   208.146  &lt; 2e-16 ***\nORIGIN_SZSESZ03  1.2389996  0.0051926   238.610  &lt; 2e-16 ***\nORIGIN_SZSESZ04  0.7535119  0.0060371   124.814  &lt; 2e-16 ***\nORIGIN_SZSESZ05 -0.2347978  0.0071482   -32.847  &lt; 2e-16 ***\nORIGIN_SZSESZ06  0.9520620  0.0057572   165.368  &lt; 2e-16 ***\nORIGIN_SZSESZ07 -2.4296685  0.0231677  -104.873  &lt; 2e-16 ***\nORIGIN_SZSGSZ01 -0.6995899  0.0099969   -69.980  &lt; 2e-16 ***\nORIGIN_SZSGSZ02 -1.2602157  0.0111471  -113.053  &lt; 2e-16 ***\nORIGIN_SZSGSZ03  0.0725860  0.0061970    11.713  &lt; 2e-16 ***\nORIGIN_SZSGSZ04  0.2738315  0.0057524    47.603  &lt; 2e-16 ***\nORIGIN_SZSGSZ05 -2.0207710  0.0119838  -168.625  &lt; 2e-16 ***\nORIGIN_SZSGSZ06  0.4885608  0.0054646    89.404  &lt; 2e-16 ***\nORIGIN_SZSGSZ07 -0.8892155  0.0075074  -118.445  &lt; 2e-16 ***\nORIGIN_SZSKSZ01 -0.3682754  0.0108025   -34.092  &lt; 2e-16 ***\nORIGIN_SZSKSZ02  1.1826086  0.0071388   165.659  &lt; 2e-16 ***\nORIGIN_SZSKSZ03 -0.3230177  0.0101683   -31.767  &lt; 2e-16 ***\nORIGIN_SZSKSZ04 -1.8504236  0.0362400   -51.060  &lt; 2e-16 ***\nORIGIN_SZSKSZ05 -0.2759035  0.0185157   -14.901  &lt; 2e-16 ***\nORIGIN_SZSLSZ01 -2.2757902  0.0348766   -65.253  &lt; 2e-16 ***\nORIGIN_SZSLSZ04 -0.0899820  0.0090356    -9.959  &lt; 2e-16 ***\nORIGIN_SZSRSZ01 -2.1460151  0.0187871  -114.228  &lt; 2e-16 ***\nORIGIN_SZTHSZ01 -2.6851549  0.0571841   -46.956  &lt; 2e-16 ***\nORIGIN_SZTHSZ03 -1.0121495  0.0275551   -36.732  &lt; 2e-16 ***\nORIGIN_SZTHSZ04 -2.6129645  0.0345167   -75.701  &lt; 2e-16 ***\nORIGIN_SZTHSZ06 -1.7229100  0.0208134   -82.779  &lt; 2e-16 ***\nORIGIN_SZTMSZ01 -0.2254986  0.0070312   -32.071  &lt; 2e-16 ***\nORIGIN_SZTMSZ02  1.7271575  0.0049219   350.914  &lt; 2e-16 ***\nORIGIN_SZTMSZ03  0.9891319  0.0052266   189.250  &lt; 2e-16 ***\nORIGIN_SZTMSZ04  0.2018090  0.0062114    32.490  &lt; 2e-16 ***\nORIGIN_SZTMSZ05 -1.1882870  0.0125842   -94.427  &lt; 2e-16 ***\nORIGIN_SZTNSZ01 -1.6122620  0.0141911  -113.611  &lt; 2e-16 ***\nORIGIN_SZTNSZ02 -1.5630967  0.0112227  -139.280  &lt; 2e-16 ***\nORIGIN_SZTNSZ03 -2.0739538  0.0149298  -138.914  &lt; 2e-16 ***\nORIGIN_SZTNSZ04 -0.2816960  0.0085295   -33.026  &lt; 2e-16 ***\nORIGIN_SZTPSZ01 -0.7822239  0.0077901  -100.412  &lt; 2e-16 ***\nORIGIN_SZTPSZ02  0.5735478  0.0053042   108.131  &lt; 2e-16 ***\nORIGIN_SZTPSZ03 -0.8748650  0.0074202  -117.903  &lt; 2e-16 ***\nORIGIN_SZTPSZ04 -0.8537831  0.0069792  -122.332  &lt; 2e-16 ***\nORIGIN_SZTPSZ05 -0.5581114  0.0077012   -72.471  &lt; 2e-16 ***\nORIGIN_SZTPSZ06  0.0262001  0.0075241     3.482 0.000497 ***\nORIGIN_SZTPSZ07 -0.5969952  0.0074272   -80.380  &lt; 2e-16 ***\nORIGIN_SZTPSZ08 -1.0537959  0.0111297   -94.683  &lt; 2e-16 ***\nORIGIN_SZTPSZ09 -0.9588508  0.0081314  -117.920  &lt; 2e-16 ***\nORIGIN_SZTPSZ10 -1.1177249  0.0089403  -125.021  &lt; 2e-16 ***\nORIGIN_SZTPSZ11 -0.2799677  0.0067135   -41.702  &lt; 2e-16 ***\nORIGIN_SZTPSZ12 -0.8898871  0.0080215  -110.938  &lt; 2e-16 ***\nORIGIN_SZTSSZ01 -2.6146463  0.0521606   -50.127  &lt; 2e-16 ***\nORIGIN_SZTSSZ02  0.1682588  0.0119965    14.026  &lt; 2e-16 ***\nORIGIN_SZTSSZ03  0.2587653  0.0123809    20.900  &lt; 2e-16 ***\nORIGIN_SZTSSZ04 -0.5473825  0.0135215   -40.482  &lt; 2e-16 ***\nORIGIN_SZTSSZ05 -0.9967379  0.0206068   -48.369  &lt; 2e-16 ***\nORIGIN_SZTSSZ06  0.4933147  0.0229597    21.486  &lt; 2e-16 ***\nORIGIN_SZWCSZ01  1.2524706  0.0111133   112.700  &lt; 2e-16 ***\nORIGIN_SZWCSZ02 -2.8544820  0.0347805   -82.071  &lt; 2e-16 ***\nORIGIN_SZWCSZ03 -5.1277334  0.1475585   -34.751  &lt; 2e-16 ***\nORIGIN_SZWDSZ01  1.4725308  0.0056496   260.645  &lt; 2e-16 ***\nORIGIN_SZWDSZ02  0.1571680  0.0064909    24.214  &lt; 2e-16 ***\nORIGIN_SZWDSZ03  1.2584097  0.0061471   204.717  &lt; 2e-16 ***\nORIGIN_SZWDSZ04  0.8578765  0.0069277   123.833  &lt; 2e-16 ***\nORIGIN_SZWDSZ05  0.1702728  0.0069687    24.434  &lt; 2e-16 ***\nORIGIN_SZWDSZ06  0.1736910  0.0069507    24.989  &lt; 2e-16 ***\nORIGIN_SZWDSZ07 -1.5610176  0.0100803  -154.859  &lt; 2e-16 ***\nORIGIN_SZWDSZ08 -0.9490906  0.0102047   -93.005  &lt; 2e-16 ***\nORIGIN_SZWDSZ09  1.2107011  0.0062294   194.354  &lt; 2e-16 ***\nORIGIN_SZYSSZ01 -0.3324158  0.0074537   -44.598  &lt; 2e-16 ***\nORIGIN_SZYSSZ02  0.8177113  0.0066108   123.693  &lt; 2e-16 ***\nORIGIN_SZYSSZ03  1.6751777  0.0058470   286.503  &lt; 2e-16 ***\nORIGIN_SZYSSZ04  0.8130044  0.0059025   137.738  &lt; 2e-16 ***\nORIGIN_SZYSSZ05  0.3678420  0.0072431    50.785  &lt; 2e-16 ***\nORIGIN_SZYSSZ06 -0.6024384  0.0126722   -47.540  &lt; 2e-16 ***\nORIGIN_SZYSSZ07 -0.7631918  0.0158478   -48.157  &lt; 2e-16 ***\nORIGIN_SZYSSZ08  0.2141930  0.0076154    28.126  &lt; 2e-16 ***\nORIGIN_SZYSSZ09  1.0809368  0.0057973   186.457  &lt; 2e-16 ***\nDESTIN_SZAMSZ02  0.0761304  0.0051207    14.867  &lt; 2e-16 ***\nDESTIN_SZAMSZ03  0.0143394  0.0050755     2.825 0.004724 ** \nDESTIN_SZAMSZ04 -1.2516780  0.0074947  -167.008  &lt; 2e-16 ***\nDESTIN_SZAMSZ05 -1.2312375  0.0076598  -160.741  &lt; 2e-16 ***\nDESTIN_SZAMSZ06 -1.0333412  0.0075283  -137.261  &lt; 2e-16 ***\nDESTIN_SZAMSZ07 -1.5338249  0.0110036  -139.392  &lt; 2e-16 ***\nDESTIN_SZAMSZ08 -0.3751665  0.0075358   -49.784  &lt; 2e-16 ***\nDESTIN_SZAMSZ09 -1.1633493  0.0077556  -150.001  &lt; 2e-16 ***\nDESTIN_SZAMSZ10  0.1017717  0.0053151    19.148  &lt; 2e-16 ***\nDESTIN_SZAMSZ11 -0.8840362  0.0097007   -91.131  &lt; 2e-16 ***\nDESTIN_SZAMSZ12  0.1628123  0.0055220    29.484  &lt; 2e-16 ***\nDESTIN_SZBDSZ01  1.0040794  0.0047922   209.523  &lt; 2e-16 ***\nDESTIN_SZBDSZ02 -0.2478149  0.0063085   -39.283  &lt; 2e-16 ***\nDESTIN_SZBDSZ03  0.1016088  0.0057420    17.696  &lt; 2e-16 ***\nDESTIN_SZBDSZ04  1.1082928  0.0047747   232.116  &lt; 2e-16 ***\nDESTIN_SZBDSZ05  0.8737933  0.0050593   172.712  &lt; 2e-16 ***\nDESTIN_SZBDSZ06  0.2897032  0.0058244    49.740  &lt; 2e-16 ***\nDESTIN_SZBDSZ07 -0.9026193  0.0113656   -79.416  &lt; 2e-16 ***\nDESTIN_SZBDSZ08 -1.7063577  0.0131234  -130.024  &lt; 2e-16 ***\nDESTIN_SZBKSZ01 -1.3892839  0.0083307  -166.767  &lt; 2e-16 ***\nDESTIN_SZBKSZ02 -0.6661120  0.0073464   -90.672  &lt; 2e-16 ***\nDESTIN_SZBKSZ03 -0.9536826  0.0073196  -130.292  &lt; 2e-16 ***\nDESTIN_SZBKSZ04 -0.6655610  0.0065868  -101.044  &lt; 2e-16 ***\nDESTIN_SZBKSZ05 -0.9053119  0.0079264  -114.215  &lt; 2e-16 ***\nDESTIN_SZBKSZ06 -1.2622159  0.0075079  -168.119  &lt; 2e-16 ***\nDESTIN_SZBKSZ07 -0.0423370  0.0056686    -7.469 8.10e-14 ***\nDESTIN_SZBKSZ08 -1.3811240  0.0084985  -162.515  &lt; 2e-16 ***\nDESTIN_SZBKSZ09 -0.0797012  0.0061428   -12.975  &lt; 2e-16 ***\nDESTIN_SZBLSZ01 -0.8859670  0.0088108  -100.555  &lt; 2e-16 ***\nDESTIN_SZBLSZ02  0.1362723  0.0082167    16.585  &lt; 2e-16 ***\nDESTIN_SZBLSZ03  1.2037396  0.0093508   128.732  &lt; 2e-16 ***\nDESTIN_SZBLSZ04 -0.9316219  0.0178080   -52.315  &lt; 2e-16 ***\nDESTIN_SZBMSZ01  0.7188470  0.0061160   117.536  &lt; 2e-16 ***\nDESTIN_SZBMSZ02 -0.0597895  0.0061206    -9.769  &lt; 2e-16 ***\nDESTIN_SZBMSZ03 -0.2427075  0.0069937   -34.704  &lt; 2e-16 ***\nDESTIN_SZBMSZ04 -0.0622494  0.0065569    -9.494  &lt; 2e-16 ***\nDESTIN_SZBMSZ05 -0.2857019  0.0086450   -33.048  &lt; 2e-16 ***\nDESTIN_SZBMSZ06 -1.3486558  0.0158904   -84.872  &lt; 2e-16 ***\nDESTIN_SZBMSZ07  0.4549687  0.0058315    78.020  &lt; 2e-16 ***\nDESTIN_SZBMSZ08 -0.8730268  0.0077814  -112.195  &lt; 2e-16 ***\nDESTIN_SZBMSZ09 -2.0319890  0.0163038  -124.633  &lt; 2e-16 ***\nDESTIN_SZBMSZ10 -1.4319101  0.0102616  -139.541  &lt; 2e-16 ***\nDESTIN_SZBMSZ11 -1.2429176  0.0092250  -134.733  &lt; 2e-16 ***\nDESTIN_SZBMSZ12 -0.8526549  0.0096009   -88.810  &lt; 2e-16 ***\nDESTIN_SZBMSZ13  0.1399907  0.0066885    20.930  &lt; 2e-16 ***\nDESTIN_SZBMSZ14 -1.0103155  0.0091377  -110.566  &lt; 2e-16 ***\nDESTIN_SZBMSZ15 -0.6819769  0.0086179   -79.135  &lt; 2e-16 ***\nDESTIN_SZBMSZ16 -1.4468308  0.0134051  -107.931  &lt; 2e-16 ***\nDESTIN_SZBMSZ17 -1.5312175  0.0186843   -81.952  &lt; 2e-16 ***\nDESTIN_SZBPSZ01 -1.1726725  0.0073257  -160.077  &lt; 2e-16 ***\nDESTIN_SZBPSZ02 -2.1072012  0.0103320  -203.949  &lt; 2e-16 ***\nDESTIN_SZBPSZ03 -1.6944911  0.0098520  -171.995  &lt; 2e-16 ***\nDESTIN_SZBPSZ04 -0.7664610  0.0074458  -102.939  &lt; 2e-16 ***\nDESTIN_SZBPSZ05  0.1358370  0.0056258    24.145  &lt; 2e-16 ***\nDESTIN_SZBPSZ06 -1.2425471  0.0096942  -128.175  &lt; 2e-16 ***\nDESTIN_SZBPSZ07 -0.1666192  0.0094969   -17.545  &lt; 2e-16 ***\nDESTIN_SZBSSZ01  0.3857894  0.0057261    67.374  &lt; 2e-16 ***\nDESTIN_SZBSSZ02 -0.5293265  0.0064886   -81.578  &lt; 2e-16 ***\nDESTIN_SZBSSZ03  0.3909966  0.0048540    80.551  &lt; 2e-16 ***\nDESTIN_SZBTSZ01  0.7114965  0.0054528   130.482  &lt; 2e-16 ***\nDESTIN_SZBTSZ02 -0.0487084  0.0082474    -5.906 3.51e-09 ***\nDESTIN_SZBTSZ03  0.5539032  0.0064423    85.979  &lt; 2e-16 ***\nDESTIN_SZBTSZ04 -0.7120734  0.0128676   -55.339  &lt; 2e-16 ***\nDESTIN_SZBTSZ05  0.2176097  0.0086791    25.073  &lt; 2e-16 ***\nDESTIN_SZBTSZ06 -0.2167084  0.0084925   -25.518  &lt; 2e-16 ***\nDESTIN_SZBTSZ07 -1.4045618  0.0124363  -112.940  &lt; 2e-16 ***\nDESTIN_SZBTSZ08 -0.8213918  0.0120793   -68.000  &lt; 2e-16 ***\nDESTIN_SZCBSZ01 -5.7340877  0.3333916   -17.199  &lt; 2e-16 ***\nDESTIN_SZCCSZ01 -0.0304192  0.0095920    -3.171 0.001518 ** \nDESTIN_SZCHSZ01 -0.2598507  0.0115311   -22.535  &lt; 2e-16 ***\nDESTIN_SZCHSZ02  0.3497750  0.0068334    51.186  &lt; 2e-16 ***\nDESTIN_SZCHSZ03  2.4550172  0.0050883   482.481  &lt; 2e-16 ***\nDESTIN_SZCKSZ01 -0.4691744  0.0063130   -74.319  &lt; 2e-16 ***\nDESTIN_SZCKSZ02 -0.9557084  0.0069331  -137.847  &lt; 2e-16 ***\nDESTIN_SZCKSZ03  0.0442112  0.0057117     7.740 9.91e-15 ***\nDESTIN_SZCKSZ04 -0.8592063  0.0081238  -105.764  &lt; 2e-16 ***\nDESTIN_SZCKSZ05 -1.1745333  0.0087305  -134.532  &lt; 2e-16 ***\nDESTIN_SZCKSZ06 -0.4982877  0.0085514   -58.269  &lt; 2e-16 ***\nDESTIN_SZCLSZ01  0.2665065  0.0059712    44.632  &lt; 2e-16 ***\nDESTIN_SZCLSZ02 -1.9758876  0.0150823  -131.007  &lt; 2e-16 ***\nDESTIN_SZCLSZ03 -0.9051310  0.0091479   -98.944  &lt; 2e-16 ***\nDESTIN_SZCLSZ04 -0.0828732  0.0061559   -13.462  &lt; 2e-16 ***\nDESTIN_SZCLSZ05 -1.1414780  0.0100760  -113.287  &lt; 2e-16 ***\nDESTIN_SZCLSZ06  0.3229402  0.0056269    57.392  &lt; 2e-16 ***\nDESTIN_SZCLSZ07 -0.4833612  0.0069777   -69.272  &lt; 2e-16 ***\nDESTIN_SZCLSZ08 -0.3219670  0.0075615   -42.580  &lt; 2e-16 ***\nDESTIN_SZCLSZ09  0.0564166  0.0080703     6.991 2.74e-12 ***\nDESTIN_SZDTSZ02 -1.6384236  0.0374725   -43.723  &lt; 2e-16 ***\nDESTIN_SZDTSZ03 -0.4021571  0.0152716   -26.334  &lt; 2e-16 ***\nDESTIN_SZDTSZ13 -1.2799441  0.0177095   -72.274  &lt; 2e-16 ***\nDESTIN_SZGLSZ01 -0.0190303  0.0060665    -3.137 0.001707 ** \nDESTIN_SZGLSZ02 -0.0308469  0.0058724    -5.253 1.50e-07 ***\nDESTIN_SZGLSZ03  0.6927638  0.0048456   142.969  &lt; 2e-16 ***\nDESTIN_SZGLSZ04  0.9325848  0.0049183   189.616  &lt; 2e-16 ***\nDESTIN_SZGLSZ05  0.8480056  0.0048801   173.768  &lt; 2e-16 ***\nDESTIN_SZHGSZ01  0.0652969  0.0047795    13.662  &lt; 2e-16 ***\nDESTIN_SZHGSZ02 -0.9498251  0.0066577  -142.667  &lt; 2e-16 ***\nDESTIN_SZHGSZ03 -1.4372499  0.0076387  -188.154  &lt; 2e-16 ***\nDESTIN_SZHGSZ04 -0.5236292  0.0055353   -94.599  &lt; 2e-16 ***\nDESTIN_SZHGSZ05 -0.5420295  0.0058099   -93.295  &lt; 2e-16 ***\nDESTIN_SZHGSZ06 -0.9054730  0.0067581  -133.983  &lt; 2e-16 ***\nDESTIN_SZHGSZ07  0.0215109  0.0054019     3.982 6.83e-05 ***\nDESTIN_SZHGSZ08 -0.0490979  0.0059206    -8.293  &lt; 2e-16 ***\nDESTIN_SZHGSZ09 -0.0711560  0.0062875   -11.317  &lt; 2e-16 ***\nDESTIN_SZHGSZ10 -3.5807154  0.0290642  -123.200  &lt; 2e-16 ***\nDESTIN_SZJESZ01 -0.4023638  0.0065057   -61.848  &lt; 2e-16 ***\nDESTIN_SZJESZ02 -0.7654353  0.0067096  -114.081  &lt; 2e-16 ***\nDESTIN_SZJESZ03 -0.8778812  0.0071238  -123.232  &lt; 2e-16 ***\nDESTIN_SZJESZ04 -1.1998075  0.0088733  -135.215  &lt; 2e-16 ***\nDESTIN_SZJESZ05 -1.5623652  0.0116898  -133.652  &lt; 2e-16 ***\nDESTIN_SZJESZ06  0.2311474  0.0055595    41.577  &lt; 2e-16 ***\nDESTIN_SZJESZ07 -1.2753348  0.0094838  -134.475  &lt; 2e-16 ***\nDESTIN_SZJESZ08 -0.7654533  0.0099306   -77.081  &lt; 2e-16 ***\nDESTIN_SZJESZ09  0.1637628  0.0074164    22.081  &lt; 2e-16 ***\nDESTIN_SZJESZ10  0.7394958  0.0091249    81.041  &lt; 2e-16 ***\nDESTIN_SZJESZ11  0.5157364  0.0086546    59.591  &lt; 2e-16 ***\nDESTIN_SZJWSZ01 -1.0165204  0.0083025  -122.435  &lt; 2e-16 ***\nDESTIN_SZJWSZ02 -0.8530646  0.0067851  -125.727  &lt; 2e-16 ***\nDESTIN_SZJWSZ03  0.5176135  0.0056449    91.695  &lt; 2e-16 ***\nDESTIN_SZJWSZ04  0.3427105  0.0058499    58.584  &lt; 2e-16 ***\nDESTIN_SZJWSZ05 -1.1695940  0.0080069  -146.073  &lt; 2e-16 ***\nDESTIN_SZJWSZ06 -0.7466462  0.0070240  -106.299  &lt; 2e-16 ***\nDESTIN_SZJWSZ07 -3.0124535  0.0333481   -90.334  &lt; 2e-16 ***\nDESTIN_SZJWSZ08 -0.4253502  0.0066584   -63.881  &lt; 2e-16 ***\nDESTIN_SZJWSZ09  0.9428005  0.0053190   177.251  &lt; 2e-16 ***\nDESTIN_SZKLSZ01 -0.2965013  0.0066422   -44.639  &lt; 2e-16 ***\nDESTIN_SZKLSZ02 -0.4921137  0.0067689   -72.702  &lt; 2e-16 ***\nDESTIN_SZKLSZ03 -0.8489213  0.0078294  -108.427  &lt; 2e-16 ***\nDESTIN_SZKLSZ04 -1.2656342  0.0099918  -126.667  &lt; 2e-16 ***\nDESTIN_SZKLSZ05 -0.3570126  0.0096300   -37.073  &lt; 2e-16 ***\nDESTIN_SZKLSZ06 -2.4764906  0.0390868   -63.359  &lt; 2e-16 ***\nDESTIN_SZKLSZ07 -0.7316189  0.0080994   -90.330  &lt; 2e-16 ***\nDESTIN_SZKLSZ08 -0.1115398  0.0061168   -18.235  &lt; 2e-16 ***\nDESTIN_SZLKSZ01 -1.4940710  0.0271518   -55.027  &lt; 2e-16 ***\nDESTIN_SZMDSZ01 -1.6101440  0.0231238   -69.631  &lt; 2e-16 ***\nDESTIN_SZMDSZ02 -0.9339318  0.0126277   -73.959  &lt; 2e-16 ***\nDESTIN_SZMDSZ03 -3.4868547  0.0303657  -114.829  &lt; 2e-16 ***\nDESTIN_SZMPSZ01 -0.4518483  0.0089869   -50.279  &lt; 2e-16 ***\nDESTIN_SZMPSZ02 -0.5868264  0.0073193   -80.176  &lt; 2e-16 ***\nDESTIN_SZMPSZ03  0.4805365  0.0059041    81.391  &lt; 2e-16 ***\nDESTIN_SZMUSZ02 -1.3837581  0.0218713   -63.268  &lt; 2e-16 ***\nDESTIN_SZNTSZ01 -3.0694691  0.0533346   -57.551  &lt; 2e-16 ***\nDESTIN_SZNTSZ02 -1.4992973  0.0130358  -115.014  &lt; 2e-16 ***\nDESTIN_SZNTSZ03 -0.5221236  0.0089923   -58.064  &lt; 2e-16 ***\nDESTIN_SZNTSZ05 -1.9751162  0.0282369   -69.948  &lt; 2e-16 ***\nDESTIN_SZNTSZ06 -3.9959411  0.0511214   -78.166  &lt; 2e-16 ***\nDESTIN_SZNVSZ01 -0.1126966  0.0057077   -19.745  &lt; 2e-16 ***\nDESTIN_SZNVSZ02 -0.0259250  0.0064427    -4.024 5.72e-05 ***\nDESTIN_SZNVSZ03 -0.0123214  0.0067692    -1.820 0.068725 .  \nDESTIN_SZNVSZ04 -1.3371298  0.0130261  -102.650  &lt; 2e-16 ***\nDESTIN_SZNVSZ05 -0.9686333  0.0101539   -95.395  &lt; 2e-16 ***\nDESTIN_SZPGSZ01 -1.1798309  0.0180543   -65.349  &lt; 2e-16 ***\nDESTIN_SZPGSZ02 -1.3289737  0.0085335  -155.736  &lt; 2e-16 ***\nDESTIN_SZPGSZ03 -0.1661373  0.0055166   -30.116  &lt; 2e-16 ***\nDESTIN_SZPGSZ04 -0.3046408  0.0058469   -52.103  &lt; 2e-16 ***\nDESTIN_SZPGSZ05 -1.5412612  0.0093261  -165.264  &lt; 2e-16 ***\nDESTIN_SZPLSZ01 -0.3439667  0.0083504   -41.192  &lt; 2e-16 ***\nDESTIN_SZPLSZ02 -1.7574919  0.0154244  -113.942  &lt; 2e-16 ***\nDESTIN_SZPLSZ03 -0.3455776  0.0112089   -30.831  &lt; 2e-16 ***\nDESTIN_SZPLSZ04 -2.0749385  0.0141153  -146.999  &lt; 2e-16 ***\nDESTIN_SZPLSZ05 -0.4855216  0.0134069   -36.214  &lt; 2e-16 ***\nDESTIN_SZPNSZ01  0.0117816  0.0083558     1.410 0.158543    \nDESTIN_SZPNSZ02  0.7389858  0.0089823    82.272  &lt; 2e-16 ***\nDESTIN_SZPNSZ03 -0.4708719  0.0098588   -47.761  &lt; 2e-16 ***\nDESTIN_SZPNSZ04  1.3156771  0.0111200   118.316  &lt; 2e-16 ***\nDESTIN_SZPNSZ05  0.9881886  0.0153169    64.516  &lt; 2e-16 ***\nDESTIN_SZPRSZ01 -1.0678999  0.0098295  -108.642  &lt; 2e-16 ***\nDESTIN_SZPRSZ02  0.0650279  0.0063927    10.172  &lt; 2e-16 ***\nDESTIN_SZPRSZ03  0.6348138  0.0050147   126.592  &lt; 2e-16 ***\nDESTIN_SZPRSZ04 -0.3640286  0.0097572   -37.309  &lt; 2e-16 ***\nDESTIN_SZPRSZ05  0.0380410  0.0062577     6.079 1.21e-09 ***\nDESTIN_SZPRSZ06  0.3153712  0.0068742    45.877  &lt; 2e-16 ***\nDESTIN_SZPRSZ07 -1.6669973  0.0145573  -114.513  &lt; 2e-16 ***\nDESTIN_SZPRSZ08 -0.6170648  0.0078424   -78.683  &lt; 2e-16 ***\nDESTIN_SZQTSZ01 -0.5496582  0.0098285   -55.925  &lt; 2e-16 ***\nDESTIN_SZQTSZ02 -0.7318114  0.0086807   -84.303  &lt; 2e-16 ***\nDESTIN_SZQTSZ03 -0.5893064  0.0084789   -69.503  &lt; 2e-16 ***\nDESTIN_SZQTSZ04 -0.7103906  0.0085341   -83.242  &lt; 2e-16 ***\nDESTIN_SZQTSZ05 -0.4721472  0.0078164   -60.405  &lt; 2e-16 ***\nDESTIN_SZQTSZ06 -0.6591466  0.0080069   -82.322  &lt; 2e-16 ***\nDESTIN_SZQTSZ07 -0.9540454  0.0126807   -75.236  &lt; 2e-16 ***\nDESTIN_SZQTSZ08  0.4508867  0.0064870    69.507  &lt; 2e-16 ***\nDESTIN_SZQTSZ09 -0.4061810  0.0075485   -53.810  &lt; 2e-16 ***\nDESTIN_SZQTSZ10  0.1351889  0.0068202    19.822  &lt; 2e-16 ***\nDESTIN_SZQTSZ11  0.3181553  0.0067958    46.816  &lt; 2e-16 ***\nDESTIN_SZQTSZ12 -0.1055766  0.0095576   -11.046  &lt; 2e-16 ***\nDESTIN_SZQTSZ13  0.5199663  0.0071928    72.290  &lt; 2e-16 ***\nDESTIN_SZQTSZ14  0.6086332  0.0078537    77.496  &lt; 2e-16 ***\nDESTIN_SZQTSZ15  1.3906866  0.0092250   150.753  &lt; 2e-16 ***\nDESTIN_SZRCSZ01 -0.0862091  0.0085363   -10.099  &lt; 2e-16 ***\nDESTIN_SZRCSZ06 -1.0186282  0.0211113   -48.250  &lt; 2e-16 ***\nDESTIN_SZRVSZ01 -1.5294454  0.0179337   -85.283  &lt; 2e-16 ***\nDESTIN_SZRVSZ02 -2.3607754  0.0355628   -66.383  &lt; 2e-16 ***\nDESTIN_SZRVSZ03 -1.5266254  0.0156276   -97.688  &lt; 2e-16 ***\nDESTIN_SZRVSZ04 -1.0986565  0.0168695   -65.127  &lt; 2e-16 ***\nDESTIN_SZRVSZ05 -2.4004418  0.0320917   -74.799  &lt; 2e-16 ***\nDESTIN_SZSBSZ01 -1.4023966  0.0109496  -128.078  &lt; 2e-16 ***\nDESTIN_SZSBSZ02 -1.3899893  0.0090891  -152.929  &lt; 2e-16 ***\nDESTIN_SZSBSZ03  0.4509008  0.0059864    75.321  &lt; 2e-16 ***\nDESTIN_SZSBSZ04  0.1796309  0.0070142    25.610  &lt; 2e-16 ***\nDESTIN_SZSBSZ05 -1.3159699  0.0096485  -136.391  &lt; 2e-16 ***\nDESTIN_SZSBSZ06 -1.7705263  0.0253064   -69.964  &lt; 2e-16 ***\nDESTIN_SZSBSZ07 -0.7471529  0.0238628   -31.310  &lt; 2e-16 ***\nDESTIN_SZSBSZ08  0.7884520  0.0069638   113.221  &lt; 2e-16 ***\nDESTIN_SZSBSZ09  0.0131702  0.0066350     1.985 0.047150 *  \nDESTIN_SZSESZ02 -0.7247347  0.0060626  -119.541  &lt; 2e-16 ***\nDESTIN_SZSESZ03  0.1032728  0.0048330    21.368  &lt; 2e-16 ***\nDESTIN_SZSESZ04 -1.0992420  0.0068328  -160.878  &lt; 2e-16 ***\nDESTIN_SZSESZ05 -0.8374712  0.0058155  -144.006  &lt; 2e-16 ***\nDESTIN_SZSESZ06 -0.5531619  0.0074766   -73.985  &lt; 2e-16 ***\nDESTIN_SZSESZ07 -3.0328672  0.0246371  -123.101  &lt; 2e-16 ***\nDESTIN_SZSGSZ01 -0.1933777  0.0068235   -28.340  &lt; 2e-16 ***\nDESTIN_SZSGSZ02 -0.3000845  0.0060284   -49.779  &lt; 2e-16 ***\nDESTIN_SZSGSZ03 -0.4322879  0.0057308   -75.433  &lt; 2e-16 ***\nDESTIN_SZSGSZ04 -0.1214792  0.0056548   -21.482  &lt; 2e-16 ***\nDESTIN_SZSGSZ05 -2.0309074  0.0114993  -176.611  &lt; 2e-16 ***\nDESTIN_SZSGSZ06  0.6592095  0.0046364   142.182  &lt; 2e-16 ***\nDESTIN_SZSGSZ07 -0.4618538  0.0062027   -74.460  &lt; 2e-16 ***\nDESTIN_SZSISZ01 -0.5227257  0.0293399   -17.816  &lt; 2e-16 ***\nDESTIN_SZSKSZ01 -0.4797341  0.0091087   -52.668  &lt; 2e-16 ***\nDESTIN_SZSKSZ02  0.8477357  0.0067821   124.996  &lt; 2e-16 ***\nDESTIN_SZSKSZ03 -0.2477566  0.0074817   -33.115  &lt; 2e-16 ***\nDESTIN_SZSKSZ04 -1.3315992  0.0167055   -79.710  &lt; 2e-16 ***\nDESTIN_SZSKSZ05 -0.3519096  0.0131326   -26.797  &lt; 2e-16 ***\nDESTIN_SZSLSZ01 -0.8570431  0.0102100   -83.941  &lt; 2e-16 ***\nDESTIN_SZSLSZ04 -0.9949105  0.0088280  -112.699  &lt; 2e-16 ***\nDESTIN_SZSRSZ01 -1.0260696  0.0154393   -66.458  &lt; 2e-16 ***\nDESTIN_SZTHSZ01 -4.2040410  0.0404795  -103.856  &lt; 2e-16 ***\nDESTIN_SZTHSZ03 -2.4907000  0.0264056   -94.325  &lt; 2e-16 ***\nDESTIN_SZTHSZ04 -3.0701470  0.0244975  -125.325  &lt; 2e-16 ***\nDESTIN_SZTHSZ06 -2.5308161  0.0169699  -149.135  &lt; 2e-16 ***\nDESTIN_SZTMSZ01 -0.2354889  0.0067201   -35.042  &lt; 2e-16 ***\nDESTIN_SZTMSZ02  1.7379292  0.0044573   389.906  &lt; 2e-16 ***\nDESTIN_SZTMSZ03  0.9112458  0.0048718   187.043  &lt; 2e-16 ***\nDESTIN_SZTMSZ04  1.0731075  0.0048626   220.685  &lt; 2e-16 ***\nDESTIN_SZTMSZ05  0.6398583  0.0067321    95.046  &lt; 2e-16 ***\nDESTIN_SZTNSZ01 -0.3500456  0.0083835   -41.754  &lt; 2e-16 ***\nDESTIN_SZTNSZ02 -1.0573515  0.0112412   -94.060  &lt; 2e-16 ***\nDESTIN_SZTNSZ03 -1.4069979  0.0132733  -106.002  &lt; 2e-16 ***\nDESTIN_SZTNSZ04 -0.3616604  0.0085207   -42.445  &lt; 2e-16 ***\nDESTIN_SZTPSZ01 -0.5919243  0.0071153   -83.190  &lt; 2e-16 ***\nDESTIN_SZTPSZ02  0.7083350  0.0046540   152.198  &lt; 2e-16 ***\nDESTIN_SZTPSZ03 -0.5746433  0.0069625   -82.534  &lt; 2e-16 ***\nDESTIN_SZTPSZ04 -1.5821259  0.0084517  -187.196  &lt; 2e-16 ***\nDESTIN_SZTPSZ05 -1.1796256  0.0073039  -161.505  &lt; 2e-16 ***\nDESTIN_SZTPSZ06 -0.3968272  0.0077295   -51.339  &lt; 2e-16 ***\nDESTIN_SZTPSZ07 -2.1796617  0.0135199  -161.219  &lt; 2e-16 ***\nDESTIN_SZTPSZ08 -1.2568483  0.0107267  -117.170  &lt; 2e-16 ***\nDESTIN_SZTPSZ09 -0.2446623  0.0080840   -30.265  &lt; 2e-16 ***\nDESTIN_SZTPSZ10 -1.2542191  0.0102049  -122.904  &lt; 2e-16 ***\nDESTIN_SZTPSZ11 -0.0886883  0.0062888   -14.102  &lt; 2e-16 ***\nDESTIN_SZTPSZ12 -0.7211823  0.0075086   -96.048  &lt; 2e-16 ***\nDESTIN_SZTSSZ01 -1.6271921  0.0238498   -68.227  &lt; 2e-16 ***\nDESTIN_SZTSSZ02 -0.3340439  0.0169137   -19.750  &lt; 2e-16 ***\nDESTIN_SZTSSZ03  0.3924580  0.0111060    35.338  &lt; 2e-16 ***\nDESTIN_SZTSSZ04  0.4169932  0.0114926    36.283  &lt; 2e-16 ***\nDESTIN_SZTSSZ05  1.3206287  0.0120381   109.704  &lt; 2e-16 ***\nDESTIN_SZTSSZ06  2.4023725  0.0192840   124.579  &lt; 2e-16 ***\nDESTIN_SZWCSZ01  2.0697378  0.0061379   337.206  &lt; 2e-16 ***\nDESTIN_SZWCSZ02 -2.0934025  0.0134782  -155.318  &lt; 2e-16 ***\nDESTIN_SZWCSZ03 -3.0670149  0.0349748   -87.692  &lt; 2e-16 ***\nDESTIN_SZWDSZ01  1.0113215  0.0051461   196.522  &lt; 2e-16 ***\nDESTIN_SZWDSZ02 -1.3383793  0.0076482  -174.993  &lt; 2e-16 ***\nDESTIN_SZWDSZ03  0.3394361  0.0060396    56.202  &lt; 2e-16 ***\nDESTIN_SZWDSZ04 -0.8324928  0.0086019   -96.780  &lt; 2e-16 ***\nDESTIN_SZWDSZ05 -0.8279090  0.0083251   -99.447  &lt; 2e-16 ***\nDESTIN_SZWDSZ06 -0.2252899  0.0061074   -36.888  &lt; 2e-16 ***\nDESTIN_SZWDSZ07 -1.3638599  0.0077990  -174.877  &lt; 2e-16 ***\nDESTIN_SZWDSZ08 -0.4350176  0.0077566   -56.083  &lt; 2e-16 ***\nDESTIN_SZWDSZ09  0.5461048  0.0060745    89.901  &lt; 2e-16 ***\nDESTIN_SZYSSZ01  0.0243093  0.0053476     4.546 5.47e-06 ***\nDESTIN_SZYSSZ02 -0.3398962  0.0065947   -51.540  &lt; 2e-16 ***\nDESTIN_SZYSSZ03 -0.3694187  0.0074032   -49.900  &lt; 2e-16 ***\nDESTIN_SZYSSZ04 -0.5222848  0.0067396   -77.495  &lt; 2e-16 ***\nDESTIN_SZYSSZ05 -1.5460539  0.0124899  -123.784  &lt; 2e-16 ***\nDESTIN_SZYSSZ06 -1.5556892  0.0127640  -121.881  &lt; 2e-16 ***\nDESTIN_SZYSSZ07 -0.8673403  0.0167723   -51.713  &lt; 2e-16 ***\nDESTIN_SZYSSZ08  0.5389364  0.0052540   102.577  &lt; 2e-16 ***\nDESTIN_SZYSSZ09  0.1199483  0.0055235    21.716  &lt; 2e-16 ***\nlog(dist)       -1.8906989  0.0005319 -3554.786  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance:  8091747  on 13715  degrees of freedom\nAIC: 8177420\n\nNumber of Fisher Scoring iterations: 7\n\n\nWe can examine how the constraints hold for destinations:\n\ncalc_Rsquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)\n\n[1] 0.6883675"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#model-comparison",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#model-comparison",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "7.9, Model Comparison",
    "text": "7.9, Model Comparison\nAnother useful model performance measure of continuous dependent variable is Root Mean Squared Error (RMSE). We will use the compare_performance() function from the performance package.\nFirstly, we will create a list called model_list by using the following code:\n\nmodel_list &lt;- list(unconstrained = uncSIM,\n                   originConstrained = orcSIM,\n                   destinConstrained = decSIM,\n                   doublyConstrained = dbcSIM)\n\nNext, we will compute the RMSE of all models in the model_list:\n\ncompare_performance(model_list,\n                    metrics = \"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName              | Model |     RMSE\n------------------------------------\nunconstrained     |   glm | 2429.978\noriginConstrained |   glm | 2057.579\ndestinConstrained |   glm | 1891.724\ndoublyConstrained |   glm | 1487.111\n\n\nThe results show that the doubly constrained SIM is the best model among the four as it has the lowest RMSE value of 1487.111."
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#visuslising-fitted",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html#visuslising-fitted",
    "title": "In-Class Exercise 3: Calibrating Spatial Interaction Models",
    "section": "7.10. Visuslising Fitted",
    "text": "7.10. Visuslising Fitted\nWe will visualise the observed and fitted values. First, we will extract the fitted values from each model using the following code:\n\ndf &lt;- as.data.frame(uncSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\nNext, we will join the values to SIM_data dataframe:\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(uncTRIPS = \"uncSIM$fitted.values\")\n\nWe will repeat the same steps for:\nOrigin Constrained SIM\n\ndf &lt;- as.data.frame(orcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(orcTRIPS = \"orcSIM$fitted.values\")\n\nDestination Constrained SIM\n\ndf &lt;- as.data.frame(decSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(decTRIPS = \"decSIM$fitted.values\")\n\nDoubly Constrained SIM\n\ndf &lt;- as.data.frame(dbcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(dbcTRIPS = \"dbcSIM$fitted.values\")\n\nFinally, we will plot the fitted values from each model:\n\nunc_p &lt;- ggplot(data = SIM_data,\n                aes(x = uncTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\norc_p &lt;- ggplot(data = SIM_data,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndec_p &lt;- ggplot(data = SIM_data,\n                aes(x = decTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndbc_p &lt;- ggplot(data = SIM_data,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\nggarrange(unc_p, orc_p, dec_p, dbc_p,\n          ncol = 2,\n          nrow = 2)"
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "In this take-home exercise, we will examine the spatial and spatio-temporal mobility patterns of public bus passengers in Singapore."
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#loading-relevant-packages",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#loading-relevant-packages",
    "title": "Take-home Exercise 1",
    "section": "2.1. Loading Relevant Packages",
    "text": "2.1. Loading Relevant Packages\nWe will first load the following packages into R using the following code:\n\npacman::p_load(sf, tmap, sfdep, tidyverse, knitr)"
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#loading-and-checking-data-sets",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#loading-and-checking-data-sets",
    "title": "Take-home Exercise 1",
    "section": "2.2. Loading and Checking Data Sets",
    "text": "2.2. Loading and Checking Data Sets\nFirst, we will load the origin_destination_bus_202310 csv data into R as odbus:\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\n\nNote: use read_csv() from the readr package, which is part of the core tidyverse, instead of read.csv() from the R base package. read_csv() is typically faster, produces tibble tables and are more reproducible1.\n\nIt is observed that ORIGIN_PT_CODE and DESTINATION_PT_CODE are both recognised as integers. Since these are bus stop identifiers, they should be converted to factor type using the following code:\n\nodbus$ORIGIN_PT_CODE &lt;-\n  as.factor(odbus$ORIGIN_PT_CODE) \n\nodbus$DESTINATION_PT_CODE &lt;-\n  as.factor(odbus$DESTINATION_PT_CODE)\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 20281, 20281, 1…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 20141, 20141, 1…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\nNext, we will load the BusStop SHP file into R as busstop:\n\nbusstop &lt;- st_read(dsn=\"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\Take_Home_Ex\\Take_home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\nglimpse(busstop)\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\n\nst_transform is used to project the coordinates of the simple feature onto the Singapore SVY21 coordinate system (EPSG:3414).\n\nLastly, we will load the Master Plan 2019 Subzone Boundary SHP file into R as mpsz2019:\n\nmpsz2019 &lt;- st_read(dsn=\"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\Take_Home_Ex\\Take_home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\nglimpse(mpsz2019)\n\nRows: 332\nColumns: 7\n$ SUBZONE_N  &lt;chr&gt; \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"JURON…\n$ SUBZONE_C  &lt;chr&gt; \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPSZ05\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE RIVER\", \"WESTERN …\n$ PLN_AREA_C &lt;chr&gt; \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"WI\", \"SI\", \"SI\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"WEST…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"WR\", \"CR\", \"CR\",…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((33222.98 29..., MULTIPOLYGON (…"
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#extracting-study-data",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#extracting-study-data",
    "title": "Take-home Exercise 1",
    "section": "2.3. Extracting Study Data",
    "text": "2.3. Extracting Study Data\nIn this exercise, we will focus on the passenger trips generated within the following peak travel periods:\n\n\n\nPeak Period\nBus Tap-on Time\n\n\n\n\nWeekday mornings\n6:00 to 9:00\n\n\nWeekday evenings\n17:00 to 20:00\n\n\nWeekend/holiday mornings\n11:00 to 14:00\n\n\nWeekend/holiday evenings\n16:00 to 19:00\n\n\n\nWe will extract each peak period separately using the following codes:\n\nori_WD_AM &lt;- odbus %&gt;%\n  filter(DAY_TYPE == 'WEEKDAY') %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n          TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nglimpse(ori_WD_AM)\n\nRows: 5,029\nColumns: 2\n$ ORIGIN_PT_CODE &lt;fct&gt; 01012, 01013, 01019, 01029, 01039, 01059, 01109, 01112,…\n$ TRIPS          &lt;dbl&gt; 1770, 841, 1530, 2483, 2919, 1734, 200, 8593, 7749, 368…\n\nwrite_rds(ori_WD_AM, \"data/rds/ori_WD_AM.rds\")\n\n\nori_WD_PM &lt;- odbus %&gt;%\n  filter(DAY_TYPE == 'WEEKDAY') %&gt;%\n  filter(TIME_PER_HOUR &gt;= 17 &\n          TIME_PER_HOUR &lt;= 20) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nglimpse(ori_WD_PM)\n\nRows: 5,039\nColumns: 2\n$ ORIGIN_PT_CODE &lt;fct&gt; 01012, 01013, 01019, 01029, 01039, 01059, 01109, 01112,…\n$ TRIPS          &lt;dbl&gt; 8000, 7038, 3398, 9089, 12095, 2212, 276, 43513, 25769,…\n\nwrite_rds(ori_WD_PM, \"data/rds/ori_WD_PM.rds\")\n\n\nori_WE_AM &lt;- odbus %&gt;%\n  filter(DAY_TYPE == 'WEEKENDS/HOLIDAY') %&gt;%\n  filter(TIME_PER_HOUR &gt;= 11 &\n          TIME_PER_HOUR &lt;= 14) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nglimpse(ori_WE_AM)\n\nRows: 5,012\nColumns: 2\n$ ORIGIN_PT_CODE &lt;fct&gt; 01012, 01013, 01019, 01029, 01039, 01059, 01109, 01112,…\n$ TRIPS          &lt;dbl&gt; 2177, 1818, 1536, 3217, 5408, 1159, 116, 15354, 8805, 6…\n\nwrite_rds(ori_WE_AM, \"data/rds/ori_WE_AM.rds\")\n\n\nori_WE_PM &lt;- odbus %&gt;%\n  filter(DAY_TYPE == 'WEEKENDS/HOLIDAY') %&gt;%\n  filter(TIME_PER_HOUR &gt;= 16 &\n          TIME_PER_HOUR &lt;= 19) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nglimpse(ori_WE_PM)\n\nRows: 4,992\nColumns: 2\n$ ORIGIN_PT_CODE &lt;fct&gt; 01012, 01013, 01019, 01029, 01039, 01059, 01109, 01112,…\n$ TRIPS          &lt;dbl&gt; 3061, 2770, 1685, 4063, 7263, 1118, 101, 21405, 11556, …\n\nwrite_rds(ori_WE_PM, \"data/rds/ori_WE_PM.rds\")"
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#weekday-am-peak-hours-by-origin",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#weekday-am-peak-hours-by-origin",
    "title": "Take-home Exercise 1",
    "section": "4.1. Weekday AM Peak Hours (by Origin)",
    "text": "4.1. Weekday AM Peak Hours (by Origin)\n\n4.1.1. Geospatial Data Wrangling\nFirst, we have to\n\nbs_ori_WD_AM &lt;- left_join(busstop, ori_WD_AM,\n                       by = c('BUS_STOP_N' = 'ORIGIN_PT_CODE'))\n\nglimpse(bs_ori_WD_AM)\n\nRows: 5,161\nColumns: 5\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ TRIPS      &lt;dbl&gt; 50, NA, 2075, 411, 207, 405, 60, 3059, 9171, 4926, 49, 9925…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\n\nWD_AM_map &lt;- st_join(hexagon, bs_ori_WD_AM) %&gt;%\n  select(id, BUS_STOP_N, TRIPS, geometry)\n\nglimpse(WD_AM_map)\n\nRows: 7,253\nColumns: 4\n$ id         &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 17…\n$ BUS_STOP_N &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TRIPS      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 …\n\n\n\nduplicates &lt;- WD_AM_map %&gt;%\n  group_by_all() %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nhead(duplicates, 20)\n\nSimple feature collection with 20 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 13417.54 ymin: 32347.54 xmax: 44417.54 ymax: 48080.34\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 20 × 4\n   id    BUS_STOP_N TRIPS                                               geometry\n   &lt;fct&gt; &lt;chr&gt;      &lt;dbl&gt;                                          &lt;POLYGON [m]&gt;\n 1 1846  22501      11384 ((13667.54 35378.63, 13417.54 35522.97, 13417.54 3581…\n 2 1846  22501      11384 ((13667.54 35378.63, 13417.54 35522.97, 13417.54 3581…\n 3 2698  43709       1329 ((18917.54 36677.67, 18667.54 36822.01, 18667.54 3711…\n 4 2698  43709       1329 ((18917.54 36677.67, 18667.54 36822.01, 18667.54 3711…\n 5 3318  47201      25910 ((22667.54 47502.99, 22417.54 47647.32, 22417.54 4793…\n 6 3318  47201      25910 ((22667.54 47502.99, 22417.54 47647.32, 22417.54 4793…\n 7 3341  11009      17311 ((22917.54 32347.54, 22667.54 32491.88, 22667.54 3278…\n 8 3341  11009      17311 ((22917.54 32347.54, 22667.54 32491.88, 22667.54 3278…\n 9 4197  53041       4462 ((28167.54 37110.68, 27917.54 37255.02, 27917.54 3754…\n10 4197  53041       4462 ((28167.54 37110.68, 27917.54 37255.02, 27917.54 3754…\n11 4236  51071       6698 ((28417.54 35811.64, 28167.54 35955.98, 28167.54 3624…\n12 4236  51071       6698 ((28417.54 35811.64, 28167.54 35955.98, 28167.54 3624…\n13 5415  62251       8605 ((35667.54 39708.76, 35417.54 39853.09, 35417.54 4014…\n14 5415  62251       8605 ((35667.54 39708.76, 35417.54 39853.09, 35417.54 4014…\n15 6265  77329        337 ((40917.54 39275.74, 40667.54 39420.08, 40667.54 3970…\n16 6265  77329        337 ((40917.54 39275.74, 40667.54 39420.08, 40667.54 3970…\n17 6462  96319        675 ((42167.54 34512.6, 41917.54 34656.94, 41917.54 34945…\n18 6462  96319        675 ((42167.54 34512.6, 41917.54 34656.94, 41917.54 34945…\n19 6791  97079       3822 ((44167.54 38842.73, 43917.54 38987.07, 43917.54 3927…\n20 6791  97079       3822 ((44167.54 38842.73, 43917.54 38987.07, 43917.54 3927…\n\n\n\nWD_AM_map &lt;- unique(WD_AM_map)\n  \nglimpse(WD_AM_map)\n\nRows: 7,243\nColumns: 4\n$ id         &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 17…\n$ BUS_STOP_N &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TRIPS      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 …\n\n\n\nby_id &lt;- WD_AM_map %&gt;%\n  group_by(id) %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nglimpse(by_id)\n\nRows: 4,931\nColumns: 4\n$ id         &lt;fct&gt; 380, 380, 422, 422, 422, 423, 423, 466, 466, 504, 504, 507,…\n$ BUS_STOP_N &lt;chr&gt; \"25751\", \"25761\", \"26399\", \"25719\", \"25711\", \"25701\", \"2570…\n$ TRIPS      &lt;dbl&gt; 52, 185, 257, 815, 251, 274, 760, 165, 6190, 71, 30, 152, 3…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((4667.538 28450.43..., POLYGON ((4667.538 …\n\n\n\nWD_AM_map &lt;- WD_AM_map %&gt;%\n  group_by(id) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nglimpse(WD_AM_map)\n\nRows: 3,623\nColumns: 3\n$ id       &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 174,…\n$ TRIPS    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ geometry &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 23…"
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#visualising-geographical-distribution-of-passenger-trips",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#visualising-geographical-distribution-of-passenger-trips",
    "title": "Take-home Exercise 1",
    "section": "Visualising Geographical Distribution of Passenger Trips",
    "text": "Visualising Geographical Distribution of Passenger Trips\n\ntmap_mode(\"view\")\ntm_shape(WD_AM_map) +\n  tm_fill(\"TRIPS\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          id = \"TRIPS\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Passenger Trips During Weekday AM Peak (by Origin)\",\n            main.title.position = \"center\",\n            main.title.size = 1) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n\n\n\n\n  #tm_credits(\"Source: Planning Subzone boundary from URA\\n\n             #Passenger trip data from LTA\")"
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#geospatial-data-wrangling-1",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#geospatial-data-wrangling-1",
    "title": "Take-home Exercise 1",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\n\nbs_ori_WD_PM &lt;- left_join(busstop, ori_WD_PM,\n                       by = c('BUS_STOP_N' = 'ORIGIN_PT_CODE'))\n\nglimpse(bs_ori_WD_PM)\n\nRows: 5,161\nColumns: 5\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ TRIPS      &lt;dbl&gt; 67, 5, 1740, 445, 199, 349, 432, 1285, 3653, 1379, 181, 536…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\n\nWD_PM_map &lt;- st_join(hexagon, bs_ori_WD_PM) %&gt;%\n  select(id, BUS_STOP_N, TRIPS, geometry)\n\nglimpse(WD_PM_map)\n\nRows: 7,253\nColumns: 4\n$ id         &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 17…\n$ BUS_STOP_N &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TRIPS      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 …\n\n\n\nduplicates &lt;- WD_PM_map %&gt;%\n  group_by_all() %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nhead(duplicates, 20)\n\nSimple feature collection with 20 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 13417.54 ymin: 32347.54 xmax: 44417.54 ymax: 48080.34\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 20 × 4\n   id    BUS_STOP_N TRIPS                                               geometry\n   &lt;fct&gt; &lt;chr&gt;      &lt;dbl&gt;                                          &lt;POLYGON [m]&gt;\n 1 1846  22501       2533 ((13667.54 35378.63, 13417.54 35522.97, 13417.54 3581…\n 2 1846  22501       2533 ((13667.54 35378.63, 13417.54 35522.97, 13417.54 3581…\n 3 2698  43709       1608 ((18917.54 36677.67, 18667.54 36822.01, 18667.54 3711…\n 4 2698  43709       1608 ((18917.54 36677.67, 18667.54 36822.01, 18667.54 3711…\n 5 3318  47201      15689 ((22667.54 47502.99, 22417.54 47647.32, 22417.54 4793…\n 6 3318  47201      15689 ((22667.54 47502.99, 22417.54 47647.32, 22417.54 4793…\n 7 3341  11009       6229 ((22917.54 32347.54, 22667.54 32491.88, 22667.54 3278…\n 8 3341  11009       6229 ((22917.54 32347.54, 22667.54 32491.88, 22667.54 3278…\n 9 4197  53041      10621 ((28167.54 37110.68, 27917.54 37255.02, 27917.54 3754…\n10 4197  53041      10621 ((28167.54 37110.68, 27917.54 37255.02, 27917.54 3754…\n11 4236  51071      14145 ((28417.54 35811.64, 28167.54 35955.98, 28167.54 3624…\n12 4236  51071      14145 ((28417.54 35811.64, 28167.54 35955.98, 28167.54 3624…\n13 5415  62251       1874 ((35667.54 39708.76, 35417.54 39853.09, 35417.54 4014…\n14 5415  62251       1874 ((35667.54 39708.76, 35417.54 39853.09, 35417.54 4014…\n15 6265  77329        326 ((40917.54 39275.74, 40667.54 39420.08, 40667.54 3970…\n16 6265  77329        326 ((40917.54 39275.74, 40667.54 39420.08, 40667.54 3970…\n17 6462  96319       2996 ((42167.54 34512.6, 41917.54 34656.94, 41917.54 34945…\n18 6462  96319       2996 ((42167.54 34512.6, 41917.54 34656.94, 41917.54 34945…\n19 6791  97079       1980 ((44167.54 38842.73, 43917.54 38987.07, 43917.54 3927…\n20 6791  97079       1980 ((44167.54 38842.73, 43917.54 38987.07, 43917.54 3927…\n\n\n\nWD_PM_map &lt;- unique(WD_PM_map)\n  \nglimpse(WD_PM_map)\n\nRows: 7,243\nColumns: 4\n$ id         &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 17…\n$ BUS_STOP_N &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TRIPS      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 …\n\n\n\nby_id &lt;- WD_PM_map %&gt;%\n  group_by(id) %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nglimpse(by_id)\n\nRows: 4,931\nColumns: 4\n$ id         &lt;fct&gt; 380, 380, 422, 422, 422, 423, 423, 466, 466, 504, 504, 507,…\n$ BUS_STOP_N &lt;chr&gt; \"25751\", \"25761\", \"26399\", \"25719\", \"25711\", \"25701\", \"2570…\n$ TRIPS      &lt;dbl&gt; 114, 1905, 560, 2600, 297, 335, 2137, 126, 3423, 1258, 27, …\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((4667.538 28450.43..., POLYGON ((4667.538 …\n\n\n\nWD_PM_map &lt;- WD_PM_map %&gt;%\n  group_by(id) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nglimpse(WD_PM_map)\n\nRows: 3,623\nColumns: 3\n$ id       &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 174,…\n$ TRIPS    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ geometry &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 23…"
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#visualising-geographical-distribution-of-passenger-trips-1",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#visualising-geographical-distribution-of-passenger-trips-1",
    "title": "Take-home Exercise 1",
    "section": "Visualising Geographical Distribution of Passenger Trips",
    "text": "Visualising Geographical Distribution of Passenger Trips\n\ntmap_mode('view')\ntm_shape(WD_PM_map) +\n  tm_fill(\"TRIPS\",\n          style = \"quantile\",\n          palette = \"Greens\",\n          id = \"TRIPS\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Passenger Trips During Weekday PM Peak (by Origin)\",\n            main.title.position = \"center\",\n            main.title.size = 1) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)"
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#geospatial-data-wrangling-2",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#geospatial-data-wrangling-2",
    "title": "Take-home Exercise 1",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\n\nbs_ori_WE_AM &lt;- left_join(busstop, ori_WE_AM,\n                       by = c('BUS_STOP_N' = 'ORIGIN_PT_CODE'))\n\nglimpse(bs_ori_WE_AM)\n\nRows: 5,161\nColumns: 5\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ TRIPS      &lt;dbl&gt; 8, NA, 682, 110, 70, 177, 16, 1442, 2042, 920, 7, 2375, 56,…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\n\nWE_AM_map &lt;- st_join(hexagon, bs_ori_WE_AM) %&gt;%\n  select(id, BUS_STOP_N, TRIPS, geometry)\n\nglimpse(WE_AM_map)\n\nRows: 7,253\nColumns: 4\n$ id         &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 17…\n$ BUS_STOP_N &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TRIPS      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 …\n\n\n\nduplicates &lt;- WE_AM_map %&gt;%\n  group_by_all() %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nhead(duplicates, 20)\n\nSimple feature collection with 20 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 13417.54 ymin: 32347.54 xmax: 44417.54 ymax: 48080.34\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 20 × 4\n   id    BUS_STOP_N TRIPS                                               geometry\n   &lt;fct&gt; &lt;chr&gt;      &lt;dbl&gt;                                          &lt;POLYGON [m]&gt;\n 1 1846  22501       1539 ((13667.54 35378.63, 13417.54 35522.97, 13417.54 3581…\n 2 1846  22501       1539 ((13667.54 35378.63, 13417.54 35522.97, 13417.54 3581…\n 3 2698  43709        415 ((18917.54 36677.67, 18667.54 36822.01, 18667.54 3711…\n 4 2698  43709        415 ((18917.54 36677.67, 18667.54 36822.01, 18667.54 3711…\n 5 3318  47201       2204 ((22667.54 47502.99, 22417.54 47647.32, 22417.54 4793…\n 6 3318  47201       2204 ((22667.54 47502.99, 22417.54 47647.32, 22417.54 4793…\n 7 3341  11009       4698 ((22917.54 32347.54, 22667.54 32491.88, 22667.54 3278…\n 8 3341  11009       4698 ((22917.54 32347.54, 22667.54 32491.88, 22667.54 3278…\n 9 4197  53041       4001 ((28167.54 37110.68, 27917.54 37255.02, 27917.54 3754…\n10 4197  53041       4001 ((28167.54 37110.68, 27917.54 37255.02, 27917.54 3754…\n11 4236  51071       5163 ((28417.54 35811.64, 28167.54 35955.98, 28167.54 3624…\n12 4236  51071       5163 ((28417.54 35811.64, 28167.54 35955.98, 28167.54 3624…\n13 5415  62251       1431 ((35667.54 39708.76, 35417.54 39853.09, 35417.54 4014…\n14 5415  62251       1431 ((35667.54 39708.76, 35417.54 39853.09, 35417.54 4014…\n15 6265  77329         92 ((40917.54 39275.74, 40667.54 39420.08, 40667.54 3970…\n16 6265  77329         92 ((40917.54 39275.74, 40667.54 39420.08, 40667.54 3970…\n17 6462  96319        164 ((42167.54 34512.6, 41917.54 34656.94, 41917.54 34945…\n18 6462  96319        164 ((42167.54 34512.6, 41917.54 34656.94, 41917.54 34945…\n19 6791  97079        290 ((44167.54 38842.73, 43917.54 38987.07, 43917.54 3927…\n20 6791  97079        290 ((44167.54 38842.73, 43917.54 38987.07, 43917.54 3927…\n\n\n\nWE_AM_map &lt;- unique(WE_AM_map)\n  \nglimpse(WE_AM_map)\n\nRows: 7,243\nColumns: 4\n$ id         &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 17…\n$ BUS_STOP_N &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TRIPS      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 …\n\n\n\nby_id &lt;- WE_AM_map %&gt;%\n  group_by(id) %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nglimpse(by_id)\n\nRows: 4,931\nColumns: 4\n$ id         &lt;fct&gt; 380, 380, 422, 422, 422, 423, 423, 466, 466, 504, 504, 507,…\n$ BUS_STOP_N &lt;chr&gt; \"25751\", \"25761\", \"26399\", \"25719\", \"25711\", \"25701\", \"2570…\n$ TRIPS      &lt;dbl&gt; 26, 187, 49, 367, 39, 103, 588, 26, 3885, 148, 1, 181, 4, 2…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((4667.538 28450.43..., POLYGON ((4667.538 …\n\n\n\nWE_AM_map &lt;- WE_AM_map %&gt;%\n  group_by(id) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nglimpse(WE_AM_map)\n\nRows: 3,623\nColumns: 3\n$ id       &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 174,…\n$ TRIPS    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ geometry &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 23…"
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#visualising-geographical-distribution-of-passenger-trips-2",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#visualising-geographical-distribution-of-passenger-trips-2",
    "title": "Take-home Exercise 1",
    "section": "Visualising Geographical Distribution of Passenger Trips",
    "text": "Visualising Geographical Distribution of Passenger Trips\n\ntmap_mode(\"view\")\ntm_shape(WE_AM_map) +\n  tm_fill(\"TRIPS\",\n          style = \"quantile\",\n          palette = \"Reds\",\n          id =  \"TRIPS\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Passenger Trips During Weekend AM Peak (by Origin)\",\n            main.title.position = \"center\",\n            main.title.size = 1) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)"
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#geospatial-data-wrangling-3",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#geospatial-data-wrangling-3",
    "title": "Take-home Exercise 1",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\n\nbs_ori_WE_PM &lt;- left_join(busstop, ori_WE_PM,\n                       by = c('BUS_STOP_N' = 'ORIGIN_PT_CODE'))\n\nglimpse(bs_ori_WE_PM)\n\nRows: 5,161\nColumns: 5\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ TRIPS      &lt;dbl&gt; 10, NA, 589, 47, 77, 169, 82, 492, 2016, 724, 25, 2137, 91,…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\n\nWE_PM_map &lt;- st_join(hexagon, bs_ori_WE_PM) %&gt;%\n  select(id, BUS_STOP_N, TRIPS, geometry)\n\nglimpse(WE_PM_map)\n\nRows: 7,253\nColumns: 4\n$ id         &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 17…\n$ BUS_STOP_N &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TRIPS      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 …\n\n\n\nduplicates &lt;- WE_PM_map %&gt;%\n  group_by_all() %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nglimpse(duplicates)\n\nRows: 20\nColumns: 4\n$ id         &lt;fct&gt; 1846, 1846, 2698, 2698, 3318, 3318, 3341, 3341, 4197, 4197,…\n$ BUS_STOP_N &lt;chr&gt; \"22501\", \"22501\", \"43709\", \"43709\", \"47201\", \"47201\", \"1100…\n$ TRIPS      &lt;dbl&gt; 1315, 1315, 452, 452, 6331, 6331, 2451, 2451, 4067, 4067, 4…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((13667.54 35378.63..., POLYGON ((13667.54 …\n\n\n\nWE_PM_map &lt;- unique(WE_PM_map)\n  \nglimpse(WE_PM_map)\n\nRows: 7,243\nColumns: 4\n$ id         &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 17…\n$ BUS_STOP_N &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TRIPS      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 …\n\n\n\nby_id &lt;- WE_PM_map %&gt;%\n  group_by(id) %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nglimpse(by_id)\n\nRows: 4,931\nColumns: 4\n$ id         &lt;fct&gt; 380, 380, 422, 422, 422, 423, 423, 466, 466, 504, 504, 507,…\n$ BUS_STOP_N &lt;chr&gt; \"25751\", \"25761\", \"26399\", \"25719\", \"25711\", \"25701\", \"2570…\n$ TRIPS      &lt;dbl&gt; 14, 346, 111, 533, 132, 297, 733, 116, 3606, 168, 8, 347, 2…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((4667.538 28450.43..., POLYGON ((4667.538 …\n\n\n\nWE_PM_map &lt;- WE_PM_map %&gt;%\n  group_by(id) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nglimpse(WE_PM_map)\n\nRows: 3,623\nColumns: 3\n$ id       &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 174,…\n$ TRIPS    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ geometry &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 23…"
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#visualising-geographical-distribution-of-passenger-trips-3",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#visualising-geographical-distribution-of-passenger-trips-3",
    "title": "Take-home Exercise 1",
    "section": "Visualising Geographical Distribution of Passenger Trips",
    "text": "Visualising Geographical Distribution of Passenger Trips\n\ntmap_mode(\"view\")\ntm_shape(WE_PM_map) +\n  tm_fill(\"TRIPS\",\n          style = \"quantile\",\n          palette = \"Oranges\",\n          id = \"TRIPS\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Passenger Trips During Weekend PM Peak (by Origin)\",\n            main.title.position = \"center\",\n            main.title.size = 1) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)"
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#preparing-data",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#preparing-data",
    "title": "Take-home Exercise 1",
    "section": "Preparing Data",
    "text": "Preparing Data\n\nWD_AM_lisa &lt;- WD_AM_map %&gt;%\n  ungroup() %&gt;%\n  drop_na()\n\n\nWD_PM_lisa &lt;- WD_PM_map %&gt;%\n  ungroup() %&gt;%\n  drop_na()\n\n\nWE_AM_lisa &lt;- WE_AM_map %&gt;%\n  ungroup() %&gt;%\n  drop_na()\n\n\nWE_PM_lisa &lt;- WE_PM_map %&gt;%\n  ungroup() %&gt;%\n  drop_na()"
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#deriving-contiguity-weights",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#deriving-contiguity-weights",
    "title": "Take-home Exercise 1",
    "section": "Deriving Contiguity Weights",
    "text": "Deriving Contiguity Weights\nWe will use the following code to derive the contiguity weights using Queen’s method:\n\nWD_AM_knn &lt;- WD_AM_lisa %&gt;%\n  mutate(nb = st_knn(geometry, k=8),\n         wt = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\nWD_AM_knn\n\nSimple feature collection with 1386 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3667.538 ymin: 26285.36 xmax: 48667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,386 × 5\n   nb        wt        id    TRIPS                                      geometry\n * &lt;nb&gt;      &lt;list&gt;    &lt;fct&gt; &lt;dbl&gt;                                 &lt;POLYGON [m]&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; 258     103 ((3917.538 28017.41, 3667.538 28161.75, 3667…\n 2 &lt;int [8]&gt; &lt;dbl [8]&gt; 342      78 ((4417.538 30615.49, 4167.538 30759.83, 4167…\n 3 &lt;int [8]&gt; &lt;dbl [8]&gt; 380     237 ((4667.538 28450.43, 4417.538 28594.76, 4417…\n 4 &lt;int [8]&gt; &lt;dbl [8]&gt; 382     301 ((4667.538 30182.48, 4417.538 30326.82, 4417…\n 5 &lt;int [8]&gt; &lt;dbl [8]&gt; 383      53 ((4667.538 31048.5, 4417.538 31192.84, 4417.…\n 6 &lt;int [8]&gt; &lt;dbl [8]&gt; 421      64 ((4917.538 28883.44, 4667.538 29027.78, 4667…\n 7 &lt;int [8]&gt; &lt;dbl [8]&gt; 422    1323 ((4917.538 29749.47, 4667.538 29893.8, 4667.…\n 8 &lt;int [8]&gt; &lt;dbl [8]&gt; 423    1034 ((4917.538 30615.49, 4667.538 30759.83, 4667…\n 9 &lt;int [8]&gt; &lt;dbl [8]&gt; 424      60 ((4917.538 31481.52, 4667.538 31625.85, 4667…\n10 &lt;int [8]&gt; &lt;dbl [8]&gt; 425     399 ((4917.538 32347.54, 4667.538 32491.88, 4667…\n# ℹ 1,376 more rows"
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#deriving-contiguity-weights-1",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#deriving-contiguity-weights-1",
    "title": "Take-home Exercise 1",
    "section": "Deriving Contiguity Weights",
    "text": "Deriving Contiguity Weights\nWe will use the following code to derive the contiguity weights using Queen’s method:\n\nWD_PM_knn &lt;- WD_PM_lisa %&gt;%\n  mutate(nb = st_knn(geometry, k=8),\n         wt = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\nWD_PM_knn\n\nSimple feature collection with 1396 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3667.538 ymin: 26285.36 xmax: 48667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,396 × 5\n   nb        wt        id    TRIPS                                      geometry\n * &lt;nb&gt;      &lt;list&gt;    &lt;fct&gt; &lt;dbl&gt;                                 &lt;POLYGON [m]&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; 258     390 ((3917.538 28017.41, 3667.538 28161.75, 3667…\n 2 &lt;int [8]&gt; &lt;dbl [8]&gt; 342     291 ((4417.538 30615.49, 4167.538 30759.83, 4167…\n 3 &lt;int [8]&gt; &lt;dbl [8]&gt; 380    2019 ((4667.538 28450.43, 4417.538 28594.76, 4417…\n 4 &lt;int [8]&gt; &lt;dbl [8]&gt; 382     299 ((4667.538 30182.48, 4417.538 30326.82, 4417…\n 5 &lt;int [8]&gt; &lt;dbl [8]&gt; 383     241 ((4667.538 31048.5, 4417.538 31192.84, 4417.…\n 6 &lt;int [8]&gt; &lt;dbl [8]&gt; 421     296 ((4917.538 28883.44, 4667.538 29027.78, 4667…\n 7 &lt;int [8]&gt; &lt;dbl [8]&gt; 422    3457 ((4917.538 29749.47, 4667.538 29893.8, 4667.…\n 8 &lt;int [8]&gt; &lt;dbl [8]&gt; 423    2472 ((4917.538 30615.49, 4667.538 30759.83, 4667…\n 9 &lt;int [8]&gt; &lt;dbl [8]&gt; 424     368 ((4917.538 31481.52, 4667.538 31625.85, 4667…\n10 &lt;int [8]&gt; &lt;dbl [8]&gt; 425     114 ((4917.538 32347.54, 4667.538 32491.88, 4667…\n# ℹ 1,386 more rows"
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#deriving-contiguity-weights-2",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#deriving-contiguity-weights-2",
    "title": "Take-home Exercise 1",
    "section": "Deriving Contiguity Weights",
    "text": "Deriving Contiguity Weights\nWe will use the following code to derive the contiguity weights using Queen’s method:\n\nWE_AM_knn &lt;- WE_AM_lisa %&gt;%\n  mutate(nb = st_knn(geometry, k=8),\n         wt = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\nWE_AM_knn\n\nSimple feature collection with 1371 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 4167.538 ymin: 26285.36 xmax: 48667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,371 × 5\n   nb        wt        id    TRIPS                                      geometry\n * &lt;nb&gt;      &lt;list&gt;    &lt;fct&gt; &lt;dbl&gt;                                 &lt;POLYGON [m]&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; 342      52 ((4417.538 30615.49, 4167.538 30759.83, 4167…\n 2 &lt;int [8]&gt; &lt;dbl [8]&gt; 380     213 ((4667.538 28450.43, 4417.538 28594.76, 4417…\n 3 &lt;int [8]&gt; &lt;dbl [8]&gt; 382      88 ((4667.538 30182.48, 4417.538 30326.82, 4417…\n 4 &lt;int [8]&gt; &lt;dbl [8]&gt; 383      76 ((4667.538 31048.5, 4417.538 31192.84, 4417.…\n 5 &lt;int [8]&gt; &lt;dbl [8]&gt; 421      21 ((4917.538 28883.44, 4667.538 29027.78, 4667…\n 6 &lt;int [8]&gt; &lt;dbl [8]&gt; 422     455 ((4917.538 29749.47, 4667.538 29893.8, 4667.…\n 7 &lt;int [8]&gt; &lt;dbl [8]&gt; 423     691 ((4917.538 30615.49, 4667.538 30759.83, 4667…\n 8 &lt;int [8]&gt; &lt;dbl [8]&gt; 424      45 ((4917.538 31481.52, 4667.538 31625.85, 4667…\n 9 &lt;int [8]&gt; &lt;dbl [8]&gt; 425      26 ((4917.538 32347.54, 4667.538 32491.88, 4667…\n10 &lt;int [8]&gt; &lt;dbl [8]&gt; 462      68 ((5167.538 29316.45, 4917.538 29460.79, 4917…\n# ℹ 1,361 more rows"
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#deriving-contiguity-weights-3",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#deriving-contiguity-weights-3",
    "title": "Take-home Exercise 1",
    "section": "Deriving Contiguity Weights",
    "text": "Deriving Contiguity Weights\nWe will use the following code to derive the contiguity weights using Queen’s method:\n\nWE_PM_knn &lt;- WE_PM_lisa %&gt;%\n  mutate(nb = st_knn(geometry, k=8),\n         wt = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\nWE_PM_knn\n\nSimple feature collection with 1372 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3667.538 ymin: 26285.36 xmax: 46667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,372 × 5\n   nb        wt        id    TRIPS                                      geometry\n * &lt;nb&gt;      &lt;list&gt;    &lt;fct&gt; &lt;dbl&gt;                                 &lt;POLYGON [m]&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; 258      56 ((3917.538 28017.41, 3667.538 28161.75, 3667…\n 2 &lt;int [8]&gt; &lt;dbl [8]&gt; 342     100 ((4417.538 30615.49, 4167.538 30759.83, 4167…\n 3 &lt;int [8]&gt; &lt;dbl [8]&gt; 380     360 ((4667.538 28450.43, 4417.538 28594.76, 4417…\n 4 &lt;int [8]&gt; &lt;dbl [8]&gt; 382     101 ((4667.538 30182.48, 4417.538 30326.82, 4417…\n 5 &lt;int [8]&gt; &lt;dbl [8]&gt; 383      55 ((4667.538 31048.5, 4417.538 31192.84, 4417.…\n 6 &lt;int [8]&gt; &lt;dbl [8]&gt; 421      53 ((4917.538 28883.44, 4667.538 29027.78, 4667…\n 7 &lt;int [8]&gt; &lt;dbl [8]&gt; 422     776 ((4917.538 29749.47, 4667.538 29893.8, 4667.…\n 8 &lt;int [8]&gt; &lt;dbl [8]&gt; 423    1030 ((4917.538 30615.49, 4667.538 30759.83, 4667…\n 9 &lt;int [8]&gt; &lt;dbl [8]&gt; 424      49 ((4917.538 31481.52, 4667.538 31625.85, 4667…\n10 &lt;int [8]&gt; &lt;dbl [8]&gt; 425     153 ((4917.538 32347.54, 4667.538 32491.88, 4667…\n# ℹ 1,362 more rows"
  },
  {
    "objectID": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#footnotes",
    "href": "Take_Home_Ex/Take_home_Ex01/Take_home_Ex01.html#footnotes",
    "title": "Take-home Exercise 1",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://r4ds.had.co.nz/data-import.html (Section 11.2.1)↩︎"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/data/geospatial/MPSZ-2019.html",
    "href": "In_class_Ex/In_class_Ex03/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "In this take-home exercise, we will examine the spatial and spatio-temporal mobility patterns of public bus passengers in Singapore. Exploratory Spatial Data Analysis (ESDA) will be used to visualise and analyse bus ridership data by origin in October 2023. Next, Local Indicators of Spatial Association analysis will be conducted to uncover spatial and spatio-temporal mobility patterns of bus passengers in Singapore."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#loading-relevant-r-packages",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#loading-relevant-r-packages",
    "title": "Take-home Exercise 1",
    "section": "2.1. Loading Relevant R Packages",
    "text": "2.1. Loading Relevant R Packages\nWe will first load the following packages into R using the following code:\n\npacman::p_load(sf, tmap, sfdep, tidyverse, knitr)\n\nThese packages will serve the following purpose:\n\nsf: geospatial data handling\ntmap: thematic mapping\nsfdep: to compute spatial weights and local spatial association statistics\ntidyverse: non-spatial data handling\nknitr: for creating html table"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#loading-and-checking-data-sets",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#loading-and-checking-data-sets",
    "title": "Take-home Exercise 1",
    "section": "2.2. Loading and Checking Data Sets",
    "text": "2.2. Loading and Checking Data Sets\nThe first data set we will import is the origin_destination_bus_202310 csv data. We will import it into R as odbus using read_csv() from the readr package:\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\n\nNote: use read_csv() from the readr package, which is part of the core tidyverse, instead of read.csv() from the R base package. read_csv() is typically faster, produces tibble tables and are more reproducible1.\n\nIt is observed that ORIGIN_PT_CODE and DESTINATION_PT_CODE are both recognised as integers. Since these are bus stop identifiers, they should be converted to factor type using the following code:\n\nodbus$ORIGIN_PT_CODE &lt;-\n  as.factor(odbus$ORIGIN_PT_CODE) \n\nodbus$DESTINATION_PT_CODE &lt;-\n  as.factor(odbus$DESTINATION_PT_CODE)\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 20281, 20281, 1…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 20141, 20141, 1…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\nThe second dataset we will import is the BusStop SHP file. This file will be imported into R as busstop using the st_read() function from the sf package:\n\nbusstop &lt;- st_read(dsn=\"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\Take_home_Ex\\Take_home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\nglimpse(busstop)\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\n\nst_transform is used to project the coordinates of the simple feature onto the Singapore SVY21 coordinate system (EPSG:3414).\n\nLastly, we will import the Master Plan 2019 Subzone Boundary SHP file. This file will be imported into R as mpsz2019 using the st_read() function from the sf package:\n\nmpsz2019 &lt;- st_read(dsn=\"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\Take_home_Ex\\Take_home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\nglimpse(mpsz2019)\n\nRows: 332\nColumns: 7\n$ SUBZONE_N  &lt;chr&gt; \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"JURON…\n$ SUBZONE_C  &lt;chr&gt; \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPSZ05\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE RIVER\", \"WESTERN …\n$ PLN_AREA_C &lt;chr&gt; \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"WI\", \"SI\", \"SI\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"WEST…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"WR\", \"CR\", \"CR\",…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((33222.98 29..., MULTIPOLYGON (…"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#extracting-study-data",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#extracting-study-data",
    "title": "Take-home Exercise 1",
    "section": "2.3. Extracting Study Data",
    "text": "2.3. Extracting Study Data\nIn this exercise, we will focus on the bus ridership by origin bus stop in the following peak travel periods:\n\n\n\nPeak Period\nBus Tap-on Time\n\n\n\n\nWeekday mornings\n06:00 to 09:00\n\n\nWeekday evenings\n17:00 to 20:00\n\n\nWeekend/holiday mornings\n11:00 to 14:00\n\n\nWeekend/holiday evenings\n16:00 to 19:00\n\n\n\nWe will extract each peak period separately using the following codes:\nWeekday morning peak:\n\nori_WD_AM &lt;- odbus %&gt;%\n  filter(DAY_TYPE == 'WEEKDAY') %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n          TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nglimpse(ori_WD_AM)\n\nRows: 5,029\nColumns: 2\n$ ORIGIN_PT_CODE &lt;fct&gt; 01012, 01013, 01019, 01029, 01039, 01059, 01109, 01112,…\n$ TRIPS          &lt;dbl&gt; 1770, 841, 1530, 2483, 2919, 1734, 200, 8593, 7749, 368…\n\nwrite_rds(ori_WD_AM, \"data/rds/ori_WD_AM.rds\")\n\nWeekday evening peak:\n\nori_WD_PM &lt;- odbus %&gt;%\n  filter(DAY_TYPE == 'WEEKDAY') %&gt;%\n  filter(TIME_PER_HOUR &gt;= 17 &\n          TIME_PER_HOUR &lt;= 20) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nglimpse(ori_WD_PM)\n\nRows: 5,039\nColumns: 2\n$ ORIGIN_PT_CODE &lt;fct&gt; 01012, 01013, 01019, 01029, 01039, 01059, 01109, 01112,…\n$ TRIPS          &lt;dbl&gt; 8000, 7038, 3398, 9089, 12095, 2212, 276, 43513, 25769,…\n\nwrite_rds(ori_WD_PM, \"data/rds/ori_WD_PM.rds\")\n\nWeekend/holiday morning peak:\n\nori_WE_AM &lt;- odbus %&gt;%\n  filter(DAY_TYPE == 'WEEKENDS/HOLIDAY') %&gt;%\n  filter(TIME_PER_HOUR &gt;= 11 &\n          TIME_PER_HOUR &lt;= 14) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nglimpse(ori_WE_AM)\n\nRows: 5,012\nColumns: 2\n$ ORIGIN_PT_CODE &lt;fct&gt; 01012, 01013, 01019, 01029, 01039, 01059, 01109, 01112,…\n$ TRIPS          &lt;dbl&gt; 2177, 1818, 1536, 3217, 5408, 1159, 116, 15354, 8805, 6…\n\nwrite_rds(ori_WE_AM, \"data/rds/ori_WE_AM.rds\")\n\nWeekend/holiday evening peak:\n\nori_WE_PM &lt;- odbus %&gt;%\n  filter(DAY_TYPE == 'WEEKENDS/HOLIDAY') %&gt;%\n  filter(TIME_PER_HOUR &gt;= 16 &\n          TIME_PER_HOUR &lt;= 19) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nglimpse(ori_WE_PM)\n\nRows: 4,992\nColumns: 2\n$ ORIGIN_PT_CODE &lt;fct&gt; 01012, 01013, 01019, 01029, 01039, 01059, 01109, 01112,…\n$ TRIPS          &lt;dbl&gt; 3061, 2770, 1685, 4063, 7263, 1118, 101, 21405, 11556, …\n\nwrite_rds(ori_WE_PM, \"data/rds/ori_WE_PM.rds\")"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#geospatial-data-wrangling",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#geospatial-data-wrangling",
    "title": "Take-home Exercise 1",
    "section": "4.1. Geospatial Data Wrangling",
    "text": "4.1. Geospatial Data Wrangling\n\n4.1.1. Weekday AM Peak Hours (by Origin)\nFirstly, we perform a left_join() using busstop and ori_WD_AM to populate trips by origin bus stop to the full list of bus stops in Singapore. This generates NA values for bus stops where no origin trips were taken during weekday morning peak periods in October 2023. This retains the simple feature dataframe for the next step.\n\nbs_ori_WD_AM &lt;- left_join(busstop, ori_WD_AM,\n                       by = c('BUS_STOP_N' = 'ORIGIN_PT_CODE'))\n\nhead(bs_ori_WD_AM)\n\nSimple feature collection with 6 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 13228.59 ymin: 30391.85 xmax: 41603.76 ymax: 44206.38\nProjected CRS: SVY21 / Singapore TM\n  BUS_STOP_N BUS_ROOF_N             LOC_DESC TRIPS                  geometry\n1      22069        B06   OPP CEVA LOGISTICS    50 POINT (13576.31 32883.65)\n2      32071        B23         AFT TRACK 13    NA POINT (13228.59 44206.38)\n3      44331        B01              BLK 239  2075  POINT (21045.1 40242.08)\n4      96081        B05 GRACE INDEPENDENT CH   411 POINT (41603.76 35413.11)\n5      11561        B05              BLK 166   207 POINT (24568.74 30391.85)\n6      66191        B03         AFT CORFE PL   405 POINT (30951.58 38079.61)\n\n\nNext, we use st_join from the sf package to perform a spatial left join between the hexagon layer and the bs_ori_WD_AM simple feature dataframe. Bus stop coordinates that intersect with each hexagon polygon will be assigned the corresponding grid id.\n\nWD_AM_map &lt;- st_join(hexagon, bs_ori_WD_AM) %&gt;%\n  select(id, BUS_STOP_N, TRIPS, geometry)\n\nglimpse(WD_AM_map)\n\nRows: 7,253\nColumns: 4\n$ id         &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 17…\n$ BUS_STOP_N &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TRIPS      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 …\n\n\nNext, we check for duplicates in the resultant simple feature dataframe:\n\nduplicates &lt;- WD_AM_map %&gt;%\n  group_by_all() %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nhead(duplicates, 20)\n\nSimple feature collection with 20 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 13417.54 ymin: 32347.54 xmax: 44417.54 ymax: 48080.34\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 20 × 4\n   id    BUS_STOP_N TRIPS                                               geometry\n   &lt;fct&gt; &lt;chr&gt;      &lt;dbl&gt;                                          &lt;POLYGON [m]&gt;\n 1 1846  22501      11384 ((13667.54 35378.63, 13417.54 35522.97, 13417.54 3581…\n 2 1846  22501      11384 ((13667.54 35378.63, 13417.54 35522.97, 13417.54 3581…\n 3 2698  43709       1329 ((18917.54 36677.67, 18667.54 36822.01, 18667.54 3711…\n 4 2698  43709       1329 ((18917.54 36677.67, 18667.54 36822.01, 18667.54 3711…\n 5 3318  47201      25910 ((22667.54 47502.99, 22417.54 47647.32, 22417.54 4793…\n 6 3318  47201      25910 ((22667.54 47502.99, 22417.54 47647.32, 22417.54 4793…\n 7 3341  11009      17311 ((22917.54 32347.54, 22667.54 32491.88, 22667.54 3278…\n 8 3341  11009      17311 ((22917.54 32347.54, 22667.54 32491.88, 22667.54 3278…\n 9 4197  53041       4462 ((28167.54 37110.68, 27917.54 37255.02, 27917.54 3754…\n10 4197  53041       4462 ((28167.54 37110.68, 27917.54 37255.02, 27917.54 3754…\n11 4236  51071       6698 ((28417.54 35811.64, 28167.54 35955.98, 28167.54 3624…\n12 4236  51071       6698 ((28417.54 35811.64, 28167.54 35955.98, 28167.54 3624…\n13 5415  62251       8605 ((35667.54 39708.76, 35417.54 39853.09, 35417.54 4014…\n14 5415  62251       8605 ((35667.54 39708.76, 35417.54 39853.09, 35417.54 4014…\n15 6265  77329        337 ((40917.54 39275.74, 40667.54 39420.08, 40667.54 3970…\n16 6265  77329        337 ((40917.54 39275.74, 40667.54 39420.08, 40667.54 3970…\n17 6462  96319        675 ((42167.54 34512.6, 41917.54 34656.94, 41917.54 34945…\n18 6462  96319        675 ((42167.54 34512.6, 41917.54 34656.94, 41917.54 34945…\n19 6791  97079       3822 ((44167.54 38842.73, 43917.54 38987.07, 43917.54 3927…\n20 6791  97079       3822 ((44167.54 38842.73, 43917.54 38987.07, 43917.54 3927…\n\n\nFirst, using glimpse() we know that there are 20 duplicate records. We will use head() to display all 20 records to conduct a visual check.\nNext, we will remove the duplicate values:\n\nWD_AM_map &lt;- unique(WD_AM_map)\n  \nglimpse(WD_AM_map)\n\nRows: 7,243\nColumns: 4\n$ id         &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 17…\n$ BUS_STOP_N &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TRIPS      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 …\n\n\nWe will now check for the occurrence of multiple bus stops with the same hexagon grid:\n\nby_id &lt;- WD_AM_map %&gt;%\n  group_by(id) %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nglimpse(by_id)\n\nRows: 4,931\nColumns: 4\n$ id         &lt;fct&gt; 380, 380, 422, 422, 422, 423, 423, 466, 466, 504, 504, 507,…\n$ BUS_STOP_N &lt;chr&gt; \"25751\", \"25761\", \"26399\", \"25719\", \"25711\", \"25701\", \"2570…\n$ TRIPS      &lt;dbl&gt; 52, 185, 257, 815, 251, 274, 760, 165, 6190, 71, 30, 152, 3…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((4667.538 28450.43..., POLYGON ((4667.538 …\n\n\nIt is observed that there are 4,931 records of such occurrences. We will sum all origin trips by each hexagon grid using the following code:\n\nWD_AM_map &lt;- WD_AM_map %&gt;%\n  group_by(id) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nglimpse(WD_AM_map)\n\nRows: 3,623\nColumns: 3\n$ id       &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 174,…\n$ TRIPS    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ geometry &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 23…\n\n\nWe repeat the above data wrangling steps for the remaining three study datasets:\n\n\n4.1.2. Weekday PM Peak Hours (by Origin)\n\nbs_ori_WD_PM &lt;- left_join(busstop, ori_WD_PM,\n                       by = c('BUS_STOP_N' = 'ORIGIN_PT_CODE'))\n\nglimpse(bs_ori_WD_PM)\n\nRows: 5,161\nColumns: 5\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ TRIPS      &lt;dbl&gt; 67, 5, 1740, 445, 199, 349, 432, 1285, 3653, 1379, 181, 536…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\n\nWD_PM_map &lt;- st_join(hexagon, bs_ori_WD_PM) %&gt;%\n  select(id, BUS_STOP_N, TRIPS, geometry)\n\nglimpse(WD_PM_map)\n\nRows: 7,253\nColumns: 4\n$ id         &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 17…\n$ BUS_STOP_N &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TRIPS      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 …\n\n\n\nduplicates &lt;- WD_PM_map %&gt;%\n  group_by_all() %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nhead(duplicates, 20)\n\nSimple feature collection with 20 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 13417.54 ymin: 32347.54 xmax: 44417.54 ymax: 48080.34\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 20 × 4\n   id    BUS_STOP_N TRIPS                                               geometry\n   &lt;fct&gt; &lt;chr&gt;      &lt;dbl&gt;                                          &lt;POLYGON [m]&gt;\n 1 1846  22501       2533 ((13667.54 35378.63, 13417.54 35522.97, 13417.54 3581…\n 2 1846  22501       2533 ((13667.54 35378.63, 13417.54 35522.97, 13417.54 3581…\n 3 2698  43709       1608 ((18917.54 36677.67, 18667.54 36822.01, 18667.54 3711…\n 4 2698  43709       1608 ((18917.54 36677.67, 18667.54 36822.01, 18667.54 3711…\n 5 3318  47201      15689 ((22667.54 47502.99, 22417.54 47647.32, 22417.54 4793…\n 6 3318  47201      15689 ((22667.54 47502.99, 22417.54 47647.32, 22417.54 4793…\n 7 3341  11009       6229 ((22917.54 32347.54, 22667.54 32491.88, 22667.54 3278…\n 8 3341  11009       6229 ((22917.54 32347.54, 22667.54 32491.88, 22667.54 3278…\n 9 4197  53041      10621 ((28167.54 37110.68, 27917.54 37255.02, 27917.54 3754…\n10 4197  53041      10621 ((28167.54 37110.68, 27917.54 37255.02, 27917.54 3754…\n11 4236  51071      14145 ((28417.54 35811.64, 28167.54 35955.98, 28167.54 3624…\n12 4236  51071      14145 ((28417.54 35811.64, 28167.54 35955.98, 28167.54 3624…\n13 5415  62251       1874 ((35667.54 39708.76, 35417.54 39853.09, 35417.54 4014…\n14 5415  62251       1874 ((35667.54 39708.76, 35417.54 39853.09, 35417.54 4014…\n15 6265  77329        326 ((40917.54 39275.74, 40667.54 39420.08, 40667.54 3970…\n16 6265  77329        326 ((40917.54 39275.74, 40667.54 39420.08, 40667.54 3970…\n17 6462  96319       2996 ((42167.54 34512.6, 41917.54 34656.94, 41917.54 34945…\n18 6462  96319       2996 ((42167.54 34512.6, 41917.54 34656.94, 41917.54 34945…\n19 6791  97079       1980 ((44167.54 38842.73, 43917.54 38987.07, 43917.54 3927…\n20 6791  97079       1980 ((44167.54 38842.73, 43917.54 38987.07, 43917.54 3927…\n\n\n\nWD_PM_map &lt;- unique(WD_PM_map)\n  \nglimpse(WD_PM_map)\n\nRows: 7,243\nColumns: 4\n$ id         &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 17…\n$ BUS_STOP_N &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TRIPS      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 …\n\n\n\nby_id &lt;- WD_PM_map %&gt;%\n  group_by(id) %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nglimpse(by_id)\n\nRows: 4,931\nColumns: 4\n$ id         &lt;fct&gt; 380, 380, 422, 422, 422, 423, 423, 466, 466, 504, 504, 507,…\n$ BUS_STOP_N &lt;chr&gt; \"25751\", \"25761\", \"26399\", \"25719\", \"25711\", \"25701\", \"2570…\n$ TRIPS      &lt;dbl&gt; 114, 1905, 560, 2600, 297, 335, 2137, 126, 3423, 1258, 27, …\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((4667.538 28450.43..., POLYGON ((4667.538 …\n\n\n\nWD_PM_map &lt;- WD_PM_map %&gt;%\n  group_by(id) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nglimpse(WD_PM_map)\n\nRows: 3,623\nColumns: 3\n$ id       &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 174,…\n$ TRIPS    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ geometry &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 23…\n\n\n\n\n4.1.3. Weekend/Holiday AM Peak Hours (by Origin)\n\nbs_ori_WE_AM &lt;- left_join(busstop, ori_WE_AM,\n                       by = c('BUS_STOP_N' = 'ORIGIN_PT_CODE'))\n\nglimpse(bs_ori_WE_AM)\n\nRows: 5,161\nColumns: 5\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ TRIPS      &lt;dbl&gt; 8, NA, 682, 110, 70, 177, 16, 1442, 2042, 920, 7, 2375, 56,…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\n\nWE_AM_map &lt;- st_join(hexagon, bs_ori_WE_AM) %&gt;%\n  select(id, BUS_STOP_N, TRIPS, geometry)\n\nglimpse(WE_AM_map)\n\nRows: 7,253\nColumns: 4\n$ id         &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 17…\n$ BUS_STOP_N &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TRIPS      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 …\n\n\n\nduplicates &lt;- WE_AM_map %&gt;%\n  group_by_all() %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nhead(duplicates, 20)\n\nSimple feature collection with 20 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 13417.54 ymin: 32347.54 xmax: 44417.54 ymax: 48080.34\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 20 × 4\n   id    BUS_STOP_N TRIPS                                               geometry\n   &lt;fct&gt; &lt;chr&gt;      &lt;dbl&gt;                                          &lt;POLYGON [m]&gt;\n 1 1846  22501       1539 ((13667.54 35378.63, 13417.54 35522.97, 13417.54 3581…\n 2 1846  22501       1539 ((13667.54 35378.63, 13417.54 35522.97, 13417.54 3581…\n 3 2698  43709        415 ((18917.54 36677.67, 18667.54 36822.01, 18667.54 3711…\n 4 2698  43709        415 ((18917.54 36677.67, 18667.54 36822.01, 18667.54 3711…\n 5 3318  47201       2204 ((22667.54 47502.99, 22417.54 47647.32, 22417.54 4793…\n 6 3318  47201       2204 ((22667.54 47502.99, 22417.54 47647.32, 22417.54 4793…\n 7 3341  11009       4698 ((22917.54 32347.54, 22667.54 32491.88, 22667.54 3278…\n 8 3341  11009       4698 ((22917.54 32347.54, 22667.54 32491.88, 22667.54 3278…\n 9 4197  53041       4001 ((28167.54 37110.68, 27917.54 37255.02, 27917.54 3754…\n10 4197  53041       4001 ((28167.54 37110.68, 27917.54 37255.02, 27917.54 3754…\n11 4236  51071       5163 ((28417.54 35811.64, 28167.54 35955.98, 28167.54 3624…\n12 4236  51071       5163 ((28417.54 35811.64, 28167.54 35955.98, 28167.54 3624…\n13 5415  62251       1431 ((35667.54 39708.76, 35417.54 39853.09, 35417.54 4014…\n14 5415  62251       1431 ((35667.54 39708.76, 35417.54 39853.09, 35417.54 4014…\n15 6265  77329         92 ((40917.54 39275.74, 40667.54 39420.08, 40667.54 3970…\n16 6265  77329         92 ((40917.54 39275.74, 40667.54 39420.08, 40667.54 3970…\n17 6462  96319        164 ((42167.54 34512.6, 41917.54 34656.94, 41917.54 34945…\n18 6462  96319        164 ((42167.54 34512.6, 41917.54 34656.94, 41917.54 34945…\n19 6791  97079        290 ((44167.54 38842.73, 43917.54 38987.07, 43917.54 3927…\n20 6791  97079        290 ((44167.54 38842.73, 43917.54 38987.07, 43917.54 3927…\n\n\n\nWE_AM_map &lt;- unique(WE_AM_map)\n  \nglimpse(WE_AM_map)\n\nRows: 7,243\nColumns: 4\n$ id         &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 17…\n$ BUS_STOP_N &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TRIPS      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 …\n\n\n\nby_id &lt;- WE_AM_map %&gt;%\n  group_by(id) %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nglimpse(by_id)\n\nRows: 4,931\nColumns: 4\n$ id         &lt;fct&gt; 380, 380, 422, 422, 422, 423, 423, 466, 466, 504, 504, 507,…\n$ BUS_STOP_N &lt;chr&gt; \"25751\", \"25761\", \"26399\", \"25719\", \"25711\", \"25701\", \"2570…\n$ TRIPS      &lt;dbl&gt; 26, 187, 49, 367, 39, 103, 588, 26, 3885, 148, 1, 181, 4, 2…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((4667.538 28450.43..., POLYGON ((4667.538 …\n\n\n\nWE_AM_map &lt;- WE_AM_map %&gt;%\n  group_by(id) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nglimpse(WE_AM_map)\n\nRows: 3,623\nColumns: 3\n$ id       &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 174,…\n$ TRIPS    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ geometry &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 23…\n\n\n\n\n4.1.4. Weekend/Holiday PM Peak Hours (by Origin)\n\nbs_ori_WE_PM &lt;- left_join(busstop, ori_WE_PM,\n                       by = c('BUS_STOP_N' = 'ORIGIN_PT_CODE'))\n\nglimpse(bs_ori_WE_PM)\n\nRows: 5,161\nColumns: 5\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ TRIPS      &lt;dbl&gt; 10, NA, 589, 47, 77, 169, 82, 492, 2016, 724, 25, 2137, 91,…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\n\nWE_PM_map &lt;- st_join(hexagon, bs_ori_WE_PM) %&gt;%\n  select(id, BUS_STOP_N, TRIPS, geometry)\n\nglimpse(WE_PM_map)\n\nRows: 7,253\nColumns: 4\n$ id         &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 17…\n$ BUS_STOP_N &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TRIPS      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 …\n\n\n\nduplicates &lt;- WE_PM_map %&gt;%\n  group_by_all() %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nglimpse(duplicates)\n\nRows: 20\nColumns: 4\n$ id         &lt;fct&gt; 1846, 1846, 2698, 2698, 3318, 3318, 3341, 3341, 4197, 4197,…\n$ BUS_STOP_N &lt;chr&gt; \"22501\", \"22501\", \"43709\", \"43709\", \"47201\", \"47201\", \"1100…\n$ TRIPS      &lt;dbl&gt; 1315, 1315, 452, 452, 6331, 6331, 2451, 2451, 4067, 4067, 4…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((13667.54 35378.63..., POLYGON ((13667.54 …\n\n\n\nWE_PM_map &lt;- unique(WE_PM_map)\n  \nglimpse(WE_PM_map)\n\nRows: 7,243\nColumns: 4\n$ id         &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 17…\n$ BUS_STOP_N &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TRIPS      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 …\n\n\n\nby_id &lt;- WE_PM_map %&gt;%\n  group_by(id) %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nglimpse(by_id)\n\nRows: 4,931\nColumns: 4\n$ id         &lt;fct&gt; 380, 380, 422, 422, 422, 423, 423, 466, 466, 504, 504, 507,…\n$ BUS_STOP_N &lt;chr&gt; \"25751\", \"25761\", \"26399\", \"25719\", \"25711\", \"25701\", \"2570…\n$ TRIPS      &lt;dbl&gt; 14, 346, 111, 533, 132, 297, 733, 116, 3606, 168, 8, 347, 2…\n$ geometry   &lt;POLYGON [m]&gt; POLYGON ((4667.538 28450.43..., POLYGON ((4667.538 …\n\n\n\nWE_PM_map &lt;- WE_PM_map %&gt;%\n  group_by(id) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nglimpse(WE_PM_map)\n\nRows: 3,623\nColumns: 3\n$ id       &lt;fct&gt; 90, 91, 92, 130, 131, 132, 134, 135, 136, 171, 172, 173, 174,…\n$ TRIPS    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ geometry &lt;POLYGON [m]&gt; POLYGON ((2917.538 22821.26..., POLYGON ((2917.538 23…"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#visualising-geographical-distribution-of-passenger-trips",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#visualising-geographical-distribution-of-passenger-trips",
    "title": "Take-home Exercise 1",
    "section": "4.2. Visualising Geographical Distribution of Passenger Trips",
    "text": "4.2. Visualising Geographical Distribution of Passenger Trips\n\n4.2.1. Weekday AM Peak Hours (by Origin)\n\ntmap_mode(\"plot\")\ntm_shape(WD_AM_map) +\n  tm_fill(\"TRIPS\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          id = \"TRIPS\") +\n  tm_layout(main.title = \"Trips by Origin on Weekday AM Peak Hours\",\n            main.title.position = \"center\",\n            main.title.size = 1,) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2) +\ntm_shape(mpsz2019) +\n  tm_polygons(alpha = 0) +\n  tm_borders(alpha = 0.1) \n\n\n\n\nBy overlaying the mpsz2019 planning subzone polygons over the hexagon layer, we can obtain a clearer visualisation of where most of high ridership numbers originate from during morning peak period.\nMost of the high trip numbers occur in hexagon grids that occur in residential areas such as Toh Guan, Redhill, and Hougang. In contrast, the lowest trip numbers are observed in the city and industrial areas such as Tuas, Lim Chu Kang, and Changi West. Interestingly, there are some residential areas with lower observed trip numbers such as Serangoon Garden and Holland Road. This could be due to the higher presence of landed property in these estates, which is likely correlated to higher likelihood of car ownership. It can also be observed that there is one hexagon grid next to the Tuas checkpoint that has high trips recorded.\n\n\n4.2.2. Weekday PM Peak Hours (by Origin)\n\ntmap_mode('plot')\ntm_shape(WD_PM_map) +\n  tm_fill(\"TRIPS\",\n          style = \"quantile\",\n          palette = \"Greens\",\n          id = \"TRIPS\") +\n  tm_layout(main.title = \"Trips by Origin on Weekday PM Peak Hours\",\n            main.title.position = \"center\",\n            main.title.size = 1,) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2) +\ntm_shape(mpsz2019) +\n  tm_polygons(alpha = 0) +\n  tm_borders(alpha = 0.1) \n\n\n\n\nFrom the visualisation above, we can observe the highest trip numbers in the southern region of Singapore, where a cluster of dark green hexagons are seen. This falls within the Chinatown, City Hall and Bugis subzones, where many workplaces are located. Higher trip numbers originating from these areas are expected during PM peak hours as that is when most people end work. Bus trips originating from residential areas appear to be lower during this period. Interestingly, even though many workplaces can be found in Tuas, low bus trip numbers are recorded during Weekday evening peak periods. This could be due to the provision of company transport for employees working in Tuas.\n\n\n4.2.3. Weekend/Holiday AM Peak Hours (by Origin)\n\ntmap_mode(\"plot\")\ntm_shape(WE_AM_map) +\n  tm_fill(\"TRIPS\",\n          style = \"quantile\",\n          palette = \"Reds\",\n          id =  \"TRIPS\") +\n  tm_layout(main.title = \"Trips by Origin on Weekend/Holidays AM Peak Hours\",\n            main.title.position = \"center\",\n            main.title.size = 1,) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2) +\ntm_shape(mpsz2019) +\n  tm_polygons(alpha = 0) +\n  tm_borders(alpha = 0.1) +\n  tm_grid(alpha = 0.2)\n\n\n\n\nFrom the visualisation, high trip numbers can be observed to be occuring throughout Singapore on Weekend/Holiday morning peak periods, except in the western region of Joo Koon and Tuas. Some individual hexagon points that recorded high bus trips occur at the Turf Club, Changi Point, and Changi Airport. Many of the high trip numbers are recorded in the city area around Chinatown, Raffles Place, and Dhoby Ghaut. Low bus trip numbers are recorded in areas such as Lim Chu Kang, one-north, and Xilin.\n\n\n4.2.4. Weekend PM Peak Hours (by Origin)\n\ntmap_mode(\"plot\")\ntm_shape(WE_PM_map) +\n  tm_fill(\"TRIPS\",\n          style = \"quantile\",\n          palette = \"Oranges\",\n          id = \"TRIPS\") +\n  tm_layout(main.title = \"Trips by Origin on Weekend/Holidays PM Peak Hours\",\n            main.title.position = \"center\",\n            main.title.size = 1,) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2) +\ntm_shape(mpsz2019) +\n  tm_polygons(alpha = 0) +\n  tm_borders(alpha = 0.05) \n\n\n\n\nFrom the visualisation, high trip numbers can be observed to be occuring at different areas in Singapore on Weekend/Holiday evening peak periods. The western region of Joo Koon and Tuas remains relatively quiet with generally low bus trips recorded. Some individual hexagon points that recorded high bus trips occur at the Turf Club, Central Water Catchment, Changi Point and Changi Airport. Many of the high trip numbers are clustered around the city area around Chinatown, Raffles Place, and Dhoby Ghaut. Low bus trip numbers are recorded in areas such as Lim Chu Kang, Kranji, one-north, and Xilin.\n\n\n4.2.3. Comparison\n\n\nShow the code\ntmap_mode(\"plot\")\nWD_AM_plot &lt;- tm_shape(WD_AM_map) +\n  tm_fill(\"TRIPS\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          id = \"TRIPS\") +\n  tm_layout(main.title = \"Weekday AM Peak Hours\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\nWD_PM_plot &lt;- tm_shape(WD_PM_map) +\n  tm_fill(\"TRIPS\",\n          style = \"quantile\",\n          palette = \"Greens\",\n          id = \"TRIPS\") +\n  tm_layout(main.title = \"Weekday PM Peak Hours\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\nWE_AM_plot &lt;- tm_shape(WE_AM_map) +\n  tm_fill(\"TRIPS\",\n          style = \"quantile\",\n          palette = \"Reds\",\n          id =  \"TRIPS\") +\n  tm_layout(main.title = \"Weekend/Holidays AM Peak Hours\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\nWE_PM_plot &lt;- tm_shape(WE_PM_map) +\n  tm_fill(\"TRIPS\",\n          style = \"quantile\",\n          palette = \"Oranges\",\n          id = \"TRIPS\") +\n  tm_layout(main.title = \"Weekend/Holidays PM Peak Hours\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\ntmap_arrange(WD_AM_plot, WD_PM_plot, \n             WE_AM_plot, WE_PM_plot, \n             asp = 2, ncol = 2)\n\n\n\n\n\nPlotting all four graphs together allows for easier comparison.\nFirst, comparing weekday morning and weekday evening trips, it is observed the the much higher highest trip number (569,969) is recorded in the evening as compared to in the morning (327,930). On the western, northern, and north-eastern ends, we can see that there are more grids with a higher number of trips recorded in the morning than in the evening. In contrast, more trips are recorded in the evening in the southern and city areas than in the morning.\nNext, comparing weekend morning and weekend evening trips, visually, the distribution looks rather similar.\nNext, comparing weekday morning and weekend morning trips, more trips are observed to originate from the city area on weekends than on weekdays.\nLastly, comparing weekday evening and weekend evening trips, a slightly higher number of trips originating from the city area is observed on weekends than on weekdays. It also appears that slightly more trips originate from the eastern area of Singapore on weekends than on weekday evenings."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#preparing-data",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#preparing-data",
    "title": "Take-home Exercise 1",
    "section": "5.1. Preparing Data",
    "text": "5.1. Preparing Data\nFirst, we will prepare the datasets to be used for LISA analysis. This is because the original dataset used for mapping contained NA values in order for all hexagon grids to be shown on the map. We will use drop_na() to remove the NA values from the datasets.\n\nWD_AM_lisa &lt;- WD_AM_map %&gt;%\n  ungroup() %&gt;%\n  drop_na()\n\n\nWD_PM_lisa &lt;- WD_PM_map %&gt;%\n  ungroup() %&gt;%\n  drop_na()\n\n\nWE_AM_lisa &lt;- WE_AM_map %&gt;%\n  ungroup() %&gt;%\n  drop_na()\n\n\nWE_PM_lisa &lt;- WE_PM_map %&gt;%\n  ungroup() %&gt;%\n  drop_na()"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#visualising-the-data",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#visualising-the-data",
    "title": "Take-home Exercise 1",
    "section": "5.2. Visualising the Data",
    "text": "5.2. Visualising the Data\n\n5.2.1. Weekday AM Peak Hours (by Origin)\nUsing the weekday morning peak period data as an example, we use qtm() to do a quick plot for visualisation purposes.\n\nqtm(WD_AM_lisa)\n\n\n\n\nFrom the plot above, it is observed that there are many hexagon areas without neighbours after applying drop_na(). This is likely the same case with the remaining three datasets:\n\n\n5.2.2. Weekday PM Peak Hours (by Origin)\n\nqtm(WD_PM_lisa)\n\n\n\n\n\n\n5.2.3. Weekend AM Peak Hours (by Origin)\n\nqtm(WE_AM_lisa)\n\n\n\n\n\n\n5.2.4. Weekend PM Peak Hours (by Origin)\n\nqtm(WE_PM_lisa)"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#deriving-contiguity-weights-and-local-morans-i",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#deriving-contiguity-weights-and-local-morans-i",
    "title": "Take-home Exercise 1",
    "section": "5.3. Deriving Contiguity Weights and Local Moran’s I",
    "text": "5.3. Deriving Contiguity Weights and Local Moran’s I\nBased on the visualisations above, we will use inverse distance weights (IDW) method to derive the spatial weights for each dataset:\n\n5.3.1. Weekday AM Peak Hours (by Origin)\n\nWD_AM_idw &lt;- WD_AM_lisa %&gt;%\n  mutate(nb = st_knn(geometry, k=8),\n         wt = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\nWD_AM_idw\n\nSimple feature collection with 1386 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3667.538 ymin: 26285.36 xmax: 48667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,386 × 5\n   nb        wt        id    TRIPS                                      geometry\n * &lt;nb&gt;      &lt;list&gt;    &lt;fct&gt; &lt;dbl&gt;                                 &lt;POLYGON [m]&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; 258     103 ((3917.538 28017.41, 3667.538 28161.75, 3667…\n 2 &lt;int [8]&gt; &lt;dbl [8]&gt; 342      78 ((4417.538 30615.49, 4167.538 30759.83, 4167…\n 3 &lt;int [8]&gt; &lt;dbl [8]&gt; 380     237 ((4667.538 28450.43, 4417.538 28594.76, 4417…\n 4 &lt;int [8]&gt; &lt;dbl [8]&gt; 382     301 ((4667.538 30182.48, 4417.538 30326.82, 4417…\n 5 &lt;int [8]&gt; &lt;dbl [8]&gt; 383      53 ((4667.538 31048.5, 4417.538 31192.84, 4417.…\n 6 &lt;int [8]&gt; &lt;dbl [8]&gt; 421      64 ((4917.538 28883.44, 4667.538 29027.78, 4667…\n 7 &lt;int [8]&gt; &lt;dbl [8]&gt; 422    1323 ((4917.538 29749.47, 4667.538 29893.8, 4667.…\n 8 &lt;int [8]&gt; &lt;dbl [8]&gt; 423    1034 ((4917.538 30615.49, 4667.538 30759.83, 4667…\n 9 &lt;int [8]&gt; &lt;dbl [8]&gt; 424      60 ((4917.538 31481.52, 4667.538 31625.85, 4667…\n10 &lt;int [8]&gt; &lt;dbl [8]&gt; 425     399 ((4917.538 32347.54, 4667.538 32491.88, 4667…\n# ℹ 1,376 more rows\n\n\nUsing IDW, we will compute Local Moran’s I on TRIPS based on 100 simulations for each study period. The code uses the local_moran() function from the sfdep package:\n\nlisa_WD_AM &lt;- WD_AM_idw %&gt;%\n  mutate(local_moran = local_moran(TRIPS, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\nlisa_WD_AM\n\nSimple feature collection with 1386 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3667.538 ymin: 26285.36 xmax: 48667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,386 × 17\n        ii      eii  var_ii  z_ii   p_ii p_ii_sim p_folded_sim skewness kurtosis\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.00214  9.17e-5 1.05e-6  2.00 0.0451     0.02         0.01   -1.05    2.32  \n 2 0.00486  3.12e-4 6.44e-6  1.79 0.0729     0.02         0.01   -1.13    1.79  \n 3 0.00352 -8.63e-6 3.80e-6  1.81 0.0700     0.02         0.01   -0.762   0.0523\n 4 0.00508 -3.72e-4 6.31e-6  2.17 0.0300     0.02         0.01   -0.500   0.341 \n 5 0.00558  9.15e-5 1.03e-5  1.71 0.0867     0.02         0.01   -1.56    4.65  \n 6 0.00447  2.71e-5 8.30e-6  1.54 0.123      0.02         0.01   -2.00    7.09  \n 7 0.00491  2.12e-4 8.40e-6  1.62 0.105      0.02         0.01   -2.03    6.16  \n 8 0.00570 -1.19e-4 9.37e-6  1.90 0.0573     0.02         0.01   -1.23    2.49  \n 9 0.00566  1.58e-4 8.15e-6  1.93 0.0539     0.02         0.01   -1.06    0.997 \n10 0.00473 -1.29e-4 6.90e-6  1.85 0.0643     0.02         0.01   -0.480  -0.452 \n# ℹ 1,376 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, id &lt;fct&gt;, TRIPS &lt;dbl&gt;, geometry &lt;POLYGON [m]&gt;\n\n\nWe will repeat the above steps for the remaining datasets:\n\n\n5.3.2. Weekday PM Peak Hours (by Origin)\n\nWD_PM_idw &lt;- WD_PM_lisa %&gt;%\n  mutate(nb = st_knn(geometry, k=8),\n         wt = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\nWD_PM_idw\n\nSimple feature collection with 1396 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3667.538 ymin: 26285.36 xmax: 48667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,396 × 5\n   nb        wt        id    TRIPS                                      geometry\n * &lt;nb&gt;      &lt;list&gt;    &lt;fct&gt; &lt;dbl&gt;                                 &lt;POLYGON [m]&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; 258     390 ((3917.538 28017.41, 3667.538 28161.75, 3667…\n 2 &lt;int [8]&gt; &lt;dbl [8]&gt; 342     291 ((4417.538 30615.49, 4167.538 30759.83, 4167…\n 3 &lt;int [8]&gt; &lt;dbl [8]&gt; 380    2019 ((4667.538 28450.43, 4417.538 28594.76, 4417…\n 4 &lt;int [8]&gt; &lt;dbl [8]&gt; 382     299 ((4667.538 30182.48, 4417.538 30326.82, 4417…\n 5 &lt;int [8]&gt; &lt;dbl [8]&gt; 383     241 ((4667.538 31048.5, 4417.538 31192.84, 4417.…\n 6 &lt;int [8]&gt; &lt;dbl [8]&gt; 421     296 ((4917.538 28883.44, 4667.538 29027.78, 4667…\n 7 &lt;int [8]&gt; &lt;dbl [8]&gt; 422    3457 ((4917.538 29749.47, 4667.538 29893.8, 4667.…\n 8 &lt;int [8]&gt; &lt;dbl [8]&gt; 423    2472 ((4917.538 30615.49, 4667.538 30759.83, 4667…\n 9 &lt;int [8]&gt; &lt;dbl [8]&gt; 424     368 ((4917.538 31481.52, 4667.538 31625.85, 4667…\n10 &lt;int [8]&gt; &lt;dbl [8]&gt; 425     114 ((4917.538 32347.54, 4667.538 32491.88, 4667…\n# ℹ 1,386 more rows\n\n\n\nlisa_WD_PM &lt;- WD_PM_idw %&gt;%\n  mutate(local_moran = local_moran(TRIPS, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\nlisa_WD_PM\n\nSimple feature collection with 1396 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3667.538 ymin: 26285.36 xmax: 48667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,396 × 17\n        ii       eii  var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.00114   1.55e-4 4.46e-7 1.47  0.142     0.02         0.01    -1.38     2.16\n 2 0.00259  -5.25e-5 7.14e-6 0.989 0.323     0.02         0.01    -3.84    18.7 \n 3 0.00172   9.97e-5 1.42e-6 1.36  0.174     0.02         0.01    -3.42    17.6 \n 4 0.00270  -1.46e-5 6.86e-6 1.04  0.300     0.02         0.01    -4.17    23.8 \n 5 0.00301  -6.69e-5 7.82e-6 1.10  0.272     0.02         0.01    -3.30    14.2 \n 6 0.00237  -1.43e-4 2.67e-6 1.54  0.124     0.02         0.01    -1.30     1.99\n 7 0.00229  -1.86e-4 4.87e-6 1.12  0.262     0.02         0.01    -3.47    17.2 \n 8 0.00280  -3.49e-4 8.50e-6 1.08  0.280     0.02         0.01    -3.64    14.9 \n 9 0.00305   1.99e-4 3.12e-6 1.62  0.106     0.02         0.01    -2.09     6.29\n10 0.00261   2.16e-4 4.32e-6 1.15  0.249     0.04         0.02    -2.35     7.09\n# ℹ 1,386 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, id &lt;fct&gt;, TRIPS &lt;dbl&gt;, geometry &lt;POLYGON [m]&gt;\n\n\n\n\n5.3.3. Weekend AM Peak Hours (by Origin)\n\nWE_AM_idw &lt;- WE_AM_lisa %&gt;%\n  mutate(nb = st_knn(geometry, k=8),\n         wt = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\nWE_AM_idw\n\nSimple feature collection with 1371 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 4167.538 ymin: 26285.36 xmax: 48667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,371 × 5\n   nb        wt        id    TRIPS                                      geometry\n * &lt;nb&gt;      &lt;list&gt;    &lt;fct&gt; &lt;dbl&gt;                                 &lt;POLYGON [m]&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; 342      52 ((4417.538 30615.49, 4167.538 30759.83, 4167…\n 2 &lt;int [8]&gt; &lt;dbl [8]&gt; 380     213 ((4667.538 28450.43, 4417.538 28594.76, 4417…\n 3 &lt;int [8]&gt; &lt;dbl [8]&gt; 382      88 ((4667.538 30182.48, 4417.538 30326.82, 4417…\n 4 &lt;int [8]&gt; &lt;dbl [8]&gt; 383      76 ((4667.538 31048.5, 4417.538 31192.84, 4417.…\n 5 &lt;int [8]&gt; &lt;dbl [8]&gt; 421      21 ((4917.538 28883.44, 4667.538 29027.78, 4667…\n 6 &lt;int [8]&gt; &lt;dbl [8]&gt; 422     455 ((4917.538 29749.47, 4667.538 29893.8, 4667.…\n 7 &lt;int [8]&gt; &lt;dbl [8]&gt; 423     691 ((4917.538 30615.49, 4667.538 30759.83, 4667…\n 8 &lt;int [8]&gt; &lt;dbl [8]&gt; 424      45 ((4917.538 31481.52, 4667.538 31625.85, 4667…\n 9 &lt;int [8]&gt; &lt;dbl [8]&gt; 425      26 ((4917.538 32347.54, 4667.538 32491.88, 4667…\n10 &lt;int [8]&gt; &lt;dbl [8]&gt; 462      68 ((5167.538 29316.45, 4917.538 29460.79, 4917…\n# ℹ 1,361 more rows\n\n\n\nlisa_WE_AM &lt;- WE_AM_idw %&gt;%\n  mutate(local_moran = local_moran(TRIPS, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\nlisa_WE_AM\n\nSimple feature collection with 1371 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 4167.538 ymin: 26285.36 xmax: 48667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,371 × 17\n        ii      eii  var_ii  z_ii   p_ii p_ii_sim p_folded_sim skewness kurtosis\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.00396 -6.62e-4 8.18e-6  1.62 0.106      0.02         0.01    -2.04    4.94 \n 2 0.00261  3.10e-4 1.93e-6  1.66 0.0974     0.02         0.01    -1.74    4.46 \n 3 0.00422  5.04e-5 6.27e-6  1.66 0.0963     0.02         0.01    -1.47    2.66 \n 4 0.00450  2.03e-5 7.51e-6  1.64 0.102      0.02         0.01    -1.05    0.965\n 5 0.00365  8.58e-5 5.43e-6  1.53 0.127      0.02         0.01    -1.85    3.73 \n 6 0.00406  4.51e-4 3.93e-6  1.82 0.0687     0.02         0.01    -1.58    3.93 \n 7 0.00432 -1.98e-5 7.07e-6  1.63 0.103      0.02         0.01    -1.59    3.03 \n 8 0.00463  4.97e-4 5.96e-6  1.69 0.0909     0.02         0.01    -1.52    3.17 \n 9 0.00361 -1.29e-5 6.46e-6  1.42 0.154      0.02         0.01    -1.81    4.01 \n10 0.00461  9.94e-5 5.32e-6  1.95 0.0507     0.02         0.01    -1.11    1.86 \n# ℹ 1,361 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, id &lt;fct&gt;, TRIPS &lt;dbl&gt;, geometry &lt;POLYGON [m]&gt;\n\n\n\n\n5.3.4. Weekend PM Peak Hours (by Origin)\n\nWE_PM_idw &lt;- WE_PM_lisa %&gt;%\n  mutate(nb = st_knn(geometry, k=8),\n         wt = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\nWE_PM_idw\n\nSimple feature collection with 1372 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3667.538 ymin: 26285.36 xmax: 46667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,372 × 5\n   nb        wt        id    TRIPS                                      geometry\n * &lt;nb&gt;      &lt;list&gt;    &lt;fct&gt; &lt;dbl&gt;                                 &lt;POLYGON [m]&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; 258      56 ((3917.538 28017.41, 3667.538 28161.75, 3667…\n 2 &lt;int [8]&gt; &lt;dbl [8]&gt; 342     100 ((4417.538 30615.49, 4167.538 30759.83, 4167…\n 3 &lt;int [8]&gt; &lt;dbl [8]&gt; 380     360 ((4667.538 28450.43, 4417.538 28594.76, 4417…\n 4 &lt;int [8]&gt; &lt;dbl [8]&gt; 382     101 ((4667.538 30182.48, 4417.538 30326.82, 4417…\n 5 &lt;int [8]&gt; &lt;dbl [8]&gt; 383      55 ((4667.538 31048.5, 4417.538 31192.84, 4417.…\n 6 &lt;int [8]&gt; &lt;dbl [8]&gt; 421      53 ((4917.538 28883.44, 4667.538 29027.78, 4667…\n 7 &lt;int [8]&gt; &lt;dbl [8]&gt; 422     776 ((4917.538 29749.47, 4667.538 29893.8, 4667.…\n 8 &lt;int [8]&gt; &lt;dbl [8]&gt; 423    1030 ((4917.538 30615.49, 4667.538 30759.83, 4667…\n 9 &lt;int [8]&gt; &lt;dbl [8]&gt; 424      49 ((4917.538 31481.52, 4667.538 31625.85, 4667…\n10 &lt;int [8]&gt; &lt;dbl [8]&gt; 425     153 ((4917.538 32347.54, 4667.538 32491.88, 4667…\n# ℹ 1,362 more rows\n\n\n\nlisa_WE_PM &lt;- WE_PM_idw %&gt;%\n  mutate(local_moran = local_moran(TRIPS, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\nlisa_WE_PM\n\nSimple feature collection with 1372 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3667.538 ymin: 26285.36 xmax: 46667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,372 × 17\n        ii      eii  var_ii  z_ii   p_ii p_ii_sim p_folded_sim skewness kurtosis\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.00131  1.32e-4 4.61e-7  1.74 0.0817     0.02         0.01    -1.01    0.913\n 2 0.00289 -1.32e-4 6.04e-6  1.23 0.219      0.02         0.01    -3.40   16.0  \n 3 0.00206  4.90e-6 2.17e-6  1.40 0.162      0.02         0.01    -1.61    2.48 \n 4 0.00308  1.18e-4 3.84e-6  1.51 0.130      0.02         0.01    -1.55    2.84 \n 5 0.00332  1.63e-4 3.44e-6  1.70 0.0882     0.02         0.01    -1.40    2.25 \n 6 0.00275  8.45e-5 3.78e-6  1.37 0.171      0.02         0.01    -2.38    8.89 \n 7 0.00280 -3.28e-5 3.30e-6  1.56 0.119      0.02         0.01    -2.09    5.85 \n 8 0.00294  2.73e-4 2.64e-6  1.64 0.101      0.02         0.01    -1.69    4.60 \n 9 0.00340  1.15e-4 4.88e-6  1.49 0.137      0.02         0.01    -1.82    5.34 \n10 0.00259  2.11e-4 3.25e-6  1.32 0.188      0.02         0.01    -1.49    2.42 \n# ℹ 1,362 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, id &lt;fct&gt;, TRIPS &lt;dbl&gt;, geometry &lt;POLYGON [m]&gt;"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#visualising-lisa",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#visualising-lisa",
    "title": "Take-home Exercise 1",
    "section": "5.4. Visualising LISA",
    "text": "5.4. Visualising LISA\nLastly, we will visualise the results of the LISA analysis on choropleth maps. A LISA map is a categorical map showing outliers and clusters. There are two types of outliers, High-Low and Low-High, and two types of clusters, High-High and Low-Low. LISA map is an interpreted map by combining local Moran’s I of geographical areas and their respective p-values.\nOne map will be plotted for each study period, and each map will only display significant associations (i.e. p-value &lt; 0.05).\n\n5.4.1. Weekday AM Peak Hours (by Origin)\n\nlisa_WD_AM_sig &lt;- lisa_WD_AM  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n\ntmap_mode(\"plot\")\ntm_shape(hexagon) + \n  tm_fill(alpha = 0.1) +\n  tm_borders(alpha = 0.1) +\ntm_shape(lisa_WD_AM) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_WD_AM_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4) +\n  tm_layout(main.title = \"LISA Analysis of Trips During Weekday AM Peak (by Origin)\",\n            main.title.position = \"center\",\n            main.title.size = 1) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n\n\n\nIt is observed from the visualisation that most of the associations are not considered significant (p-value greater than 0.05) as they are represented by grey hexagons.\nWe can observe that there are more Low-Low clusters than High-High clusters. Most of the Low-Low clusters occur in the Tuas, Lim Chu Kang, Mandai, Marina Bay, and Changi areas. The High-High clusters appear in residential areas such as Woodlands, Choa Chu Kang, Punggol, and Serangoon.\nHowever, there are some High-Low and Low-High outliers that are observed. Some of the High-Low outliers are observed near the Low-Low clusters in the Tuas and Mandai areas. There are also Low-High outliers found in the residential areas such as Jurong, Woodlands, and Ang Mo Kio.\n\n\n5.4.2. Weekday PM Peak Hours (by Origin)\n\nlisa_WD_PM_sig &lt;- lisa_WD_PM  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n\ntmap_mode(\"plot\")\ntm_shape(hexagon) + \n  tm_fill(alpha = 0.1) +\n  tm_borders(alpha = 0.1) +\ntm_shape(lisa_WD_PM) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_WD_PM_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)+\n  tm_layout(main.title = \"LISA Analysis of Trips During Weekday PM Peak (by Origin)\",\n            main.title.position = \"center\",\n            main.title.size = 1) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n\n\n\nIt is observed from the visualisation that most of the associations are not considered significant (p-value greater than 0.05) as they are represented by grey hexagons.\nWe can observe that there are more Low-Low clusters than High-High clusters. Most of the Low-Low clusters occur in the Tuas, Lim Chu Kang, Mandai, and Tampines areas. The High-High clusters appear in some residential areas such as Clementi, Ang Mo Kio, and Tampines areas. Some High-High clusters are also observed in the city area around Bugis.\nHowever, there are some High-Low and Low-High outliers that are observed. Some of the High-Low outliers are observed near the Low-Low clusters in Tuas, Mandai, and Seletar areas. There are also Low-High outliers found in the residential areas such as Jurong, Kranji, Woodlands, and Ang Mo Kio.\n\n\n5.4.3. Weekend AM Peak Hours (by Origin)\n\nlisa_WE_AM_sig &lt;- lisa_WE_AM  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n\ntmap_mode(\"plot\")\ntm_shape(hexagon) + \n  tm_fill(alpha = 0.1) +\n  tm_borders(alpha = 0.1) +\ntm_shape(lisa_WE_AM) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_WE_AM_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)+\n  tm_layout(main.title = \"LISA Analysis of Trips During Weekend AM Peak (by Origin)\",\n            main.title.position = \"center\",\n            main.title.size = 1) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n\n\n\nIt is observed from the visualisation that most of the associations are not considered significant (p-value greater than 0.05) as they are represented by grey hexagons.\nWe can observe that there are more Low-Low clusters than High-High clusters. Most of the Low-Low clusters occur in the Tuas, Lim Chu Kang, Mandai, Seletar, Tampines, and Changi areas. The High-High clusters appear in residential areas such as Clementi, Bukit Batok, Choa Chu Kang, Punggol, and Serangoon. Some High-High clusters are also observed in the city area around Bugis.\nHowever, there are some High-Low and Low-High outliers that are observed, although they appear more sporadic. Some of the High-Low outliers are observed near the Low-Low clusters in the Tuas, Mandai, and Seletar areas. There are also Low-High outliers found in the residential areas such as Jurong, Choa Chu Kang, Woodlands, and Ang Mo Kio. Some Low-High outliers are also observed near High-High clusters in the city area.\n\n\n5.4.4. Weekend PM Peak Hours (by Origin)\n\nlisa_WE_PM_sig &lt;- lisa_WE_PM  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n\ntmap_mode(\"plot\")\ntm_shape(hexagon) + \n  tm_fill(alpha = 0.1) +\n  tm_borders(alpha = 0.1) +\ntm_shape(lisa_WE_PM) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_WE_PM_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)+\n  tm_layout(main.title = \"LISA Analysis of Trips During Weekend AM Peak (by Origin)\",\n            main.title.position = \"center\",\n            main.title.size = 1) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n\n\n\nIt is observed from the visualisation that most of the associations are not considered significant (p-value greater than 0.05) as they are represented by grey hexagons.\nWe can observe that there are more Low-Low clusters than High-High clusters. Most of the Low-Low clusters occur in the Tuas, Lim Chu Kang, Mandai, and Tampines areas. The High-High clusters appear in some residential areas such as Clementi, Ang Mo Kio, and Tampines areas. Some High-High clusters are also observed in the city area around Bugis.\nHowever, there are some High-Low and Low-High outliers that are observed. Some of the High-Low outliers are observed near the Low-Low clusters in Tuas, Mandai, and Seletar areas. There are also Low-High outliers found in the residential areas such as Clementi, Choa Chu Kang, Woodlands, and Ang Mo Kio. Some Low-High outliers are also observed near the High-High clusters in the city area.\n\n\n5.4.5. Comparison\n\n\nShow the code\ntmap_mode(\"plot\")\nlisa_WD_AM_plot &lt;- tm_shape(hexagon) + \n  tm_fill(alpha = 0.1) +\n  tm_borders(alpha = 0.1) +\ntm_shape(lisa_WD_AM) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_WD_AM_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4) +\n  tm_layout(main.title = \"Weekday AM Peak\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\nlisa_WD_PM_plot &lt;- tm_shape(hexagon) + \n  tm_fill(alpha = 0.1) +\n  tm_borders(alpha = 0.1) +\ntm_shape(lisa_WD_PM) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_WD_PM_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)+\n  tm_layout(main.title = \"Weekday PM Peak\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n  \nlisa_WE_AM_plot &lt;- tm_shape(hexagon) + \n  tm_fill(alpha = 0.1) +\n  tm_borders(alpha = 0.1) +\ntm_shape(lisa_WE_AM) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_WE_AM_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)+\n  tm_layout(main.title = \"Weekend/Holiday AM Peak\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n  \n  \nlisa_WE_PM_plot &lt;- tm_shape(hexagon) + \n  tm_fill(alpha = 0.1) +\n  tm_borders(alpha = 0.1) +\ntm_shape(lisa_WE_PM) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_WE_PM_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)+\n  tm_layout(main.title = \"Weekend/Holiday AM Peak\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\ntmap_arrange(lisa_WD_AM_plot, lisa_WD_PM_plot,\n             lisa_WE_AM_plot, lisa_WE_PM_plot,\n             asp = 2, ncol = 2)\n\n\n\n\n\nPlotting all four graphs together allows for easier comparison.\nFirstly, the graphs for Weekday AM and Weekday PM are compared. It is observed that there are less Low-Low and High-High clusters occurring in the evening than in the morning. There are more closely situated Low-Low and High-High clusters occurring in the morning than in the evening.\nNext, comparing the Weekend AM and Weekend PM graphs, it is observed that there are more Low-Low and High-High clusters occurring in the morning than in the evening. These observations can be seen around Woodlands and Changi for Low-Low clusters and around Clementi and Punggol areas. However, more occurrence of Low-Low clusters is observed in the Lim Chu Kang area in the evening than in the morning.\nNext, comparing the Weekday AM and Weekend AM graphs, it is observed that the Low-Low clusters, generally occur in the same locations on weekdays and weekends. There appears to be more closely situated High-High clusters occurring on weekdays than on weekends. High-High clusters in the city most likely occur on weekends only.\nLastly, comparing the Weekday PM and Weekend PM graphs, it is observed that the Low-Low clusters generally occur in similar locations on weekdays and weekends. Some slight difference can be observed in the Pasir Panjang region where more Low-Low clusters are observed on weekends than on weekdays. There appears to be more High-High clusters occurring on weekends than on weekdays, especially in the city area."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#footnotes",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#footnotes",
    "title": "Take-home Exercise 1",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://r4ds.had.co.nz/data-import.html (Section 11.2.1)↩︎\nhttps://desktop.arcgis.com/en/arcmap/latest/tools/spatial-statistics-toolbox/h-whyhexagons.htm↩︎\nhttps://pro.arcgis.com/en/pro-app/latest/help/analysis/geostatistical-analyst/how-inverse-distance-weighted-interpolation-works.htm↩︎"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#deriving-spatial-weights-and-local-morans-i",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#deriving-spatial-weights-and-local-morans-i",
    "title": "Take-home Exercise 1",
    "section": "5.3. Deriving Spatial Weights and Local Moran’s I",
    "text": "5.3. Deriving Spatial Weights and Local Moran’s I\nBased on the visualisations above, we will use inverse distance weights (IDW) method to derive the spatial weights for each dataset. IDW assumes that each measured point has a local influence that diminishes with distance. It gives greater weights to points closest to the prediction location, and the weights diminish as a function of distance3.\n\n5.3.1. Weekday AM Peak Hours (by Origin)\n\nWD_AM_idw &lt;- WD_AM_lisa %&gt;%\n  mutate(nb = st_knn(geometry, k=8),\n         wt = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\nWD_AM_idw\n\nSimple feature collection with 1386 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3667.538 ymin: 26285.36 xmax: 48667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,386 × 5\n   nb        wt        id    TRIPS                                      geometry\n * &lt;nb&gt;      &lt;list&gt;    &lt;fct&gt; &lt;dbl&gt;                                 &lt;POLYGON [m]&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; 258     103 ((3917.538 28017.41, 3667.538 28161.75, 3667…\n 2 &lt;int [8]&gt; &lt;dbl [8]&gt; 342      78 ((4417.538 30615.49, 4167.538 30759.83, 4167…\n 3 &lt;int [8]&gt; &lt;dbl [8]&gt; 380     237 ((4667.538 28450.43, 4417.538 28594.76, 4417…\n 4 &lt;int [8]&gt; &lt;dbl [8]&gt; 382     301 ((4667.538 30182.48, 4417.538 30326.82, 4417…\n 5 &lt;int [8]&gt; &lt;dbl [8]&gt; 383      53 ((4667.538 31048.5, 4417.538 31192.84, 4417.…\n 6 &lt;int [8]&gt; &lt;dbl [8]&gt; 421      64 ((4917.538 28883.44, 4667.538 29027.78, 4667…\n 7 &lt;int [8]&gt; &lt;dbl [8]&gt; 422    1323 ((4917.538 29749.47, 4667.538 29893.8, 4667.…\n 8 &lt;int [8]&gt; &lt;dbl [8]&gt; 423    1034 ((4917.538 30615.49, 4667.538 30759.83, 4667…\n 9 &lt;int [8]&gt; &lt;dbl [8]&gt; 424      60 ((4917.538 31481.52, 4667.538 31625.85, 4667…\n10 &lt;int [8]&gt; &lt;dbl [8]&gt; 425     399 ((4917.538 32347.54, 4667.538 32491.88, 4667…\n# ℹ 1,376 more rows\n\n\nUsing IDW, we will compute Local Moran’s I on TRIPS based on 100 simulations for each study period. The code uses the local_moran() function from the sfdep package:\n\nlisa_WD_AM &lt;- WD_AM_idw %&gt;%\n  mutate(local_moran = local_moran(TRIPS, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\nlisa_WD_AM\n\nSimple feature collection with 1386 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3667.538 ymin: 26285.36 xmax: 48667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,386 × 17\n        ii      eii  var_ii  z_ii   p_ii p_ii_sim p_folded_sim skewness kurtosis\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.00214 -3.25e-4 1.83e-6  1.83 0.0678     0.02         0.01   -1.09     0.836\n 2 0.00486  4.08e-4 6.62e-6  1.73 0.0835     0.02         0.01   -1.60     3.00 \n 3 0.00352 -1.04e-4 3.62e-6  1.91 0.0566     0.02         0.01   -0.957    0.754\n 4 0.00508  4.31e-5 6.97e-6  1.91 0.0565     0.02         0.01   -1.51     4.46 \n 5 0.00558  5.48e-4 7.89e-6  1.79 0.0732     0.02         0.01   -0.752    0.401\n 6 0.00447 -2.42e-5 6.59e-6  1.75 0.0798     0.02         0.01   -1.48     3.67 \n 7 0.00491  2.08e-4 6.42e-6  1.86 0.0636     0.02         0.01   -1.05     0.845\n 8 0.00570  2.18e-4 9.25e-6  1.80 0.0715     0.02         0.01   -0.621   -0.360\n 9 0.00566 -9.52e-5 7.37e-6  2.12 0.0340     0.02         0.01   -0.720    0.984\n10 0.00473 -5.52e-4 1.15e-5  1.56 0.120      0.02         0.01   -1.14     1.21 \n# ℹ 1,376 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, id &lt;fct&gt;, TRIPS &lt;dbl&gt;, geometry &lt;POLYGON [m]&gt;\n\n\nWe will repeat the above steps for the remaining datasets:\n\n\n5.3.2. Weekday PM Peak Hours (by Origin)\n\nWD_PM_idw &lt;- WD_PM_lisa %&gt;%\n  mutate(nb = st_knn(geometry, k=8),\n         wt = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\nWD_PM_idw\n\nSimple feature collection with 1396 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3667.538 ymin: 26285.36 xmax: 48667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,396 × 5\n   nb        wt        id    TRIPS                                      geometry\n * &lt;nb&gt;      &lt;list&gt;    &lt;fct&gt; &lt;dbl&gt;                                 &lt;POLYGON [m]&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; 258     390 ((3917.538 28017.41, 3667.538 28161.75, 3667…\n 2 &lt;int [8]&gt; &lt;dbl [8]&gt; 342     291 ((4417.538 30615.49, 4167.538 30759.83, 4167…\n 3 &lt;int [8]&gt; &lt;dbl [8]&gt; 380    2019 ((4667.538 28450.43, 4417.538 28594.76, 4417…\n 4 &lt;int [8]&gt; &lt;dbl [8]&gt; 382     299 ((4667.538 30182.48, 4417.538 30326.82, 4417…\n 5 &lt;int [8]&gt; &lt;dbl [8]&gt; 383     241 ((4667.538 31048.5, 4417.538 31192.84, 4417.…\n 6 &lt;int [8]&gt; &lt;dbl [8]&gt; 421     296 ((4917.538 28883.44, 4667.538 29027.78, 4667…\n 7 &lt;int [8]&gt; &lt;dbl [8]&gt; 422    3457 ((4917.538 29749.47, 4667.538 29893.8, 4667.…\n 8 &lt;int [8]&gt; &lt;dbl [8]&gt; 423    2472 ((4917.538 30615.49, 4667.538 30759.83, 4667…\n 9 &lt;int [8]&gt; &lt;dbl [8]&gt; 424     368 ((4917.538 31481.52, 4667.538 31625.85, 4667…\n10 &lt;int [8]&gt; &lt;dbl [8]&gt; 425     114 ((4917.538 32347.54, 4667.538 32491.88, 4667…\n# ℹ 1,386 more rows\n\n\n\nlisa_WD_PM &lt;- WD_PM_idw %&gt;%\n  mutate(local_moran = local_moran(TRIPS, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\nlisa_WD_PM\n\nSimple feature collection with 1396 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3667.538 ymin: 26285.36 xmax: 48667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,396 × 17\n        ii      eii  var_ii  z_ii   p_ii p_ii_sim p_folded_sim skewness kurtosis\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.00114  9.54e-5 4.60e-7  1.53 0.125      0.02         0.01   -1.36     1.56 \n 2 0.00259  2.31e-4 2.00e-6  1.67 0.0951     0.02         0.01   -0.900    0.333\n 3 0.00172 -9.08e-6 2.01e-6  1.22 0.222      0.02         0.01   -3.56    17.2  \n 4 0.00270  2.56e-4 2.80e-6  1.46 0.144      0.02         0.01   -1.94     4.15 \n 5 0.00301 -2.39e-4 5.90e-6  1.34 0.181      0.02         0.01   -2.11     4.99 \n 6 0.00237  1.19e-4 1.91e-6  1.63 0.103      0.02         0.01   -2.25     8.73 \n 7 0.00229  6.35e-5 2.66e-6  1.36 0.172      0.02         0.01   -2.99    11.9  \n 8 0.00280 -1.22e-4 5.32e-6  1.27 0.205      0.02         0.01   -1.95     4.19 \n 9 0.00305  5.00e-5 5.95e-6  1.23 0.218      0.02         0.01   -4.37    26.0  \n10 0.00261  3.87e-4 2.22e-6  1.49 0.136      0.02         0.01   -1.75     3.78 \n# ℹ 1,386 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, id &lt;fct&gt;, TRIPS &lt;dbl&gt;, geometry &lt;POLYGON [m]&gt;\n\n\n\n\n5.3.3. Weekend AM Peak Hours (by Origin)\n\nWE_AM_idw &lt;- WE_AM_lisa %&gt;%\n  mutate(nb = st_knn(geometry, k=8),\n         wt = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\nWE_AM_idw\n\nSimple feature collection with 1371 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 4167.538 ymin: 26285.36 xmax: 48667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,371 × 5\n   nb        wt        id    TRIPS                                      geometry\n * &lt;nb&gt;      &lt;list&gt;    &lt;fct&gt; &lt;dbl&gt;                                 &lt;POLYGON [m]&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; 342      52 ((4417.538 30615.49, 4167.538 30759.83, 4167…\n 2 &lt;int [8]&gt; &lt;dbl [8]&gt; 380     213 ((4667.538 28450.43, 4417.538 28594.76, 4417…\n 3 &lt;int [8]&gt; &lt;dbl [8]&gt; 382      88 ((4667.538 30182.48, 4417.538 30326.82, 4417…\n 4 &lt;int [8]&gt; &lt;dbl [8]&gt; 383      76 ((4667.538 31048.5, 4417.538 31192.84, 4417.…\n 5 &lt;int [8]&gt; &lt;dbl [8]&gt; 421      21 ((4917.538 28883.44, 4667.538 29027.78, 4667…\n 6 &lt;int [8]&gt; &lt;dbl [8]&gt; 422     455 ((4917.538 29749.47, 4667.538 29893.8, 4667.…\n 7 &lt;int [8]&gt; &lt;dbl [8]&gt; 423     691 ((4917.538 30615.49, 4667.538 30759.83, 4667…\n 8 &lt;int [8]&gt; &lt;dbl [8]&gt; 424      45 ((4917.538 31481.52, 4667.538 31625.85, 4667…\n 9 &lt;int [8]&gt; &lt;dbl [8]&gt; 425      26 ((4917.538 32347.54, 4667.538 32491.88, 4667…\n10 &lt;int [8]&gt; &lt;dbl [8]&gt; 462      68 ((5167.538 29316.45, 4917.538 29460.79, 4917…\n# ℹ 1,361 more rows\n\n\n\nlisa_WE_AM &lt;- WE_AM_idw %&gt;%\n  mutate(local_moran = local_moran(TRIPS, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\nlisa_WE_AM\n\nSimple feature collection with 1371 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 4167.538 ymin: 26285.36 xmax: 48667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,371 × 17\n        ii      eii  var_ii  z_ii   p_ii p_ii_sim p_folded_sim skewness kurtosis\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.00396  7.90e-5 6.06e-6  1.58 0.114      0.02         0.01   -2.05     5.69 \n 2 0.00261  2.29e-4 2.14e-6  1.63 0.103      0.02         0.01   -1.98     5.06 \n 3 0.00422  5.44e-5 5.15e-6  1.83 0.0667     0.02         0.01   -1.70     5.31 \n 4 0.00450  1.57e-4 5.60e-6  1.84 0.0665     0.02         0.01   -0.883    0.214\n 5 0.00365 -9.33e-5 4.56e-6  1.75 0.0800     0.02         0.01   -1.60     3.93 \n 6 0.00406  3.01e-4 3.40e-6  2.04 0.0415     0.02         0.01   -1.38     3.53 \n 7 0.00432  2.30e-4 4.39e-6  1.95 0.0511     0.02         0.01   -1.18     1.16 \n 8 0.00463 -2.14e-4 1.00e-5  1.53 0.127      0.02         0.01   -2.20     6.55 \n 9 0.00361  5.48e-5 5.06e-6  1.58 0.114      0.02         0.01   -1.84     4.79 \n10 0.00461  2.98e-4 5.65e-6  1.81 0.0700     0.02         0.01   -1.60     3.99 \n# ℹ 1,361 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, id &lt;fct&gt;, TRIPS &lt;dbl&gt;, geometry &lt;POLYGON [m]&gt;\n\n\n\n\n5.3.4. Weekend PM Peak Hours (by Origin)\n\nWE_PM_idw &lt;- WE_PM_lisa %&gt;%\n  mutate(nb = st_knn(geometry, k=8),\n         wt = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\nWE_PM_idw\n\nSimple feature collection with 1372 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3667.538 ymin: 26285.36 xmax: 46667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,372 × 5\n   nb        wt        id    TRIPS                                      geometry\n * &lt;nb&gt;      &lt;list&gt;    &lt;fct&gt; &lt;dbl&gt;                                 &lt;POLYGON [m]&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; 258      56 ((3917.538 28017.41, 3667.538 28161.75, 3667…\n 2 &lt;int [8]&gt; &lt;dbl [8]&gt; 342     100 ((4417.538 30615.49, 4167.538 30759.83, 4167…\n 3 &lt;int [8]&gt; &lt;dbl [8]&gt; 380     360 ((4667.538 28450.43, 4417.538 28594.76, 4417…\n 4 &lt;int [8]&gt; &lt;dbl [8]&gt; 382     101 ((4667.538 30182.48, 4417.538 30326.82, 4417…\n 5 &lt;int [8]&gt; &lt;dbl [8]&gt; 383      55 ((4667.538 31048.5, 4417.538 31192.84, 4417.…\n 6 &lt;int [8]&gt; &lt;dbl [8]&gt; 421      53 ((4917.538 28883.44, 4667.538 29027.78, 4667…\n 7 &lt;int [8]&gt; &lt;dbl [8]&gt; 422     776 ((4917.538 29749.47, 4667.538 29893.8, 4667.…\n 8 &lt;int [8]&gt; &lt;dbl [8]&gt; 423    1030 ((4917.538 30615.49, 4667.538 30759.83, 4667…\n 9 &lt;int [8]&gt; &lt;dbl [8]&gt; 424      49 ((4917.538 31481.52, 4667.538 31625.85, 4667…\n10 &lt;int [8]&gt; &lt;dbl [8]&gt; 425     153 ((4917.538 32347.54, 4667.538 32491.88, 4667…\n# ℹ 1,362 more rows\n\n\n\nlisa_WE_PM &lt;- WE_PM_idw %&gt;%\n  mutate(local_moran = local_moran(TRIPS, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\nlisa_WE_PM\n\nSimple feature collection with 1372 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3667.538 ymin: 26285.36 xmax: 46667.54 ymax: 50245.4\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 1,372 × 17\n        ii       eii  var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.00131  -2.67e-5 8.75e-7  1.43 0.152     0.02         0.01    -2.22     6.70\n 2 0.00289   2.00e-4 3.30e-6  1.48 0.139     0.02         0.01    -1.88     4.84\n 3 0.00206  -1.52e-5 2.34e-6  1.36 0.174     0.02         0.01    -2.49     7.64\n 4 0.00308  -3.85e-4 9.78e-6  1.11 0.267     0.02         0.01    -2.84    11.2 \n 5 0.00332   3.44e-4 3.84e-6  1.52 0.128     0.02         0.01    -1.50     2.27\n 6 0.00275  -2.62e-4 7.51e-6  1.10 0.272     0.02         0.01    -4.24    24.7 \n 7 0.00280  -8.08e-5 3.19e-6  1.61 0.107     0.02         0.01    -1.71     3.71\n 8 0.00294   1.23e-4 4.94e-6  1.27 0.205     0.02         0.01    -3.17    14.2 \n 9 0.00340  -5.64e-4 1.35e-5  1.08 0.280     0.02         0.01    -3.53    15.9 \n10 0.00259  -5.24e-4 8.67e-6  1.06 0.291     0.02         0.01    -2.42     6.13\n# ℹ 1,362 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, id &lt;fct&gt;, TRIPS &lt;dbl&gt;, geometry &lt;POLYGON [m]&gt;"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex02/data/geospatial/Business.html",
    "href": "Take_home_Ex/Take_home_Ex02/data/geospatial/Business.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex02/data/geospatial/entertn.html",
    "href": "Take_home_Ex/Take_home_Ex02/data/geospatial/entertn.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex02/data/geospatial/F&B.html",
    "href": "Take_home_Ex/Take_home_Ex02/data/geospatial/F&B.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex02/data/geospatial/FinServ.html",
    "href": "Take_home_Ex/Take_home_Ex02/data/geospatial/FinServ.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex02/data/geospatial/Liesure&Recreation.html",
    "href": "Take_home_Ex/Take_home_Ex02/data/geospatial/Liesure&Recreation.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex02/data/geospatial/Retails.html",
    "href": "Take_home_Ex/Take_home_Ex02/data/geospatial/Retails.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  }
]