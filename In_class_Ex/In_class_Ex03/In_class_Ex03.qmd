---
title: "In-Class Exercise 3: Calibrating Spatial Interaction Models"
date: "2 December 2023"
date-modified: "last-modified"
format: html
execute: 
  echo: true # all code chunks will appear
  eval: true # all code chunks will run live
  warning: false # do not display warning message
editor: visual
---

# 1. Overview

Spatial Interaction Models (SIMs) are mathematical models developed by Alan Wilson in the late 1960s and early 1970s to estimate flows between spatial entities. There are four main types of traditional SIMs:

1.  Unconstrained
2.  Production-constrained
3.  Attraction-constrained
4.  Doubly-constrained

Ordinary least square (OLS), log-normal, Poisson and negative binomial regression methods have been used extensively to calibrate OD flow models by processing flow data as different types of dependent variables.

# 2. Getting Started

We will use the following R packages in this exercise:

-   `sf` for importing, integrating, processing and transforming geospatial data

-   `tidyverse` for importing, integrating, wrangling and visualising data

-   `tmap` for creating thematic maps

```{r}
pacman::p_load(tmap, sp, DT, stplanr, 
               performance, reshape2, 
               ggpubr, units, tidyverse)
```


# 3. The Data

The following data from Hands-on Exercise 3 will be used:
-   od_data.rds: weekday morning peak passenger flows at planning subzone level.
-   mpsz2019.rds: URA Master Plan 2019 Planning Subzone boundary in simple feature tibble data frame format
-   pop.csv: An additional attribute data file 

# 4. Computing Distance Matrix
In spatial interaction, a distance matrix is a table that shows the distance between pairs of locations. By definition, a location's distance from itself is 0.

We will compute a distance matrix by using the URA Masterplan Planning Subzone boundaries. First, we will import mpsz.rds into R by using the following code:

```{r}
mpsz2019 <- read_rds("data/rds/mpsz2019.rds")
mpsz2019
```
## 4.1. Converting from sf data.table to SpatialPolygonsDataFrame

One way to compute distance matrix is based on sf, and another method is based on sp. Computing distance matrix using sf method takes relatively longer than using sp method. Hence, sp method is used in the codes below.

First, mpsz2019 has to be converted mpsz2019 from sf tibble data frame to SpatialPolygonsDataFrame:

```{r}
mpsz2019_sp <- as(mpsz2019, "Spatial")
mpsz2019_sp
```

## 4.2. Computing Distance Matrix
Next, we will use `spDists()` from the `sp` package to compute the Euclidean distance between centroids of the planning subzones:

```{r}
dist <- spDists(mpsz2019_sp, longlat = FALSE)
head(dist, n = c(10,10))
```

The output dist is a matrix object class of R and that the column and row headers are not labelled with the planning subzone codes.

## 4.3. Labelling Column and Row Headers of a Distance Matrix

First, we will create a list sorted by the planning subzone code:

```{r}
sz_names <- mpsz2019$SUBZONE_C
```

Next, we reattach `SUBZONE_C` to row and coloumn for distance matrix matching:

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
```

## 4.4. Pivoting Distance Value by `SUBZONE_C`

Next, we will pivot the distance matrix into a long table by using row and column subzone codes:

```{r}
dist_pair <- melt(dist) %>%
  rename(dist = value)
head(dist_pair, 10)
```
We can observe that the within-zone distance is 0.

## 4.5. Updating Intra-zonal Distances
We will append a constant value o replace the intra-zonal distance of 0.

First, we will determine the minimum of the distance:
```{r}
dist_pair %>%
  filter(dist > 0) %>%
  summary()
```
Next, we will add a constant value of 50m into intra-zonal distance:
```{r}
dist_pair$dist <- ifelse(dist_pair$dist == 0, 50,
                         dist_pair$dist)

summary(dist_pair)
```

Next, we will rename the origin and destination fields:

```{r}
dist_pair <- dist_pair %>%
  rename(orig = Var1,
         dest = Var2)
```

Save the output in rds format for future use:

```{r}
write_rds(dist_pair, "data/rds/dist_pair.rds")
```

# 5. Preparing Flow Data

We will import od_data.rds into R:
```{r}
od_data <- read_rds("data/rds/od_data.rds")
```

Next, we will compute the total passenger trips between and within subzones by using the following codes:

```{r}
flow_data <- od_data %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(TRIPS = sum(AM_PEAK))

head(flow_data, 10)
```

## 5.1. Separating Intra-flow from Passenger Volume Dataframe

We will use the following code to add three new fields into the `flow_data` dataframe:

```{r}
flow_data$FlowNoIntra <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 0,
  flow_data$TRIPS)

flow_data$offset <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 0.000001,
  1)
```

## 5.2. Combining Passenger Volume Data with Distance Value
First, we need to convert the data value type of `ORIGIN_SZ` and `DESTIN_SZ` into factor:

```{r}
flow_data$ORIGIN_SZ <- as.factor(flow_data$ORIGIN_SZ)
flow_data$DESTIN_SZ <- as.factor(flow_data$DESTIN_SZ)
```

Next, we use left_join() from the `dplyr` package to join the `flow_data` and `dist_pair` dataframes:
```{r}
flow_data1 <- flow_data %>%
  left_join(dist_pair, 
            by = c("ORIGIN_SZ" = "orig",
                   "DESTIN_SZ" = "dest"))
```

# 6. Prerparing Origin and Destination Attributes

## 6.1. Importing Population Data
```{r}
pop <- read_csv("data/aspatial/pop.csv")
```

## 6.2. Geospatial Data Wrangling
```{r}
pop <- pop %>%
  left_join(mpsz2019, 
            by = c("PA" = "PLN_AREA_N",
                   "SZ" = "SUBZONE_N")) %>%
  select(1:6) %>%
  rename(SZ_NAME = SZ,
         SZ = SUBZONE_C)
```

## 6.3. Preparing Origin Attribute
```{r}
flow_data1 <- flow_data1 %>%
  left_join(pop,
            by = c(ORIGIN_SZ = "SZ")) %>%
  rename(ORIGIN_AGE7_12 = AGE7_12,
         ORIGIN_AGE12_24 = AGE13_24,
         ORIGIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))
```

## 6.4. Preparing Destination Attribute
```{r}
flow_data1 <- flow_data1 %>%
  left_join(pop,
            by = c(DESTIN_SZ = "SZ")) %>%
  rename(DESTIN_AGE7_12 = AGE7_12,
         DESTIN_AGE12_24 = AGE13_24,
         DESTIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))
```

Save the output in rds format for future use:

```{r}
write_rds(dist_pair, "data/rds/dist_pair.rds")
```

# 7. Calibrating Spatial Interaction Models

We will calibrate Spatial Interaction Models using the Poisson Regression method.

## 7.1. Import Modelling Data
First, we will import the modelling data into R:

```{r}
SIM_data <- read_rds("data/rds/SIM_data.rds")
```

## 7.2. Visualising Dependent Variable
We will plot the distribution of TRIPS (dependent variable) using a histogram:

```{r}
ggplot(data = SIM_data,
       aes(x = TRIPS)) +
  geom_histogram()
```

It is observed that the distribution is highly skewed and does not resemble a normal distribution. 

Next, we will visualise the relationship between the TRIPS, the dependent variable, and distance, one of the key independent variables in the Spatial Interaction Model:

```{r}
ggplot(data = SIM_data,
       aes(x = dist,
           y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)
```
It is observed that the relationship between TRIPS and dist does not resemble a linear relationship.

On the other hand, we can observe a more linear relationship if we apply log transformation on both variables:

```{r}
ggplot(data = SIM_data,
       aes(x = log(dist),
           y = log(TRIPS))) +
  geom_point() +
  geom_smooth(method = lm)
```

## 7.3. Check for Variables with Zero Values
Since Poisson Regression is based on log and log0 is undefined, we have to ensure that there are no 0 values in the explanatory variables:

```{r}
summary(SIM_data)
```
The report shows that variables ORIGIN_AGE7_12, ORIGIN_AGE13_24, ORIGIN_AGE25_64, DESTIN_AGE7_12, DESTIN_AGE13_24, and DESTIN_AGE25_64 consists of 0 values.

We will use the following code to replace zero values with 0.99:

```{r}
SIM_data$DESTIN_AGE7_12 <- ifelse(SIM_data$DESTIN_AGE7_12 == 0, 0.99,
                                  SIM_data$DESTIN_AGE7_12)

SIM_data$DESTIN_AGE13_24 <- ifelse(SIM_data$DESTIN_AGE13_24 == 0, 0.99, 
                                   SIM_data$DESTIN_AGE13_24)

SIM_data$DESTIN_AGE25_64 <- ifelse(SIM_data$DESTIN_AGE25_64 == 0, 0.99, 
                                   SIM_data$DESTIN_AGE25_64)

SIM_data$ORIGIN_AGE7_12 <- ifelse(SIM_data$ORIGIN_AGE7_12 == 0, 0.99,
                                  SIM_data$ORIGIN_AGE7_12)

SIM_data$ORIGIN_AGE13_24 <- ifelse(SIM_data$ORIGIN_AGE13_24 == 0, 0.99, 
                                   SIM_data$ORIGIN_AGE13_24)

SIM_data$ORIGIN_AGE25_64 <- ifelse(SIM_data$ORIGIN_AGE25_64 == 0, 0.99,
                                   SIM_data$ORIGIN_AGE25_64)


summary(SIM_data)
```

Running `summary()` again shows that all 0 values have been replaced by 0.99.

## 7.4. Unconstrained Spatial Interaction Model
In this section, we will calibrate an unconstrained spatial interaction model using the `glm()` function from Base Stats. The explanatory variables are origin population by different age cohort, destination population by different age cohort and distance between origin and destination in km.

We will use the following code to calibrate the model:
```{r}
uncSIM <- glm(formula = TRIPS ~
                log(ORIGIN_AGE25_64) +
                log(DESTIN_AGE25_64) +
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
uncSIM
```

## 7.5. R-squared Function
We will write a function to calculate R-sqared value to measure how much variation of the trips can be accounted by the model:

```{r}
calc_Rsquared <- function(observed, estimated){
  r <- cor(observed, estimated)
  R2 <- r^2
  R2
}
```

Next, we will calculate the R-squared of the unconstrained SIM using the following code:
```{r}
calc_Rsquared(uncSIM$data$TRIPS, uncSIM$fitted.values)
```
```{r}
r2_mcfadden(uncSIM)
```

## 7.6. ORigin (Production) Constrained SIM
We will fit an origin constrained SIM by using the following code:

```{r}
orcSIM <- glm(formula = TRIPS ~
                ORIGIN_SZ +
                log(DESTIN_AGE25_64) +
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)

summary(orcSIM)
```

We can examine how the constraints hold for destinations:
```{r}
calc_Rsquared(orcSIM$data$TRIPS, orcSIM$fitted.values)
```

## 7.7. Destination Constrained
In this section, we will fit a destination constrained SIM by using the following code:

```{r}
decSIM <- glm(formula = TRIPS ~
                DESTIN_SZ +
                log(ORIGIN_AGE25_64) +
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)

summary(decSIM)
```

We can examine how the constraints hold for destinations:
```{r}
calc_Rsquared(decSIM$data$TRIPS, decSIM$fitted.values)
```

## 7.8. Doubly Constrained

In this section, we will fit a doubly constrained SIM by using the following code:

```{r}
dbcSIM <- glm(formula = TRIPS ~
                ORIGIN_SZ +
                DESTIN_SZ +
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)

summary(dbcSIM)
```

We can examine how the constraints hold for destinations:
```{r}
calc_Rsquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)
```
## 7.9, Model Comparison
Another useful model performance measure of continuous dependent variable is Root Mean Squared Error (RMSE). We will use the `compare_performance()` function from the `performance` package.

Firstly, we will create a list called model_list by using the following code:
```{r}
model_list <- list(unconstrained = uncSIM,
                   originConstrained = orcSIM,
                   destinConstrained = decSIM,
                   doublyConstrained = dbcSIM)
```

Next, we will compute the RMSE of all models in the model_list:
```{r}
compare_performance(model_list,
                    metrics = "RMSE")
```

The results show that the doubly constrained SIM is the best model among the four as it has the lowest RMSE value of 1487.111.

## 7.10. Visuslising Fitted
We will visualise the observed and fitted values. First, we will extract the fitted values from each model using the following code:

```{r}
df <- as.data.frame(uncSIM$fitted.values) %>%
  round(digits = 0)
```

Next, we will join the values to SIM_data dataframe:
```{r}
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(uncTRIPS = "uncSIM$fitted.values")
```

We will repeat the same steps for:

Origin Constrained SIM
```{r}
df <- as.data.frame(orcSIM$fitted.values) %>%
  round(digits = 0)
```

```{r}
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(orcTRIPS = "orcSIM$fitted.values")
```

Destination Constrained SIM
```{r}
df <- as.data.frame(decSIM$fitted.values) %>%
  round(digits = 0)
```

```{r}
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(decTRIPS = "decSIM$fitted.values")
```

Doubly Constrained SIM
```{r}
df <- as.data.frame(dbcSIM$fitted.values) %>%
  round(digits = 0)
```

```{r}
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(dbcTRIPS = "dbcSIM$fitted.values")
```

Finally, we will plot the fitted values from each model:

```{r}
unc_p <- ggplot(data = SIM_data,
                aes(x = uncTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

orc_p <- ggplot(data = SIM_data,
                aes(x = orcTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

dec_p <- ggplot(data = SIM_data,
                aes(x = decTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

dbc_p <- ggplot(data = SIM_data,
                aes(x = dbcTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

ggarrange(unc_p, orc_p, dec_p, dbc_p,
          ncol = 2,
          nrow = 2)
```



