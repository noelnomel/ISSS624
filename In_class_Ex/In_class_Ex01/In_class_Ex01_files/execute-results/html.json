{
  "hash": "89f9effd64a1e14d6a4838a2ee266d12",
  "result": {
    "markdown": "---\ntitle: \"In-Class Exercise 1: Geospatial Data Wrangling and Visualisation\"\ndate: \"18 November 2023\"\ndate-modified: \"last-modified\"\nformat: html\nexecute: \n  echo: true # all code chunks will appear\n  eval: true # all code chunks will run live\n  warning: false # do not display warning message\neditor: visual\n---\n\n\n## 1. Getting Started\n\nThe following packages will be used in this in-class exercise, and they are loaded into R using the following code:\n\n-   `tmap`: thematic mapping\n-   `sf`: geospatial data handling\n-   `tidyverse`: non-spatial data handling\n-   `knitr`: for creating html table\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tmap, sf, tidyverse)\n```\n:::\n\n\n## 2. Importing Origin Destination Data\n\nFirstly, we will import the dataset *Passenger Volume by Origin Destination Bus Stops* downloaded from LTA DataMall by using `read_csv()` of `readr` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nodbus <- read_csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n```\n:::\n\n\nA quick check of the `odbus` tibble data frame shows that the values in ORIGIN_PT_CODE and DESTINATION_PT_CODE are in numeric data type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(odbus)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          <chr> \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            <chr> \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       <dbl> 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             <chr> \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      <chr> \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"4406…\n$ DESTINATION_PT_CODE <chr> \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"1722…\n$ TOTAL_TRIPS         <dbl> 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n```\n:::\n:::\n\n\nWe will use the `as.factor()` function from the `tidyverse` package to convert these codes from numeric to factor data type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nodbus$ORIGIN_PT_CODE <-\n  as.factor(odbus$ORIGIN_PT_CODE) \nodbus$DESTINATION_PT_CODE <-\n  as.factor(odbus$DESTINATION_PT_CODE)\n```\n:::\n\n\nTo confirm that the data types are converted successfully:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(odbus)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          <chr> \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            <chr> \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       <dbl> 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             <chr> \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      <fct> 04168, 04168, 80119, 80119, 44069, 44069, 20281, 2…\n$ DESTINATION_PT_CODE <fct> 10051, 10051, 90079, 90079, 17229, 17229, 20141, 2…\n$ TOTAL_TRIPS         <dbl> 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n```\n:::\n:::\n\n\n## 3. Extracting Study Data\n\nFor this exercise, we will extract commuting flows on weekdays between between 7 and 10 am:\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin7_9 <- odbus %>%\n  filter(DAY_TYPE == 'WEEKDAY') %>%\n  filter(TIME_PER_HOUR >= 7 &\n          TIME_PER_HOUR <= 9) %>%\n  group_by(ORIGIN_PT_CODE) %>%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(origin7_9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  ORIGIN_PT_CODE TRIPS\n  <fct>          <dbl>\n1 01012           1617\n2 01013            813\n3 01019           1620\n4 01029           2383\n5 01039           2727\n6 01059           1415\n```\n:::\n:::\n\n\nWe will save the output in rds format for future use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(origin7_9, \"data/rds/origin7_9.rds\")\n```\n:::\n\n\nWe can then import the rds file into the R environment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin7_9 <- read_rds(\"data/rds/origin7_9.rds\")\n```\n:::\n\n\n## 4. Working with Geospatial Data\n\nWe will import two shapefile into RStudio:\n\n1.  BusStop: This data provides the location of bus stops as of Q42022.\n\n2.  MPSZ-2019: This data provides the subzone boundaries defined in the URA Master Plan 2019.\n\n### 4.1. Importing Geospatial Data\n\nWe will use the following code to import the BusStop data downloaded from LTA DataMall:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop <- st_read(dsn=\"data/geospatial\",\n                   layer = \"BusStop\") %>%\n  st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `BusStop' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\In_class_Ex\\In_class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n```\n:::\n:::\n\n\nWe can confirm that the import was done correctly by using this code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(busstop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N <chr> \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N <chr> \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   <chr> \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   <POINT [m]> POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n```\n:::\n:::\n\n\nNext, we will use the following code to import the MPSZ-2019 data downloaded from data.gov.sg:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz2019 <- st_read(dsn=\"data/geospatial\",\n                   layer = \"MPSZ-2019\") %>%\n  st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\noel1\\Documents\\School\\02. Special Sem 1\\ISSS624 Geospatial Analysis\\noelnomel\\ISSS624\\In_class_Ex\\In_class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\nWe can confirm that the import was done correctly by using this code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpsz2019)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 332\nColumns: 7\n$ SUBZONE_N  <chr> \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"JURON…\n$ SUBZONE_C  <chr> \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPSZ05\",…\n$ PLN_AREA_N <chr> \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE RIVER\", \"WESTERN …\n$ PLN_AREA_C <chr> \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"WI\", \"SI\", \"SI\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"WEST…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"WR\", \"CR\", \"CR\",…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((33222.98 29..., MULTIPOLYGON (…\n```\n:::\n:::\n\n\n## 5. Geospatial Data Wrangling\n\n### 5.1. Combining `busstop` and `mpsz2019`\n\nWe will use the following code to populate planning subzone code from the `mpsz2019` data frame into the `busstop` simple features data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop_mpsz2019 <- st_intersection(busstop, mpsz2019) %>%\n  select(BUS_STOP_N, SUBZONE_C) %>%\n  st_drop_geometry()\n```\n:::\n\n\nWe will save the output data into rds format for future use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(busstop_mpsz2019, \"data/rds/busstop_mpsz2019.rds\")\n```\n:::\n\n\nNext, we will join the planning subzone code from the `busstop_mpsz2019` data frame to the `odbus7_9` data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_data <- left_join(origin7_9, busstop_mpsz2019,\n                         by = c('ORIGIN_PT_CODE' = 'BUS_STOP_N')) %>%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C)\nglimpse(origin_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,031\nColumns: 3\n$ ORIGIN_BS <chr> \"01012\", \"01013\", \"01019\", \"01029\", \"01039\", \"01059\", \"01109…\n$ TRIPS     <dbl> 1617, 813, 1620, 2383, 2727, 1415, 115, 7675, 8074, 3913, 40…\n$ ORIGIN_SZ <chr> \"RCSZ10\", \"RCSZ10\", \"DTSZ01\", \"DTSZ01\", \"DTSZ01\", \"DTSZ01\", …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolSums(is.na(origin_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nORIGIN_BS     TRIPS ORIGIN_SZ \n        0         0        55 \n```\n:::\n:::\n\n\nWe will now check for duplicates:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicates <- origin_data %>%\n  group_by_all() %>%\n  filter(n() > 1) %>%\n  ungroup()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(duplicates)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 26\nColumns: 3\n$ ORIGIN_BS <chr> \"11009\", \"11009\", \"22501\", \"22501\", \"43709\", \"43709\", \"47201…\n$ TRIPS     <dbl> 13826, 13826, 9743, 9743, 1118, 1118, 23998, 23998, 6218, 62…\n$ ORIGIN_SZ <chr> \"QTSZ01\", \"QTSZ01\", \"JWSZ09\", \"JWSZ09\", \"BKSZ07\", \"BKSZ07\", …\n```\n:::\n:::\n\n\nAnd retain each unique record:\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_data <- unique(origin_data)\nglimpse(origin_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,018\nColumns: 3\n$ ORIGIN_BS <chr> \"01012\", \"01013\", \"01019\", \"01029\", \"01039\", \"01059\", \"01109…\n$ TRIPS     <dbl> 1617, 813, 1620, 2383, 2727, 1415, 115, 7675, 8074, 3913, 40…\n$ ORIGIN_SZ <chr> \"RCSZ10\", \"RCSZ10\", \"DTSZ01\", \"DTSZ01\", \"DTSZ01\", \"DTSZ01\", …\n```\n:::\n:::\n\n\nNext, we will update the `origin_data` with planning subzone codes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz2019_origindata <- left_join(mpsz2019, origin_data,\n                                by = c(\"SUBZONE_C\" = \"ORIGIN_SZ\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpsz2019_origindata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 4,984\nColumns: 9\n$ SUBZONE_N  <chr> \"MARINA EAST\", \"INSTITUTION HILL\", \"INSTITUTION HILL\", \"ROB…\n$ SUBZONE_C  <chr> \"MESZ01\", \"RVSZ05\", \"RVSZ05\", \"SRSZ01\", \"SRSZ01\", \"SRSZ01\",…\n$ PLN_AREA_N <chr> \"MARINA EAST\", \"RIVER VALLEY\", \"RIVER VALLEY\", \"SINGAPORE R…\n$ PLN_AREA_C <chr> \"ME\", \"RV\", \"RV\", \"SR\", \"SR\", \"SR\", \"SR\", \"SR\", \"SR\", \"SR\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ ORIGIN_BS  <chr> NA, \"13089\", \"13099\", \"04321\", \"06129\", \"06151\", \"06159\", \"…\n$ TRIPS      <dbl> NA, 3241, 3735, 1492, 3031, 1159, 2595, 5188, 1917, 3919, 1…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((33222.98 29..., MULTIPOLYGON (…\n```\n:::\n:::\n\n\n## 6. Choropleth Visualisation\n\nWe will now draw a choropleth map showing the distribution of passenger trips at the planning subzone level:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz2019_origindata) +\n  tm_fill(\"TRIPS\",\n          style = \"quantile\",\n          palette = 'Greens',\n          title = \"Passenger Trips\") +\n  tm_layout(main.title = \"Distirbution of Passenger Trips by Planning Subzone Level\",\n            main.title.position = \"center\",\n            main.title.size = 1) +\n  tm_borders(alpha = 0.6) +\n  tm_scale_bar() +\n  tm_credits(\"Source: Planning Subzone boundary from URA\\n\n             Passenger trip data from LTA\")\n```\n\n::: {.cell-output-display}\n![](In_class_Ex01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In_class_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}