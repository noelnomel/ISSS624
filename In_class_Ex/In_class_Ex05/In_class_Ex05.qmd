---
title: "In-Class Exercise 5: Spatial Econometric Interaction Models"
date: "16 December 2023"
date-modified: "last-modified"
format: html
execute: 
  echo: true # all code chunks will appear
  eval: true # all code chunks will run live
  warning: false # do not display warning message
editor: visual
---

# 1. Overview

This exercise is a continuation of in-class exercises 3 and 4.

# 2. Getting Started

Install development version of the `spflow` package:
```{r}
#| eval: false
devtools::install_github("LukeCe/spflow")
```

We will use the following R packages in this exercise:

-   `spflow` for spatial econometric interaction modelling

```{r}
pacman::p_load(spflow, tmap, sf, spdep, sp,
               Matrix, reshape2, tidyverse, readr)
```

# 3. The Data

Three datasets are required before Spatial Econometric Interaction Models can be calibrated:
1. spatial weights
2. tibble data.frame with origin, destination, flows and distances between origin and destination
3. tibble data.frame with explanatory variables

We will load the datasets into the R environment using the following codes:

```{r}
# spatial weights and neighbour list
mpsz_nb <- read_rds("data/rds/mpsz_nb.rds")
head(mpsz_nb)
```
We can observe that one area (313) has no neighbour if we use fixed distance.

```{r}
# origin, destination, flow and distance
mpsz_flow <- read_rds("data/rds/mpsz_flow.rds")
glimpse(mpsz_flow)
```

```{r}
# explanatory variables
mpsz_var <- read_rds("data/rds/mpsz_var.rds")
glimpse(mpsz_var)
```

::: {.callout-note}
#### Learn from the above


# 4. Creating `spflow_network-class` Objects

`spflow_network-class` is a S4 class that contains all information on a spatial network that is composed by a set of nodes linked by some neighbourhood relation. It can be created by using `spflow_network` from `spflow` package.

We will use the following code to create a sp flow network class using contiguity based neighbourhood structure:
```{r}
mpsz_net <- spflow_network(
  # we assign "sg" as an id 
  id_net = "sg",
  node_neighborhood = nb2mat(mpsz_nb$by_contiguity),
  node_data = mpsz_var,
  node_key_column = "SZ_CODE")

mpsz_net
```

We will use the `spflow_network_pair()` to hold information on origin-destination (OD) pairs:

```{r}
mpsz_net_pairs <- spflow_network_pair(
  id_orig_net = "sg",
  id_dest_net = "sg",
  pair_data = mpsz_flow,
  orig_key_column = "ORIGIN_SZ",
  dest_key_column = "DESTIN_SZ")

mpsz_net_pairs
```

Lastly, we will use `spflow_network_multi()` to combine the network class and pair class:

```{r}
mpsz_multi_net <- spflow_network_multi(
  mpsz_net,mpsz_net_pairs)

mpsz_multi_net
```

# 5. Correlation Analysis

When building explanatory models, it is important to check for multicollinearity to avoid including variables that are highly correlated to each other. 

We will use the following functions from the spflow package o check for collinearity:
1. `pair_cor()` to create a correlation matrix
2. `cor_image()` to plot the correlation matrix as a correlogram 

```{r}
#| eval: false
cor_formula <- log(1 + TRIPS) ~
  BUSSTOP_COUNT +
  AGE7_12 +
  AGE13_24 +
  AGE25_64 +
  SCHOOL_COUNT+
  BUSINESS_COUNT +
  RETAILS_COUNT +
  FINSERV_COUNT +
  P_(log(DISTANCE + 1))

cor_mat <- pair_cor(
  mpsz_multi_net,
  spflow_formula = cor_formula,
  add_lags_x = FALSE
)

colnames(cor_mat) <- paste0(
  substr(
    colnames(cor_mat),1,3),
  "...")

cor_image(cor_mat)
```

# 6. Model Calibration

## 6.1. Base Model
We will calibrate a base model using the following code:

```{r}
base_model <- spflow(
  spflow_formula = log(1 + TRIPS) ~
    O_(BUSSTOP_COUNT +
         AGE25_64) +
    D_(SCHOOL_COUNT +
         BUSINESS_COUNT +
         RETAILS_COUNT +
         FINSERV_COUNT) +
    P_(log(DISTANCE + 1)),
  spflow_networks = mpsz_multi_net)

base_model
```

## 6.2. Residual Diagnostics

```{r}
old_par <- par(mfrow = c(1,3),
               mar = c(2,2,2,2))
spflow_moran_plots(base_model)
```

Closer to the zero line means lesser spatial autocorrelation.

Next, we use `pair_cor()` to inspect the relationship of the residual and explanatory variables:
```{r}
corr_residual <- pair_cor(base_model)
colnames(corr_residual) <- substr(colnames(corr_residual),1,3)
cor_image(corr_residual)
```

## Model Control

```{r}
spflow_formula <- log(1 + TRIPS) ~
  O_(BUSSTOP_COUNT +
         AGE25_64) +
    D_(SCHOOL_COUNT +
         BUSINESS_COUNT +
         RETAILS_COUNT +
         FINSERV_COUNT) +
    P_(log(DISTANCE + 1))

model_control <- spflow_control(
  estimation_method = "mle",
  model = "model_8")

mle_model8 <- spflow(
  spflow_formula,
  spflow_networks = mpsz_multi_net,
  estimation_control = model_control
)
  
mle_model8
```
Model 8 brings out intrazonal flows to examine its influence on commuter flows.


## 6.3. Bayesian Markov Chain Monte Carlo (MCMC)

















